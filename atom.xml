<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://wendyusinggithub.github.io/atom.xml" rel="self"/>
  
  <link href="https://wendyusinggithub.github.io/"/>
  <updated>2021-07-13T08:02:47.344Z</updated>
  <id>https://wendyusinggithub.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NacoOS hw01</title>
    <link href="https://wendyusinggithub.github.io/2021/07/13/NacoOS-hw01/"/>
    <id>https://wendyusinggithub.github.io/2021/07/13/NacoOS-hw01/</id>
    <published>2021-07-13T07:51:09.000Z</published>
    <updated>2021-07-13T08:02:47.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NachOS-hw01"><a href="#NachOS-hw01" class="headerlink" title="NachOS hw01"></a>NachOS hw01</h1><h2 id="Trace-code"><a href="#Trace-code" class="headerlink" title="Trace code"></a>Trace code</h2><h3 id="SC-Halt"><a href="#SC-Halt" class="headerlink" title="SC_Halt"></a>SC_Halt</h3><p>Trace the SC_Halt system call to understand the implementation of a system call. (Sample code : halt.c)</p><h4 id="void-Halt"><a href="#void-Halt" class="headerlink" title="void Halt();"></a>void Halt();</h4><blockquote><p>userprog/syscall.h</p></blockquote><p>trace code 的目標是 syscall.h 的 Halt()。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC_Halt 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Halt</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* test/start.s */</span><br><span class="line"></span><br><span class="line">.globl Halt</span><br><span class="line">.entHalt</span><br><span class="line">Halt:</span><br><span class="line">addiu $2,$0,SC_Halt</span><br><span class="line">syscall</span><br><span class="line">j$31</span><br><span class="line">.end Halt</span><br></pre></td></tr></table></figure><p>執行指令 addiu，SC_Halt 是定義在 “syscall.h” 的常數，MIPS 架構的 register(0) 永遠是 0 ，將兩者相加後存到 register(2) 中，即將 SC_Halt 的值 assign 給 register(2)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addiu $2,$0,SC_Halt</span><br></pre></td></tr></table></figure><p>執行指令 syscall，進入Exception handler。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syscall</span><br></pre></td></tr></table></figure><p>在 machine.h 定義常數 RetAddrReg 的值是 31。跳到 register(31) 所儲存的位置，表示回到 frame 的上一層。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j$31</span><br></pre></td></tr></table></figure><h4 id="1-void-Machine-Run"><a href="#1-void-Machine-Run" class="headerlink" title="1. void Machine::Run()"></a>1. void Machine::Run()</h4><p><strong>machine/mipssim.cc</strong> </p><p>程式開始執行，kernel 呼叫 Machine::Run()，Machine::Run() 在無窮迴圈呼叫OneInstruction()，不停的執行指令。”mipssim.h” 定義了 MIPS 架構支援的 63 個operation，OneInstruction() 負責處理這 63 個 operation 組成的指令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void Machine::Run()</span><br><span class="line">&#123;</span><br><span class="line">    for(;;) </span><br><span class="line">    &#123;</span><br><span class="line">        OneInstruction(instr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-void-Machine-OneInstruction-Instruction-instr"><a href="#2-void-Machine-OneInstruction-Instruction-instr" class="headerlink" title="2. void Machine::OneInstruction(Instruction *instr)"></a>2. void Machine::OneInstruction(Instruction *instr)</h4><p><strong>machine/mipssim.cc</strong></p><p>machine.h 定義常數PCReg 值 34，register(34) 放有當前指令的位址。不同指令進入不同的 switch case，當指令是 addiu，不會發生 interrupt，但當指令是 syscall，interupt 發生，呼叫 RaiseException()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Void Machine::OneInstruction(Instruction *instr)</span><br><span class="line">&#123;</span><br><span class="line">    int raw;</span><br><span class="line">    </span><br><span class="line">    /* fetch instruction */</span><br><span class="line">    if (!ReadMem(registers[PCReg], 4, &amp;raw)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    instr-&gt;value = raw;</span><br><span class="line">    instr-&gt;Decode();</span><br><span class="line"></span><br><span class="line">    switch (instr-&gt;opCode) &#123;</span><br><span class="line">    case OP_SYSCALL:</span><br><span class="line">        RaiseException(SyscallException, 0);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NachOS 定義了 9 種 exception 類型，在 case OP_SYSCALL 發生的是SyscallException 類型的 exception。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* machine/machine.h */</span><br><span class="line"></span><br><span class="line">enum ExceptionType &#123; </span><br><span class="line">    NoException,           </span><br><span class="line">    SyscallException,      </span><br><span class="line">    PageFaultException,   </span><br><span class="line">    ReadOnlyException,     </span><br><span class="line">    BusErrorException,     </span><br><span class="line">    AddressErrorException, </span><br><span class="line">    OverflowException,     </span><br><span class="line">    IllegalInstrException, </span><br><span class="line">    NumExceptionTypes</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-Void-Machine-RaiseException-ExceptionType-which-int-badVAddr"><a href="#3-Void-Machine-RaiseException-ExceptionType-which-int-badVAddr" class="headerlink" title="3. Void Machine::RaiseException(ExceptionType which, int badVAddr)"></a>3. Void Machine::RaiseException(ExceptionType which, int badVAddr)</h4><blockquote><p>machine/machine.cc</p></blockquote><p>把程式從 user mode 改成 kernel mode，呼叫 ExceptionHandler。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Void Machine::RaiseException(ExceptionType which, int badVAddr)</span><br><span class="line">&#123;</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-void-ExceptionHandler-ExceptionType-which"><a href="#4-void-ExceptionHandler-ExceptionType-which" class="headerlink" title="4. void ExceptionHandler(ExceptionType which)"></a>4. void ExceptionHandler(ExceptionType which)</h4><blockquote><p>userprog/exception .cc</p></blockquote><p>ExceptionHandler() 讀取 register(2) 的值，先前已經把 SC_Halt 的值 assign 給register(2)，因此進入 SC_Halt 的 switch case，呼叫 SysHalt()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void ExceptionHandler(ExceptionType which)</span><br><span class="line">&#123;</span><br><span class="line">    int type = kernel-&gt;machine-&gt;ReadRegister(2);</span><br><span class="line">    switch(type) &#123;</span><br><span class="line">    case SC_Halt:</span><br><span class="line">        SysHalt(); </span><br><span class="line">        break;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-void-SysHalt"><a href="#5-void-SysHalt" class="headerlink" title="5. void SysHalt()"></a>5. void SysHalt()</h4><blockquote><p>userprog/ksyscall.h</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void SysHalt()</span><br><span class="line">&#123;</span><br><span class="line">    kernel-&gt;interrupt-&gt;Halt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-Void-Interrupt-Halt"><a href="#6-Void-Interrupt-Halt" class="headerlink" title="6. Void Interrupt::Halt()"></a>6. Void Interrupt::Halt()</h4><blockquote><p>machine/interrupt.cc</p></blockquote><p>將物件 kernel 所佔用的記憶體釋放，即關機。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Void Interrupt::Halt()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;Machine halting!\n\n&quot;;</span><br><span class="line">    cout &lt;&lt; &quot;This is halt\n&quot;;</span><br><span class="line">    kernel-&gt;stats-&gt;Print();</span><br><span class="line">    delete kernel; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SC-Create"><a href="#2-SC-Create" class="headerlink" title="(2) SC_Create"></a>(2) SC_Create</h3><p>Trace the SC_Create system call to understand the basic operations and data structure in a file system. (Sample code : createFile.c)</p><h4 id="void-Create"><a href="#void-Create" class="headerlink" title="void Create();"></a>void Create();</h4><blockquote><p>userprog/syscall.h</p></blockquote><p>trace code 的目標是 syscall.h 的 Create()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define SC_Create4</span><br><span class="line"></span><br><span class="line">int Create(char *name);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* test/start.s */</span><br><span class="line"></span><br><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line"></span><br><span class="line">.globl Create</span><br><span class="line">.entCreate</span><br><span class="line">Create:</span><br><span class="line">addiu $2,$0,SC_Create</span><br><span class="line">syscall</span><br><span class="line">j$31</span><br><span class="line">.end Create</span><br></pre></td></tr></table></figure><h4 id="1-OneInstruction-Instruction-instr"><a href="#1-OneInstruction-Instruction-instr" class="headerlink" title="1. OneInstruction(Instruction *instr)"></a>1. OneInstruction(Instruction *instr)</h4><blockquote><p>machine/mipssim</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;machine.h&quot;</span><br><span class="line">#include &quot;mipssim.h&quot;</span><br><span class="line"></span><br><span class="line">Void Machine::OneInstruction(Instruction *instr)</span><br><span class="line">&#123;</span><br><span class="line">    switch (instr-&gt;opCode) &#123;</span><br><span class="line">    case OP_SYSCALL:</span><br><span class="line">       RaiseException(SyscallException, 0);</span><br><span class="line">       return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-RaiseException-ExceptionType-which-int-badVAddr"><a href="#2-RaiseException-ExceptionType-which-int-badVAddr" class="headerlink" title="2. RaiseException(ExceptionType which, int badVAddr)"></a>2. RaiseException(ExceptionType which, int badVAddr)</h4><blockquote><p>machine/machine.cc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;machine.h&quot;</span><br><span class="line"></span><br><span class="line">Void Machine::RaiseException(ExceptionType which, int badVAddr)</span><br><span class="line">&#123;</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-ExceptionHandler-ExceptionType-which"><a href="#3-ExceptionHandler-ExceptionType-which" class="headerlink" title="3. ExceptionHandler(ExceptionType which)"></a>3. ExceptionHandler(ExceptionType which)</h4><blockquote><p>userprog/exception.cc</p></blockquote><p>從 register(4) 讀出呼叫 Create 時傳入的參數，即 filename 的位置。Syscreate 回傳是否有成功的 create file，成功回傳 1，失敗回傳 0。完成 SysCreate 後必須修改 PCReg 讓 PCReg 指向下一個指令，如果沒有加上這一行，程式會不停的執行同一道指令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line">#include &quot;ksyscall.h&quot;</span><br><span class="line"></span><br><span class="line">void ExceptionHandler(ExceptionType which)</span><br><span class="line">&#123;</span><br><span class="line">   int type = kernel-&gt;machine-&gt;ReadRegister(2);</span><br><span class="line"></span><br><span class="line">   switch(type) </span><br><span class="line">   &#123;</span><br><span class="line">       case SC_Create:</span><br><span class="line">          val = kernel-&gt;machine-&gt;ReadRegister(4);</span><br><span class="line">          char *filename = &amp;(kernel-&gt;machine-&gt;mainMemory[val]);</span><br><span class="line">          status = SysCreate(filename);</span><br><span class="line">          if(status != -1) status = 1;</span><br><span class="line">          kernel-&gt;machine-&gt;WriteRegister(2, (int) status);</span><br><span class="line"></span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PrevPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg));</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg) + 4);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(NextPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg)+4);</span><br><span class="line">    return;</span><br><span class="line">    ASSERTNOTREACHED();</span><br><span class="line">        break;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-int-SysCreate-char-filename"><a href="#4-int-SysCreate-char-filename" class="headerlink" title="4. int SysCreate(char *filename)"></a>4. int SysCreate(char *filename)</h4><blockquote><p>userprog/ksyscall.h</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int Interrupt::CreateFile(char *filename)</span><br><span class="line">&#123;</span><br><span class="line">    return kernel-&gt;CreateFile(filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-int-Interrupt-CreateFile-char-filename"><a href="#5-int-Interrupt-CreateFile-char-filename" class="headerlink" title="5. int Interrupt::CreateFile(char *filename)"></a>5. int Interrupt::CreateFile(char *filename)</h4><blockquote><p>machine/interrupt.cc</p></blockquote><p>class FileSystem 是 NachOS 的 file system API。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int Kernel::CreateFile(char *filename)</span><br><span class="line">&#123;</span><br><span class="line">    return fileSystem-&gt;Create(filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 filesys.cc 的開頭有一段 #ifdef #else，有沒有 #define FILESYS_STUB 使用的是不同的檔案系統，如果有 #define FILESYS_STUB，並不是使用真正的 NachOS 檔案系統，只是借用了 linux 的檔案系統，如果沒有 #define FILESYS_STUB，才是使用 NachOS 的檔案系統。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#ifdef FILESYS_STUB</span><br></pre></td></tr></table></figure><p>Makefile 裡有下 DFILESYS_STUB 的 flag，代表目前 NachOS 只是借用了 linux 的檔案系統。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFINES =  -DFILESYS_STUB -DRDATA -DSIM_FIX</span><br></pre></td></tr></table></figure><h4 id="6-bool-Filesystem-OpenForWrite-char-name"><a href="#6-bool-Filesystem-OpenForWrite-char-name" class="headerlink" title="6. bool Filesystem::OpenForWrite(char *name)"></a>6. bool Filesystem::OpenForWrite(char *name)</h4><blockquote><p>filesys/filesys.cc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#ifdef FILESYS_STUB </span><br><span class="line"></span><br><span class="line">class FileSystem &#123;</span><br><span class="line">public:</span><br><span class="line">    bool Create(char *name) </span><br><span class="line">&#123;</span><br><span class="line">int fileDescriptor = OpenForWrite(name);</span><br><span class="line"></span><br><span class="line">if (fileDescriptor == -1) return FALSE;</span><br><span class="line">Close(fileDescriptor); </span><br><span class="line">return TRUE; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-int-OpenForWrite-char-name"><a href="#7-int-OpenForWrite-char-name" class="headerlink" title="7. int OpenForWrite(char *name)"></a>7. int OpenForWrite(char *name)</h4><blockquote><p>lib/sysdep.c</p></blockquote><p>目前的檔案系統是借用 linux 的檔案系統，Create 的實做是呼叫了 linux 提供的 open()，open() 失敗回傳 -1，成功回傳非負整數。NachOS 目前沒有真正的檔案系統，如果我們要使用真正的 NachOS 檔案系統，就要在 File System 的 API 之下，自己寫一個檔案系統。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/file.h&gt;</span><br><span class="line"></span><br><span class="line">int OpenForWrite(char *name)</span><br><span class="line">&#123;</span><br><span class="line">    int fd = open(name, O_RDWR|O_CREAT|O_TRUNC, 0666);</span><br><span class="line">    ASSERT(fd &gt;= 0); </span><br><span class="line">    return fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-PrintInt"><a href="#3-PrintInt" class="headerlink" title="(3) PrintInt"></a>(3) PrintInt</h3><p>Trace the SC_PrintInt system call to understand how NachOS implements asynchronized I/O using CallBack functions and register schedule events. (Sample code : add.c)</p><h4 id="void-PrintInt-int-number"><a href="#void-PrintInt-int-number" class="headerlink" title="void PrintInt(int number);"></a>void PrintInt(int number);</h4><blockquote><p>userprog/syscall.h</p></blockquote><p>trace code 的目標是 syscall.h 的 PrintInt() 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define SC_PrintInt 16</span><br><span class="line"></span><br><span class="line">void PrintInt(int number);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* test/start.s */</span><br><span class="line"></span><br><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line"></span><br><span class="line">.globl PrintInt</span><br><span class="line">.entPrintInt</span><br><span class="line">PrintInt:</span><br><span class="line">addiu $2,$0,SC_PrintInt</span><br><span class="line">syscall</span><br><span class="line">j$31</span><br><span class="line">.end PrintInt</span><br></pre></td></tr></table></figure><h4 id="1-OneInstruction-Instruction-instr-1"><a href="#1-OneInstruction-Instruction-instr-1" class="headerlink" title="1. OneInstruction(Instruction *instr)"></a>1. OneInstruction(Instruction *instr)</h4><blockquote><p>machine/mipssim</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Void Machine::OneInstruction(Instruction *instr)</span><br><span class="line">&#123;</span><br><span class="line">    int raw;</span><br><span class="line"></span><br><span class="line">    if (!ReadMem(registers[PCReg], 4, &amp;raw))</span><br><span class="line">return;</span><br><span class="line"></span><br><span class="line">    instr-&gt;value = raw;</span><br><span class="line">    instr-&gt;Decode();</span><br><span class="line"></span><br><span class="line">    switch (instr-&gt;opCode) &#123;</span><br><span class="line">    case OP_SYSCALL:</span><br><span class="line">        RaiseException(SyscallException, 0);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-RaiseException-ExceptionType-which-int-badVAddr-1"><a href="#2-RaiseException-ExceptionType-which-int-badVAddr-1" class="headerlink" title="2. RaiseException(ExceptionType which, int badVAddr)"></a>2. RaiseException(ExceptionType which, int badVAddr)</h4><blockquote><p>machine/machine.cc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Void Machine::RaiseException(ExceptionType which, int badVAddr)</span><br><span class="line">&#123;</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-ExceptionHandler-ExceptionType-which-1"><a href="#3-ExceptionHandler-ExceptionType-which-1" class="headerlink" title="3. ExceptionHandler(ExceptionType which)"></a>3. ExceptionHandler(ExceptionType which)</h4><blockquote><p>userprog/exception .cc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line">#include &quot;ksyscall.h&quot;</span><br><span class="line"></span><br><span class="line">void ExceptionHandler(ExceptionType which)</span><br><span class="line">&#123;</span><br><span class="line">   int type = kernel-&gt;machine-&gt;ReadRegister(2);</span><br><span class="line"></span><br><span class="line">   switch(type) </span><br><span class="line">   &#123;</span><br><span class="line">       case SC_PrintInt:</span><br><span class="line">          val = kernel-&gt;machine-&gt;ReadRegister(4);</span><br><span class="line">          SysPrintInt(val); </span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PrevPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg));</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg) + 4);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(NextPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg)+4);</span><br><span class="line">          break;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-SysPrintInt"><a href="#4-SysPrintInt" class="headerlink" title="4. SysPrintInt()"></a>4. SysPrintInt()</h4><blockquote><p>userprog/ksyscall.h</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void SysPrintInt(int number)</span><br><span class="line">&#123;</span><br><span class="line">    kernel-&gt;synchConsoleOut-&gt;PutInt(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-void-SynchConsoleOutput-PutInt-int-number"><a href="#5-void-SynchConsoleOutput-PutInt-int-number" class="headerlink" title="5. void SynchConsoleOutput::PutInt(int number)"></a>5. void SynchConsoleOutput::PutInt(int number)</h4><blockquote><p>userprog/synchconsole.cc</p></blockquote><p>只有一個 console，因此必須要 sync，輸出的過程是 critical section，一次只能有一個 thread 做 console output。使用 while 迴圈，將字串中的字元一個一個的印出。在此使用 do while 迴圈，因為第一個輸出的字元不需要等待，他既然可以成功 acquire 到 lock 代表目前沒有人在進行輸出，但接下來的字元輸出都要等前一個字元輸出完成才能進行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void SynchConsoleOutput::PutInt(int value)</span><br><span class="line">&#123;</span><br><span class="line">    char str[15];</span><br><span class="line">    int idx=0;</span><br><span class="line"></span><br><span class="line">    sprintf(str, &quot;%d\n\0&quot;, value); /* convert int into string */</span><br><span class="line">    lock-&gt;Acquire();  /* enter critical section */</span><br><span class="line">    do&#123;</span><br><span class="line">        consoleOutput-&gt;PutChar(str[idx]);</span><br><span class="line">        idx++;</span><br><span class="line">  waitFor-&gt;P();</span><br><span class="line">    &#125; while(str[idx] != &#x27;\0&#x27;);</span><br><span class="line">    lock-&gt;Release(); /* leave critical section */ </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class SynchConsoleOutput : public CallBackObj &#123;</span><br><span class="line">private:</span><br><span class="line">    ConsoleOutput *consoleOutput; /* the hardware display */</span><br><span class="line">    Lock *lock; /* only one writer at a time */</span><br><span class="line">    Semaphore *waitFor; /* wait for callBack */</span><br><span class="line">    void CallBack(); /* called when more data can be written */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>waitFor 是 class Semaphore 的物件，當呼叫 P() 時，若 waitFor.value &lt; 0 ，thread 會被加入 waitFor.queue 中等待。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">waitFor-&gt;P();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* threads/synch.h */</span><br><span class="line"></span><br><span class="line">class Semaphore &#123;</span><br><span class="line">public:</span><br><span class="line">    void P(); /* waits until value &gt; 0, then decrement */</span><br><span class="line">    void V(); /* increment, waking up a thread waiting in P() if </span><br><span class="line">               * necessary */</span><br><span class="line">private:      </span><br><span class="line">    int value;             </span><br><span class="line">    List&lt;Thread *&gt; *queue; /* threads waiting in P() for the value to be </span><br><span class="line">                            * &gt; 0 */      </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 value &gt; 0 之前都會卡在迴圈裡，在前一個字元做輸出時，thread 會進入 Sleep() 中，scheduler 會安排正在readyList 的 thread 使用 CPU。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* threads/synch.cc */</span><br><span class="line"></span><br><span class="line">void Semaphore::P()</span><br><span class="line">&#123; </span><br><span class="line">    while (value == 0) &#123; </span><br><span class="line">        queue-&gt;Append(currentThread);</span><br><span class="line">        currentThread-&gt;Sleep(FALSE);</span><br><span class="line">    &#125; </span><br><span class="line">    value--;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-ConsoleOutput-PutChar"><a href="#6-ConsoleOutput-PutChar" class="headerlink" title="6. ConsoleOutput::PutChar()"></a>6. ConsoleOutput::PutChar()</h4><blockquote><p>machine/console.cc</p></blockquote><p>呼叫 WriteFile() 對螢幕進行輸出，呼叫 Schedule() 模擬螢幕完成輸出後發出 interrupt 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void ConsoleOutput::PutChar(char ch)</span><br><span class="line">&#123;</span><br><span class="line">    WriteFile(writeFileNo, &amp;ch, sizeof(char));</span><br><span class="line">    kernel-&gt;interrupt-&gt;Schedule(this, ConsoleTime, ConsoleWriteInt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WriteFile() 的實做是呼叫 linux 提供的 write()，fd 是被寫入檔案的 file descriptor，writeFileNo 的值在 console.cc 中被 assign 為 1。 在 linux 系統中，file descriptor 為 1 即是 stdout，字元會被輸出到螢幕。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* lib/sysdep.cc */</span><br><span class="line"></span><br><span class="line">int WriteFile(int fd, char *buffer, int nBytes)</span><br><span class="line">&#123;</span><br><span class="line">    int retVal = write(fd, buffer, nBytes);</span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一個真正的作業系統會在輸出完成的時候發出 interrupt，由於這不是真的作業系統，所以他只能預估輸出時間然後自己發出 interrupt 。NachOS 預估字元輸出需要 100 單位時間，因此安排在 100 個單位時間後發出 interrupt 。關鍵字 this 通常被用在一個 class 內部，this 是一個指標，指向正在被執行的 class 的物件，this 在此處是 ConsoleOutput 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel-&gt;interrupt-&gt;Schedule(this, ConsoleTime, ConsoleWriteInt);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* machine/stats.h */ </span><br><span class="line"></span><br><span class="line">const int ConsoleTime =100; /* time to read or write one character */</span><br></pre></td></tr></table></figure><p>IntType 紀錄這個 interrupt 是由哪個硬體發出，NachOS支援六種硬體相關 interrupt 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* machine/interrupt.h */</span><br><span class="line"></span><br><span class="line">enum IntType &#123; TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, </span><br><span class="line">               NetworkSendInt, NetworkRecvInt&#125;;</span><br></pre></td></tr></table></figure><p>writeFileNo 的值在 console.cc 中被 assign 為 1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* machine/console.cc */</span><br><span class="line"></span><br><span class="line">ConsoleOutput::ConsoleOutput(char *writeFile, CallBackObj *toCall)</span><br><span class="line">&#123;</span><br><span class="line">    if (writeFile == NULL)</span><br><span class="line">        writeFileNo = 1;</span><br><span class="line">    else</span><br><span class="line">        writeFileNo = OpenForWrite(writeFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* threads/kernel.cc */</span><br><span class="line"></span><br><span class="line">synchConsoleOut = new SynchConsoleOutput(consoleOut);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* threads/kernel.cc */</span><br><span class="line"></span><br><span class="line">consoleOut = NULL;</span><br></pre></td></tr></table></figure><h4 id="1-void-Interrupt-Schedule-CallBackObj-toCall-int-fromNow-IntType-type"><a href="#1-void-Interrupt-Schedule-CallBackObj-toCall-int-fromNow-IntType-type" class="headerlink" title="1. void Interrupt::Schedule(CallBackObj *toCall, int fromNow, IntType type)"></a>1. void Interrupt::Schedule(CallBackObj *toCall, int fromNow, IntType type)</h4><blockquote><p>machine/interrupt.cc</p></blockquote><p>把待發生的 interrupt 放進 pending，當排定的時間到達時才會發生 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void Interrupt::Schedule(CallBackObj *toCall, int fromNow, IntType type)</span><br><span class="line">&#123;</span><br><span class="line">    int when = kernel-&gt;stats-&gt;totalTicks + fromNow;</span><br><span class="line">    PendingInterrupt *toOccur = new PendingInterrupt(toCall, when, type);</span><br><span class="line">    pending-&gt;Insert(toOccur);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Interrupt &#123;</span><br><span class="line">private:</span><br><span class="line">    SortedList&lt;PendingInterrupt *&gt; *pending;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>當排定的時間到達，interrupt 發生，回報發出 interrupt 的物件，即 ConsoleOutput，讓他進行 interrupt 的處理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PendingInterrupt *toOccur = new PendingInterrupt(toCall, when, type);</span><br></pre></td></tr></table></figure><p>when 是 interrupt 排定要發生的時間，totalTicks 是當前時間，fromNow 的值為 ConsoleTime，即 100。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int when = kernel-&gt;stats-&gt;totalTicks + fromNow;</span><br></pre></td></tr></table></figure><h4 id="8-void-Machine-Run"><a href="#8-void-Machine-Run" class="headerlink" title="8. void Machine::Run()"></a>8. void Machine::Run()</h4><blockquote><p>machine/mipssim.cc</p></blockquote><p>Onetick() 將系統時間推進一個單位，並且檢查是否有 interrupt 需要被執行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void Machine::Run()</span><br><span class="line">&#123;</span><br><span class="line">    Instruction *instr = new Instruction;</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        OneInstruction(instr);</span><br><span class="line">        kernel-&gt;interrupt-&gt;OneTick();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-Interrupt-OneTick"><a href="#9-Interrupt-OneTick" class="headerlink" title="9. Interrupt::OneTick()"></a>9. Interrupt::OneTick()</h4><blockquote><p>machine/interrupt.cc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void Interrupt::OneTick()</span><br><span class="line">&#123;</span><br><span class="line">    if (status == SystemMode) &#123;</span><br><span class="line">        stats-&gt;totalTicks += SystemTick;</span><br><span class="line">        stats-&gt;systemTicks += SystemTick;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        stats-&gt;totalTicks += UserTick;</span><br><span class="line">        stats-&gt;userTicks += UserTick;</span><br><span class="line">    &#125;</span><br><span class="line">    CheckIfDue(FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-Interrupt-CheckIfDue"><a href="#10-Interrupt-CheckIfDue" class="headerlink" title="10. Interrupt::CheckIfDue"></a>10. Interrupt::CheckIfDue</h4><blockquote><p>machine/interrupt.cc</p></blockquote><p>如果沒有interrupt 要發生，回傳 false，若有 interrupt 要發生，執行並且回傳 true，若 advanceClock 為 true，表示目前已經沒有任何指令要執行，則直接執行一個 interrupt。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">bool Interrupt::CheckIfDue(bool advanceClock)</span><br><span class="line">&#123;</span><br><span class="line">    PendingInterrupt *next;</span><br><span class="line">    Statistics *stats = kernel-&gt;stats;</span><br><span class="line"></span><br><span class="line">    if (pending-&gt;IsEmpty()) &#123;</span><br><span class="line">return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    next = pending-&gt;Front();</span><br><span class="line"></span><br><span class="line">    if (next-&gt;when &gt; stats-&gt;totalTicks) &#123;</span><br><span class="line">        if (!advanceClock) &#123; </span><br><span class="line">            return FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123; </span><br><span class="line">    stats-&gt;idleTicks += (next-&gt;when - stats-&gt;totalTicks);</span><br><span class="line">    stats-&gt;totalTicks = next-&gt;when;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inHandler = TRUE;</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        next = pending-&gt;RemoveFront();    </span><br><span class="line">        next-&gt;callOnInterrupt-&gt;CallBack();</span><br><span class="line">  delete next;</span><br><span class="line">    &#125; while(!pending-&gt;IsEmpty()</span><br><span class="line">            &amp;&amp; (pending-&gt;Front()-&gt;when &lt;= stats-&gt;totalTicks));</span><br><span class="line">    inHandler = FALSE;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若目前有要發生的 interrupt，把 interrupt 從 pending 中取出，呼叫發出此 interrupt<br>物件的 callBack()，在 interrupt 處理完之後，回傳 true。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    next = pending-&gt;RemoveFront();    </span><br><span class="line">    next-&gt;callOnInterrupt-&gt;CallBack();</span><br><span class="line">    delete next;</span><br><span class="line">&#125; while(!pending-&gt;IsEmpty()</span><br><span class="line">        &amp;&amp; (pending-&gt;Front()-&gt;when &lt;= stats-&gt;totalTicks));</span><br></pre></td></tr></table></figure><h4 id="11-void-ConsoleOutput-CallBack"><a href="#11-void-ConsoleOutput-CallBack" class="headerlink" title="11. void ConsoleOutput::CallBack()"></a>11. void ConsoleOutput::CallBack()</h4><blockquote><p>machine/console.cc</p></blockquote><p>當螢幕輸出完成，ConsoleOutput 呼叫 SynchConsoleOutput物件的 callBack()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void ConsoleOutput::CallBack() </span><br><span class="line">&#123;</span><br><span class="line">    putBusy = FALSE;</span><br><span class="line">    kernel-&gt;stats-&gt;numConsoleCharsWritten++;</span><br><span class="line">    callWhenDone-&gt;CallBack();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>consoleOutput 的 callWhenDone 是 SynchConsoleOutput。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* machine/console.h */</span><br><span class="line"></span><br><span class="line">class ConsoleOutput : public CallBackObj &#123;</span><br><span class="line">private:</span><br><span class="line">    CallBackObj *callWhenDone;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* machine/console.cc */</span><br><span class="line"></span><br><span class="line">ConsoleOutput::ConsoleOutput(char *writeFile, CallBackObj *toCall)</span><br><span class="line">&#123;</span><br><span class="line">    callWhenDone = toCall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* userprog/synchconsole.cc */</span><br><span class="line"></span><br><span class="line">SynchConsoleOutput::SynchConsoleOutput(char *outputFile)</span><br><span class="line">&#123;</span><br><span class="line">    consoleOutput = new ConsoleOutput(outputFile, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-SynchConsoleOutput-CallBack"><a href="#11-SynchConsoleOutput-CallBack" class="headerlink" title="11. SynchConsoleOutput::CallBack()"></a>11. SynchConsoleOutput::CallBack()</h4><blockquote><p>userprog/synchconsole.cc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void SynchConsoleOutput::CallBack()</span><br><span class="line">&#123;</span><br><span class="line">    waitFor-&gt;V();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>V() 釋放一個 semaphore 資源，並且 pop 出下一個在 semaphore.queue 的 thread 放進 readyList，等到 scheduler 安排此 thread 可以使用 CPU 時，才能輸出下一個字元。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* threads/synch.cc */</span><br><span class="line"></span><br><span class="line">void Semaphore::V()</span><br><span class="line">&#123;    </span><br><span class="line">    if (!queue-&gt;IsEmpty()) &#123; </span><br><span class="line">kernel-&gt;scheduler-&gt;ReadyToRun(queue-&gt;RemoveFront());</span><br><span class="line">    &#125;</span><br><span class="line">    value++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Implement-four-I-O-system-calls-in-NachOS"><a href="#Implement-four-I-O-system-calls-in-NachOS" class="headerlink" title="Implement four I/O system calls in NachOS"></a>Implement four I/O system calls in NachOS</h3><ul><li>OpenFileId Open(char *name);</li><li>int Write(char *buffer, int size, OpenFileId id);</li><li>int Read(char *buffer, int size, OpenFileId id);</li><li>int Close(OpenFileId id);</li></ul><p>Open / Close / Read / Write 四者非常像，因此我以 Write 為例子進行實做解說 ，唯有比較需要說明的部份會將 Open / Close / Read 一起說明。</p><h4 id="int-Write-char-buffer-int-size-OpenFileId-id"><a href="#int-Write-char-buffer-int-size-OpenFileId-id" class="headerlink" title="int Write(char *buffer, int size, OpenFileId id);"></a>int Write(char *buffer, int size, OpenFileId id);</h4><blockquote><p>userprog/syscall.h</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define SC_Write 8</span><br><span class="line"></span><br><span class="line">int Write(char *buffer, int size, OpenFileId id);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* test/start.s */</span><br><span class="line"></span><br><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line"></span><br><span class="line">.globl Write</span><br><span class="line">.entWrite</span><br><span class="line">Write:</span><br><span class="line">addiu $2,$0,SC_Write</span><br><span class="line">syscall</span><br><span class="line">j$31</span><br><span class="line">.end Write</span><br></pre></td></tr></table></figure><h4 id="1-Void-Machine-OneInstruction-Instruction-instr"><a href="#1-Void-Machine-OneInstruction-Instruction-instr" class="headerlink" title="1. Void Machine::OneInstruction(Instruction *instr)"></a>1. Void Machine::OneInstruction(Instruction *instr)</h4><blockquote><p>machine/mipssim</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;machine.h&quot;</span><br><span class="line">#include &quot;mipssim.h&quot;</span><br><span class="line"></span><br><span class="line">Void Machine::OneInstruction(Instruction *instr)</span><br><span class="line">&#123;</span><br><span class="line">    switch (instr-&gt;opCode) &#123;</span><br><span class="line">    case OP_SYSCALL:</span><br><span class="line">        RaiseException(SyscallException, 0);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2. RaiseException(ExceptionType which, int badVAddr) </span><br><span class="line">machine/machine.cc</span><br><span class="line"></span><br><span class="line">#include &quot;machine.h&quot;</span><br><span class="line"></span><br><span class="line">Void Machine::RaiseException(ExceptionType which, int badVAddr)</span><br><span class="line">&#123;</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-ExceptionHandler-ExceptionType-which-2"><a href="#3-ExceptionHandler-ExceptionType-which-2" class="headerlink" title="3. ExceptionHandler(ExceptionType which)"></a>3. ExceptionHandler(ExceptionType which)</h4><blockquote><p>userprog/exception.cc</p></blockquote><p>依照我們傳入參數的順序 (char *buffer, int size, OpenFileId id) 依序從 register $a0 $a1 $a2，即從 register(4) register(5) register(6) 讀出呼叫 system call Write 時所傳入的參數。SysWrite 會回傳寫入是否成功。依照 MIPS 慣例，函式回傳值應放在 register $v0，即 register(4)。完成 SysWrite 之後要修改 PCReg 讓 PCReg 指向下一個指令，如果沒有加上這一行的話，程式會不停的執行當前指令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line">#include &quot;ksyscall.h&quot;</span><br><span class="line"></span><br><span class="line">void ExceptionHandler(ExceptionType which)</span><br><span class="line">&#123;</span><br><span class="line">   int type = kernel-&gt;machine-&gt;ReadRegister(2);</span><br><span class="line"></span><br><span class="line">case SC_Write:</span><br><span class="line">    val = kernel-&gt;machine-&gt;ReadRegister(4);</span><br><span class="line">    char *buffer = &amp;(kernel-&gt;machine-&gt;mainMemory[val]);</span><br><span class="line">    size = kernel-&gt;machine-&gt;ReadRegister(5); </span><br><span class="line">    id = kernel-&gt;machine-&gt;ReadRegister(6); </span><br><span class="line">    status = SysWrite(buffer, size, id);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(2, (int) status);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PrevPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg));</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg) + 4);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(NextPCReg, </span><br><span class="line">          kernel-&gt;machine-&gt;ReadRegister(PCReg)+4);</span><br><span class="line"></span><br><span class="line">    return;</span><br><span class="line">    ASSERTNOTREACHED();</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-int-SysWrite-char-buffer-int-size-int-id"><a href="#4-int-SysWrite-char-buffer-int-size-int-id" class="headerlink" title="4. int SysWrite(char *buffer, int size, int id)"></a>4. int SysWrite(char *buffer, int size, int id)</h4><blockquote><p>userprog/ksyscall.h</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int SysWrite(char *buffer, int size, int id)</span><br><span class="line">&#123;</span><br><span class="line">return kernel-&gt;WriteFile(buffer, size, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-int-Kernel-WriteFile-char-buffer-int-size-int-id"><a href="#5-int-Kernel-WriteFile-char-buffer-int-size-int-id" class="headerlink" title="5. int Kernel::WriteFile(char *buffer, int size, int id)"></a>5. int Kernel::WriteFile(char *buffer, int size, int id)</h4><blockquote><p>machine/interrupt.cc</p></blockquote><p>class FileSystem 是 NachOS 的 file system API。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int Kernel::WriteFile(char *buffer, int size, int id)</span><br><span class="line">&#123;</span><br><span class="line">return fileSystem-&gt;WriteF(buffer, size, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-int-Filesystem-WriteField-char-name"><a href="#6-int-Filesystem-WriteField-char-name" class="headerlink" title="6. int Filesystem::WriteField(char *name)"></a>6. int Filesystem::WriteField(char *name)</h4><blockquote><p>filesys/filesys.cc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#ifdef FILESYS_STUB </span><br><span class="line"></span><br><span class="line">class FileSystem &#123;</span><br><span class="line">    int WriteF(char *buffer, int size, int id)</span><br><span class="line">    &#123;</span><br><span class="line">        int status = WriteFile(id, buffer, size);</span><br><span class="line">        return status; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-int-WriteFile-int-fd-char-buffer-int-nBytes"><a href="#7-1-int-WriteFile-int-fd-char-buffer-int-nBytes" class="headerlink" title="7_1.  int WriteFile(int fd, char *buffer, int nBytes)"></a>7_1.  int WriteFile(int fd, char *buffer, int nBytes)</h4><blockquote><p>lib/sysdep.cc</p></blockquote><p>class FileSystem 是 NachOS 的檔案系統 API，由於目前的檔案系統是依賴 linux 的檔案系統，system call Write 的實做是呼叫 linux 提供的 write()，write() 失敗回傳 -1，成功回傳成功寫入的字元數。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/file.h&gt;</span><br><span class="line"></span><br><span class="line">int WriteFile(int fd, char *buffer, int nBytes)</span><br><span class="line">&#123;</span><br><span class="line">    int retVal = write(fd, buffer, nBytes);</span><br><span class="line">    ASSERT(retVal == nBytes);</span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-int-OpenForReadWrite-char-name-bool-crashOnError"><a href="#7-2-int-OpenForReadWrite-char-name-bool-crashOnError" class="headerlink" title="7_2. int OpenForReadWrite(char *name, bool crashOnError)"></a>7_2. int OpenForReadWrite(char *name, bool crashOnError)</h4><blockquote><p>lib/sysdep.cc</p></blockquote><p>system call Open 的實做是呼叫 linux 提供的 open()，open() 失敗回傳 -1，成功回傳 file description。需要注意的是，如果使用 fopen() 開啟檔案，他回傳的是 FILE*，是一個指標，而 open() 回傳的是一個整數。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/file.h&gt;</span><br><span class="line"></span><br><span class="line">int OpenForReadWrite(char *name, bool crashOnError)</span><br><span class="line">&#123;</span><br><span class="line">    int fd = open(name, O_RDWR, 0);</span><br><span class="line">    ASSERT(!crashOnError || fd &gt;= 0);</span><br><span class="line">    return fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-int-Read-int-fd-char-buffer-int-nBytes"><a href="#7-3-int-Read-int-fd-char-buffer-int-nBytes" class="headerlink" title="7_3. int Read(int fd, char *buffer, int nBytes)"></a>7_3. int Read(int fd, char *buffer, int nBytes)</h4><blockquote><p>lib/sysdep.cc</p></blockquote><p>system call Read 的實做是呼叫 linux 提供的 read()，read() 失敗回傳 -1，成功回傳成功讀出的字元數。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/file.h&gt;</span><br><span class="line"></span><br><span class="line">int Read(int fd, char *buffer, int nBytes)</span><br><span class="line">&#123;</span><br><span class="line">    int retVal = read(fd, buffer, nBytes);</span><br><span class="line">    ASSERT(retVal == nBytes);</span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-int-Close-int-fd"><a href="#7-4-int-Close-int-fd" class="headerlink" title="7_4. int Close(int fd)"></a>7_4. int Close(int fd)</h4><blockquote><p>lib/sysdep.cc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">system call Close 的實做是呼叫 linux 提供的 read()，read() 失敗回傳 -1，成功回傳 0。</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/file.h&gt;</span><br><span class="line"></span><br><span class="line">int Close(int fd)</span><br><span class="line">&#123;</span><br><span class="line">    int retVal = close(fd);</span><br><span class="line">    ASSERT(retVal &gt;= 0); </span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><h4 id="Compile-Rebuild-NachOS"><a href="#Compile-Rebuild-NachOS" class="headerlink" title="Compile / Rebuild NachOS"></a>Compile / Rebuild NachOS</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd NachOS-4.0_MP1/code/build.linux</span><br><span class="line">&gt; make clean</span><br><span class="line">&gt; make depend</span><br><span class="line">&gt; make</span><br></pre></td></tr></table></figure><h4 id="Test-NachOS"><a href="#Test-NachOS" class="headerlink" title="Test NachOS"></a>Test NachOS</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd NachOS-4.0_MP1/code/test</span><br><span class="line">&gt; make clean</span><br><span class="line">&gt; make halt</span><br><span class="line">&gt; ../build.linux/nachos -e halt</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1] shawn2000100/10810CS_342301_OperatingSystem<br><a href="https://github.com/shawn2000100/10810CS_342301_OperatingSystem">https://github.com/shawn2000100/10810CS_342301_OperatingSystem</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NachOS-hw01&quot;&gt;&lt;a href=&quot;#NachOS-hw01&quot; class=&quot;headerlink&quot; title=&quot;NachOS hw01&quot;&gt;&lt;/a&gt;NachOS hw01&lt;/h1&gt;&lt;h2 id=&quot;Trace-code&quot;&gt;&lt;a href=&quot;#Trace-c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>學期結束了</title>
    <link href="https://wendyusinggithub.github.io/2021/07/09/%E5%AD%B8%E6%9C%9F%E7%B5%90%E6%9D%9F%E4%BA%86/"/>
    <id>https://wendyusinggithub.github.io/2021/07/09/%E5%AD%B8%E6%9C%9F%E7%B5%90%E6%9D%9F%E4%BA%86/</id>
    <published>2021-07-09T04:00:55.000Z</published>
    <updated>2021-07-09T04:01:08.355Z</updated>
    
    <content type="html"><![CDATA[<p>大概六個小時之前完成了這學期的最後一場考試，雖然明天還有一份報告和一份補交的作業，但我的心已經在放暑假了，作業什麼的就算了吧。畢竟是工作過的人，對於暑假，因為曾經失去過所以更加珍貴。學期間就有慢慢在想暑假要做什麼，程式方面的進度都會在這裡更新的。但是夏天，除了寫程式，還是得要出去玩的吧，誰知道疫情突然變得嚴重，到底暑假結束前能不能去沙灘呢，實在好想去沙灘呀。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大概六個小時之前完成了這學期的最後一場考試，雖然明天還有一份報告和一份補交的作業，但我的心已經在放暑假了，作業什麼的就算了吧。畢竟是工作過的人，對於暑假，因為曾經失去過所以更加珍貴。學期間就有慢慢在想暑假要做什麼，程式方面的進度都會在這裡更新的。但是夏天，除了寫程式，還是得</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>跨系推甄北科資工所</title>
    <link href="https://wendyusinggithub.github.io/2021/07/09/%E8%B7%A8%E7%B3%BB%E6%8E%A8%E7%94%84%E5%8C%97%E7%A7%91%E8%B3%87%E5%B7%A5%E6%89%80/"/>
    <id>https://wendyusinggithub.github.io/2021/07/09/%E8%B7%A8%E7%B3%BB%E6%8E%A8%E7%94%84%E5%8C%97%E7%A7%91%E8%B3%87%E5%B7%A5%E6%89%80/</id>
    <published>2021-07-09T03:51:50.000Z</published>
    <updated>2021-07-09T03:52:36.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推甄資工所"><a href="#推甄資工所" class="headerlink" title="推甄資工所"></a>推甄資工所</h2><p>碩二上原本是應該加快論文進度的時期，但我因一些不可抗力因素休學了一個學期，不過我從暑假就開始準備推甄。通常跨系推甄的人就算沒有輔系也會先去修一些主要課程，例如資料結構演算法等等，但我完全沒有修過任何資工系大學部課程，機械系畢業時系排只有 70％，想要推清交顯然沒有機會，因為有回台北的急迫需要，只申請了中央和台科和北科的資工所，中央和台科沒有過書審，北科正取。</p><h2 id="北科資工面試"><a href="#北科資工面試" class="headerlink" title="北科資工面試"></a>北科資工面試</h2><p>北科資工分成甲組和乙組，乙組名額比較少，是開給非本科學生的組別。面試分成三關，各一位教授。第一關是自我介紹，第二關是英文，一張英文的授課大綱讓你翻譯，第三關一進去教授問我，知不知道物件導向的三大特性是什麼，我想了一下說不知道，接著他就問我有沒有資工相關的工作經驗或專題，我有把我碩一的研究成果整理成一份小專題放在備審資料裡，所以我就簡單介紹我的專題內容。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>跨系申請不容易，如果對什麼系有興趣，就去修一些他們的必修課，推甄本來就是長期的累積。大學的時候不一定要很認真讀書，但至少要好好找興趣，覺得自己開始的有點晚。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;推甄資工所&quot;&gt;&lt;a href=&quot;#推甄資工所&quot; class=&quot;headerlink&quot; title=&quot;推甄資工所&quot;&gt;&lt;/a&gt;推甄資工所&lt;/h2&gt;&lt;p&gt;碩二上原本是應該加快論文進度的時期，但我因一些不可抗力因素休學了一個學期，不過我從暑假就開始準備推甄。通常跨系推甄的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>清大資工修課紀錄</title>
    <link href="https://wendyusinggithub.github.io/2021/07/09/%E6%B8%85%E5%A4%A7%E8%B3%87%E5%B7%A5%E4%BF%AE%E8%AA%B2%E7%B4%80%E9%8C%84/"/>
    <id>https://wendyusinggithub.github.io/2021/07/09/%E6%B8%85%E5%A4%A7%E8%B3%87%E5%B7%A5%E4%BF%AE%E8%AA%B2%E7%B4%80%E9%8C%84/</id>
    <published>2021-07-09T03:45:32.000Z</published>
    <updated>2021-07-09T03:47:59.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一次修資工系的課"><a href="#第一次修資工系的課" class="headerlink" title="第一次修資工系的課"></a>第一次修資工系的課</h2><p>雖然是機械所，但想往資工走，所以也修了一些資工系的課。為了湊足畢業學分，雖然知道自己的能力也就只有資工系大一而已，還是得要修研究所的課，修得很辛苦，每天都在寫作業，但學期結束的時候有種，我好像真的會寫程式了的感覺 (但也不排除是錯覺)。</p><h2 id="上學期"><a href="#上學期" class="headerlink" title="上學期"></a>上學期</h2><p>平行程式 - 周致遠：老師很認真，助教也很認真，四次作業，是MPI / Pthread / OpenMP / CUDA 的實做，每次作業之前會先有一個 lab 課，學期末要做一個專題，每次作業我都要寫兩個星期以上，全班要競賽，以效能在班上的百分比做評分，大神很多，我總是在墊底，給分甜度我無法評價，因為這門課開學的時候有大約五十個人，學期末只剩大約三十五個，這是一門修了也不一定過的課，但能學到很多。</p><h2 id="下學期"><a href="#下學期" class="headerlink" title="下學期"></a>下學期</h2><p>雲端計算 - 李哲榮：老師很認真，簡介一些雲端運算上的技術，第一次作業是使用 QEMU 裝 Ubuntu 虛擬機，剩下兩次作業都是在分散架構上訓練機器學習網路，作業不難，期末要論文報告，期末考可以選擇實做或紙筆 (但老師有說因為這學期修的人太多電腦資源所以才開放紙筆考試)，紙筆考試簡單，給分很甜。</p><p>人工智慧與藝術導論 - 吳中浩：雖然是資工系的課但內容大多是在教藝術相關，我發現事情怪怪的時候已經來不急了，老師開課是希望藝術系的人也來修課，所以實做相關非常少，三份作業都是藝術相關的報告，學期末要做一個專題，給分很甜。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>清大資工好課不少，想修的人也很多，對於非本科學生，要搶到課也不容易，挺羨慕資工系的大學部學生可以有四年好好修課些課。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一次修資工系的課&quot;&gt;&lt;a href=&quot;#第一次修資工系的課&quot; class=&quot;headerlink&quot; title=&quot;第一次修資工系的課&quot;&gt;&lt;/a&gt;第一次修資工系的課&lt;/h2&gt;&lt;p&gt;雖然是機械所，但想往資工走，所以也修了一些資工系的課。為了湊足畢業學分，雖然知道自己</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工作兩年辭職準備研究所</title>
    <link href="https://wendyusinggithub.github.io/2021/07/09/%E5%B7%A5%E4%BD%9C%E5%85%A9%E5%B9%B4%E8%BE%AD%E8%81%B7%E6%BA%96%E5%82%99%E7%A0%94%E7%A9%B6%E6%89%80/"/>
    <id>https://wendyusinggithub.github.io/2021/07/09/%E5%B7%A5%E4%BD%9C%E5%85%A9%E5%B9%B4%E8%BE%AD%E8%81%B7%E6%BA%96%E5%82%99%E7%A0%94%E7%A9%B6%E6%89%80/</id>
    <published>2021-07-09T03:39:11.000Z</published>
    <updated>2021-07-09T03:42:34.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="辭職準備研究所"><a href="#辭職準備研究所" class="headerlink" title="辭職準備研究所"></a>辭職準備研究所</h2><p>我從某四大機械系畢業後就去工作了，因為我的系排只有 70% 左右，也不想要準備考試，當時我對念書這件事情已經非常厭倦，我對機械系也不是真的非常有熱忱，所以就想，那就出去工作吧，至少可以看看自己到底能不能獨立生活，當時也想好再過一兩年如果改變心意想念研究所那就去吧。</p><h2 id="推甄和考試"><a href="#推甄和考試" class="headerlink" title="推甄和考試"></a>推甄和考試</h2><p>我從 2018 年的三月開始慢慢的讀起書來， 但因為是邊上班邊念書，一天大約只能唸到兩個小時左右的書，中間還經歷約末一個月常常加班的日子， 因此進度完全暫停，直到六月時決定提出辭呈，七月正式離職，之後就在補習班上了一暑假的課，約莫九月的時候開始準備推甄，推甄資料包含自傳推薦信都要花一定的時間準備，錄取之後找教授的時間也需要一個星期左右，我一直很擔心如果沒有推上任何一所學校，那準備的時間就浪費掉了，但因我覺得我在推甄上有一定優勢 (工作經驗)，所以不想放棄這個管道，最後我在十二月備上成大，一月備上交大，然後參加二月的研究所考試，清大的考試入學其實也是推甄的方式 (只是要考一科英文)，台大是普通考試方式，最後這兩間都正取了。我最後決定要在清大讀碩士，因為我對清大的實驗室比較感興趣。</p><h2 id="工作兩年再念研究所有什麼好處"><a href="#工作兩年再念研究所有什麼好處" class="headerlink" title="工作兩年再念研究所有什麼好處"></a>工作兩年再念研究所有什麼好處</h2><p>我覺得現在的我比大四的時候更知道自己想要什麼，我跟的實驗室有很大部分需要寫程式，所以我找了好幾個資工背景的朋友諮詢我要如何在最短時間內把我的程式能力拉起來，而我也希望可以試試看能不能趁此機會培養程式能力之後能朝資工領域發展。</p><p>因為工作過的關係，實驗室可以培養我什麼能力是我選實驗室的第一準則，因為我知道我的能力會影響我的下一份工作，學歷會影響一個人的第一份工作，第一份工作的內容會影響第二份工作，一個實驗室或一份工作，對現在的我來說最重要的是它能讓我變成更有能力的人，帶給我更好的機會，帶我去更好的地方。</p><h2 id="工作兩年再念研究所有什麼壞處"><a href="#工作兩年再念研究所有什麼壞處" class="headerlink" title="工作兩年再念研究所有什麼壞處"></a>工作兩年再念研究所有什麼壞處</h2><p>我說了這麼多先工作再念書的好處，但不在大四應屆考取研究所還是有一定的風險，就是不知道到底回不回的去學校，好幾年沒有認真念書了，推甄不確定推得上，考試又怕自己太久沒唸書不知道還行不行，這半年真的是過的非常焦慮，辭掉工作之後就不會每個月有錢進帳，存款只會一直減少，擔心半年後沒有考上回去找工作會找不到好公司，尤其我在補習班時發現似乎有些學生是準備一年到一年半去考試，而我只有半年還要同時準備推甄，一直都很擔心時間不夠。大約在成大備上後我陷入一段很糟的時間，因為我沒有在成大找到理想的老師，交大在可能會備上的邊緣，清大的考入入學不考試只做推甄可是我在清大推甄時已經落榜過一次，再來一次難道就會上嗎 (結果再來一次真的就上了)，從備上成大到備上交大中間的這段時間我真的一直很焦慮，直到我在交大找到了我覺得很不錯的教授，我才比較恢復平常心繼續準備台大的考試。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我可以收到四間大學的錄取單很大一部分還是要歸功我以前的努力，於推甄而言大學校名當然是重要的，工作兩年我覺得我的積極度和對於人生規劃的想法都多了很多，我覺得先工作一定是有很大的好處，也或許你工作之後才發現這份工作你根本一點也不喜歡，那也很好，可以在還年輕時就想方法轉換工作領域 (當然念研究所也是一種很好的轉換工作領域的方法)，(和科系相關的) 工作經歷對推甄來說是一個大大的加分項，但不論什麼方法，辭職是一件不可逆的事情，多少有一點賭自己上榜的意味在，除了辭職之外，半年的空白期我最害怕的事情，所以我在辭職之前已經在下班後念書，把自己對念書這件事情的熟悉感找回來，當我正式提出辭職時我的上司還問我要不要再考慮一下不要衝動辭職，但那時候其實我已經做好決定很久了，所以非常堅定的辭職了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;辭職準備研究所&quot;&gt;&lt;a href=&quot;#辭職準備研究所&quot; class=&quot;headerlink&quot; title=&quot;辭職準備研究所&quot;&gt;&lt;/a&gt;辭職準備研究所&lt;/h2&gt;&lt;p&gt;我從某四大機械系畢業後就去工作了，因為我的系排只有 70% 左右，也不想要準備考試，當時我對念書這件</summary>
      
    
    
    
    
  </entry>
  
</feed>
