<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wendy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-09T18:37:31.251Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Wendy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Parallel TSP using pthread and fork</title>
    <link href="http://example.com/2021/08/10/Parallel-TSP-using-pthread-and-fork/"/>
    <id>http://example.com/2021/08/10/Parallel-TSP-using-pthread-and-fork/</id>
    <published>2021-08-09T16:54:06.000Z</published>
    <updated>2021-08-09T18:37:31.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="TSP"><a href="#TSP" class="headerlink" title="TSP"></a>TSP</h3><p>&#x65C5;&#x884C;&#x5546;&#x554F;&#x984C;&#x662F;&#x9019;&#x6A23;&#x4E00;&#x500B;&#x554F;&#x984C; : &#x7D66;&#x5B9A;&#x4E00;&#x7CFB;&#x5217;&#x57CE;&#x5E02;&#x548C;&#x6BCF;&#x5C0D;&#x57CE;&#x5E02;&#x4E4B;&#x9593;&#x7684;&#x8DDD;&#x96E2;&#xFF0C;&#x6C42;&#x89E3;&#x9020;&#x8A2A;&#x6BCF;&#x4E00;&#x5EA7;&#x57CE;&#x5E02;&#x4E00;&#x6B21;&#x4E26;&#x56DE;&#x5230;&#x8D77;&#x59CB;&#x57CE;&#x5E02;&#x7684;&#x6700;&#x77ED;&#x8FF4;&#x8DEF;&#x3002;</p><h3 id="2-opt"><a href="#2-opt" class="headerlink" title="2-opt"></a>2-opt</h3><p>&#x5982;&#x679C;&#x6211;&#x5011;&#x7D66;&#x6BCF;&#x500B;&#x57CE;&#x5E02;&#x4E00;&#x500B;&#x7DE8;&#x865F;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E00;&#x500B; string &#x4F86;&#x8868;&#x793A;&#x4E00;&#x500B;&#x8DEF;&#x5F91;&#x3002;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10] </span><br></pre></td></tr></table></figure><p>&#x7576;&#x6211;&#x5011;&#x8981;&#x505A;&#x6700;&#x4F73;&#x5316;&#x6642;&#xFF0C;&#x6211;&#x5011;&#x8981;&#x5B9A;&#x7FA9;&#x4E00;&#x500B;&#x89E3;&#x7684;&#x9130;&#x5C45;&#x3002;&#x6211;&#x4F7F;&#x7528; 2-opt &#x53BB;&#x5C0B;&#x627E;&#x4E00;&#x500B;&#x89E3;&#x7684;&#x9130;&#x5C45;&#x3002;&#x5C0D;&#x65BC;&#x4E00;&#x689D;&#x8DEF;&#x5F91;&#xFF0C;&#x4EFB;&#x9078;&#x5169;&#x500B;&#x57CE;&#x5E02;&#xFF0C;&#x5C07;&#x4ED6;&#x5011;&#x4E4B;&#x9593;&#x7684;&#x8DEF;&#x5F91;&#x505A;&#x7FFB;&#x8F49;&#x3002;&#x5728;&#x5716;&#x5F62;&#x4E0A;&#xFF0C;&#x505A;&#x9019;&#x6A23;&#x7684;&#x7FFB;&#x8F49;&#x6070;&#x597D;&#x53EF;&#x4EE5;&#x628A;&#x4E00;&#x500B;&#x4EA4;&#x53C9;&#x7684;&#x8DEF;&#x5F91;&#x6253;&#x958B;&#x3002;</p><p>&#x4F7F;&#x7528; 2-opt &#x5728;&#x8A08;&#x7B97;&#x4E0A;&#x4E5F;&#x5F88;&#x65B9;&#x4FBF;&#xFF0C;&#x96D6;&#x7136;&#x8DEF;&#x5F91;&#x6539;&#x52D5;&#x5F88;&#x591A;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x5BE6;&#x53EA;&#x662F;&#x79FB;&#x9664;&#x5169;&#x500B; edge&#xFF0C;&#x518D;&#x52A0;&#x4E0A;&#x5169;&#x500B; edge&#x3002;&#x4EE5;&#x7FFB;&#x8F49;&#x57CE;&#x5E02; 3 &#x548C;&#x57CE;&#x5E02; 7 &#x4E4B;&#x9593;&#x7684;&#x8DEF;&#x5F91;&#x70BA;&#x4F8B;&#xFF0C;&#x5C31;&#x662F;&#x79FB;&#x9664; edge 23 &#x548C; edge 78&#xFF0C;&#x52A0;&#x4E0A; edge 27 &#x548C; edge 38&#xFF0C;&#x56E0;&#x70BA;&#x53EA;&#x6709;&#x6539;&#x52D5;&#x5230; 4 &#x500B; edge&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x8A08;&#x7B97;&#x8DEF;&#x5F91;&#x9577;&#x5EA6;&#x7684;&#x6642;&#x5019;&#x5F88;&#x5FEB;&#xFF0C;&#x53EA;&#x8981;&#x628A;&#x79FB;&#x9664;&#x7684; edge &#x9577;&#x5EA6;&#x6E1B;&#x6389;&#xFF0C;&#x628A;&#x52A0;&#x4E0A;&#x7684; edge &#x9577;&#x5EA6;&#x52A0;&#x4E0A;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x6574;&#x689D;&#x8DEF;&#x5F91;&#x91CD;&#x65B0;&#x8A08;&#x7B97;&#x3002;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1 , 2 , 7 , 6 , 5 , 4 , 3 , 8 , 9 , 10] </span><br></pre></td></tr></table></figure><h3 id="2-opt-parallel"><a href="#2-opt-parallel" class="headerlink" title="2-opt parallel"></a>2-opt parallel</h3><p>&#x6211;&#x4F7F;&#x7528;&#x8CAA;&#x5A6A;&#x6F14;&#x7B97;&#x6CD5;&#xFF0C;&#x6211;&#x6703;&#x628A;&#x4E00;&#x500B;&#x89E3;&#x7684;&#x6240;&#x6709;&#x9130;&#x5C45;&#x90FD;&#x627E;&#x51FA;&#x4F86;&#xFF0C;&#x4E26;&#x4E14;&#x9078;&#x64C7;&#x9577;&#x5EA6;&#x6700;&#x77ED;&#x8DEF;&#x5F91;&#x70BA;&#x65B0;&#x7684;&#x89E3;&#xFF0C;&#x56E0;&#x70BA;&#x627E;&#x9130;&#x5C45;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x9078;&#x5169;&#x500B;&#x57CE;&#x5E02;&#x4E26;&#x4E14;&#x7FFB;&#x8F49;&#xFF0C;&#x6240;&#x4EE5;&#x5C0D;&#x65BC;&#x4E00;&#x689D;&#x8DEF;&#x5F91;&#x800C;&#x8A00;&#xFF0C;&#x6709; n * ( n - 1 ) / 2 &#x7A2E;&#x9130;&#x5C45;&#x8DEF;&#x5F91;&#xFF0C;&#x4EE5;&#x4E00;&#x500B; 5 &#x500B;&#x57CE;&#x5E02;&#x7684; tsp &#x554F;&#x984C;&#x8209;&#x4F8B;&#xFF0C;&#x4E0B;&#x5716;&#x662F;&#x4ED6;&#x7684;&#x6240;&#x6709;&#x9130;&#x5C45;&#x3002;&#x6240;&#x6709;&#x9130;&#x5C45;&#x7684;&#x8DEF;&#x5F91;&#x9577;&#x5EA6;&#x662F;&#x53EF;&#x4EE5;&#x55AE;&#x7368;&#x8A08;&#x7B97;&#x7684;&#xFF0C;&#x56E0;&#x70BA;&#x6C92;&#x6709;&#x8A08;&#x7B97;&#x4E0A;&#x7684;&#x76F8;&#x4F9D;&#x6027;&#xFF0C;&#x6240;&#x4EE5;&#x5F88;&#x9069;&#x5408;&#x505A;&#x5E73;&#x884C;&#x3002;</p><table><thead><tr><th>thread 0</th><th>thread 1</th><th>thread 0</th><th>thread 1</th></tr></thead><tbody><tr><td>(0 , 1)</td><td></td><td></td><td></td></tr><tr><td>(0 , 2)</td><td>(1 , 2)</td><td></td><td></td></tr><tr><td>(0 , 3)</td><td>(1 , 3)</td><td>(2 , 3)</td><td></td></tr><tr><td>(0 , 4)</td><td>(1 , 4)</td><td>(2 , 4)</td><td>(3 , 4)</td></tr></tbody></table><p>&#x5728;&#x8A2D;&#x8A08;&#x5E73;&#x884C;&#x7A0B;&#x5F0F;&#x7684;&#x6642;&#x5019;&#x6211;&#x5011;&#x9700;&#x8981;&#x5206;&#x914D;&#x6BCF;&#x500B; thread / child process &#x8981;&#x505A;&#x4EC0;&#x9EBC;&#xFF0C;&#x56E0;&#x70BA;&#x5728;&#x6240;&#x6709;thread / child process &#x90FD;&#x5B8C;&#x6210;&#x81EA;&#x5DF1;&#x7684;&#x5DE5;&#x4F5C;&#x4E4B;&#x5F8C;&#xFF0C;&#x624D;&#x80FD;&#x958B;&#x59CB;&#x9032;&#x884C;&#x4E0B;&#x4E00;&#x8F2A;&#x7684;&#x8A08;&#x7B97;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5E73;&#x5747;&#x7684;&#x5206;&#x914D;&#x5DE5;&#x4F5C;&#x91CF;&#x3002;&#x4EE5; 2 &#x500B; thread / child process &#x70BA;&#x4F8B;&#xFF0C;&#x6211;&#x4F7F;&#x7528;&#x4E0A;&#x5716;&#x7684;&#x65B9;&#x6CD5;&#x5206;&#x914D;&#x5DE5;&#x4F5C;&#xFF0C;(x,y) &#x6307;&#x7684;&#x662F;&#x7FFB;&#x8F49;&#x57CE;&#x5E02; x &#x5230;&#x57CE;&#x5E02; y &#x7684;&#x8DEF;&#x5F91;&#xFF0C;&#x7FFB;&#x8F49;&#x6642;&#x9078;&#x64C7;&#x7684;&#x7B2C;&#x4E00;&#x500B;&#x57CE;&#x5E02;&#x662F; city 0 &#x7684;&#x5C31;&#x8B93; thread 0 / child process 0 &#x8CA0;&#x8CAC;&#xFF0C;&#x6240;&#x6709;&#x7FFB;&#x8F49;&#x6642;&#x9078;&#x64C7;&#x7684;&#x7B2C;&#x4E00;&#x500B;&#x57CE;&#x5E02;&#x662F; city 1 &#x7684;&#x5C31;&#x8B93; thread 1 / child process 1 &#x8CA0;&#x8CAC;&#xFF0C;&#x4EE5;&#x6B64;&#x985E;&#x63A8;&#xFF0C;&#x4EE5;&#x6B64;&#x8868;&#x683C;&#x8209;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x6B04;&#x548C;&#x7B2C;&#x4E09;&#x6B04;&#x90E8;&#x4EFD;&#x7531; thread 0 / child process 0 &#x8CA0;&#x8CAC;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B04;&#x548C;&#x7B2C;&#x56DB;&#x6B04;&#x7531; thread 1 / child process 1 &#x8CA0;&#x8CAC;&#x3002;</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">initialize the route</span><br><span class="line"></span><br><span class="line">while termination condition not meet </span><br><span class="line">    2-opt()</span><br><span class="line">    evaluate neighbor routes</span><br><span class="line">    select the best neighbor route as new route</span><br><span class="line">end while </span><br></pre></td></tr></table></figure><p>&#x6211;&#x521D;&#x59CB;&#x5316;&#x8DEF;&#x5F91;&#x8B93;&#x70BA;&#x57CE;&#x5E02; &#x201C;1 2 3 4 . . . &#x201C;&#xFF0C;&#x4E2D;&#x6B62;&#x689D;&#x4EF6;&#x662F;&#x7576;&#x65B0;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F91;&#x548C;&#x820A;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F91;&#xFF0C;&#x53EA;&#x5DEE;&#x8DDD;&#x4E0D;&#x5230; 0.1 &#x7684;&#x6642;&#x5019;&#x5373;&#x4E2D;&#x6B62;&#x3002;</p><p>&#x5728; while &#x8FF4;&#x5708;&#x88E1;&#xFF0C;&#x5148;&#x9032;&#x884C; 2-opt&#xFF0C;&#x5B8C;&#x6210; 2-opt &#x4E4B;&#x5F8C;&#xFF0C;&#x6BCF;&#x500B; thread / child process &#x6703;&#x56DE;&#x50B3;&#x81EA;&#x5DF1;&#x8CA0;&#x8CAC;&#x7684;&#x5DE5;&#x4F5C;&#x5340;&#x57DF;&#x88E1;&#x9762;&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F91;&#xFF0C;&#x5927;&#x5BB6;&#x90FD;&#x5DE5;&#x4F5C;&#x5B8C;&#x6210;&#x4E4B;&#x5F8C;&#xFF0C;&#x6BD4;&#x8F03;&#x6240;&#x6709;&#x4EBA;&#x6240;&#x5F97;&#x5230;&#x7684;&#x8DEF;&#x5F91;&#xFF0C;&#x9078;&#x51FA;&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F91;&#xFF0C;&#x5C31;&#x662F;&#x9019;&#x500B; iteration &#x7684;&#x7D50;&#x679C;&#xFF0C;&#x9019;&#x500B;&#x8DEF;&#x5F91;&#x5C31;&#x662F;&#x65B0;&#x7684;&#x8DEF;&#x5F91;&#xFF0C;&#x5927;&#x5BB6;&#x518D;&#x4EE5;&#x9019;&#x500B;&#x8DEF;&#x5F91;&#x9032;&#x884C;&#x4E0B;&#x4E00;&#x8F2A;&#x7684;&#x8A08;&#x7B97;&#x3002;</p><p>&#x6211;&#x5BE6;&#x505A;&#x4E86; sequential / pthread / fork &#x4E09;&#x500B;&#x7248;&#x672C;&#xFF0C;&#x7531;&#x65BC; pthread library &#x5DF2;&#x7D93;&#x5F88;&#x5B8C;&#x5584;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x6703;&#x7565;&#x904E; pthread&#xFF0C;&#x53EA;&#x4ECB;&#x7D39;&#x6211;&#x5728; fork &#x7248;&#x672C;&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#x540C;&#x6B65;&#x6A5F;&#x5236;&#x3002;</p><h2 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h2><p>&#x4F7F;&#x7528; fork &#x53EF;&#x4EE5;&#x7528; pipe &#x6216;&#x662F; shared memory &#x9032;&#x884C;&#x540C;&#x6B65;&#xFF0C;&#x6211;&#x9078;&#x64C7;&#x7528; shared memory&#xFF0C;&#x56E0;&#x70BA;&#x6BCF;&#x500B; child process &#x9700;&#x8981;&#x7684;&#x8CC7;&#x8A0A;&#x4E0D;&#x5C11;&#xFF0C;&#x4F8B;&#x5982;&#x5169;&#x5169;&#x57CE;&#x5E02;&#x7684;&#x8DDD;&#x96E2;&#x77E9;&#x9663;&#xFF0C;&#x5982;&#x679C;&#x57CE;&#x5E02;&#x6578;&#x91CF;&#x5F88;&#x591A;&#x7684;&#x8A71;&#xFF0C;&#x9019;&#x500B;&#x77E9;&#x9663;&#x6703;&#x975E;&#x5E38;&#x5927;&#xFF0C;&#x7528; pipe &#x7684;&#x65B9;&#x5F0F;&#x6211;&#x5011;&#x9700;&#x8981;&#x628A;&#x6240;&#x6709;&#x8CC7;&#x8A0A;&#x50B3;&#x7D66;&#x6BCF;&#x4E00;&#x500B; child process&#xFF0C;&#x5F88;&#x82B1;&#x6642;&#x9593;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x9078;&#x64C7;&#x4F7F;&#x7528; shared memory&#x3002;</p><p>&#x6211;&#x4F7F;&#x7528;&#x5169;&#x500B; array&#xFF0C;finish &#x548C; passGranted&#xFF0C;&#x505A;&#x540C;&#x6B65;&#x7684;&#x63A7;&#x5236;&#x3002;&#x7576;&#x4E00;&#x500B; child process &#x5B8C;&#x6210;&#x88AB;&#x4EA4;&#x5F85;&#x7684;&#x4EFB;&#x52D9;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x53BB;&#x4FEE;&#x6539;&#x81EA;&#x5DF1;&#x7684;finsh&#x6B04;&#x4F4D;&#xFF0C;&#x5C07;&#x5176;&#x6A19;&#x8A18;&#x70BA; 1&#x3002;&#x800C;&#x7576; parent process &#x767C;&#x73FE;&#x6240;&#x6709; child process &#x7684; finish &#x6B04;&#x4F4D;&#x90FD;&#x6A19;&#x8A18;&#x70BA; 1&#xFF0C;&#x53EF;&#x4EE5;&#x958B;&#x59CB;&#x9032;&#x884C;&#x6BD4;&#x8F03;&#x54EA;&#x4E00;&#x500B; child process &#x627E;&#x51FA;&#x4F86;&#x7684;&#x8DEF;&#x5F91;&#x8DDD;&#x96E2;&#x6700;&#x77ED;&#xFF0C;parent process &#x6703;&#x5C07;&#x6B64;&#x6700;&#x77ED;&#x8DEF;&#x5F91;&#x66F4;&#x65B0;&#x7D66;&#x6240;&#x6709;&#x7684; child process&#xFF0C;&#x63A5;&#x8457; parent process &#x5C31;&#x53EF;&#x4EE5;&#x5C07;&#x6240;&#x6709; child process &#x7684;  passGranted &#x6B04;&#x4F4D;&#x6A19;&#x8A18;&#x70BA; 1&#xFF0C;&#x901A;&#x77E5; child process &#x53EF;&#x4EE5;&#x958B;&#x59CB;&#x4E0B;&#x4E00;&#x500B; iterration &#x7684;&#x8A08;&#x7B97;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* shared memory */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> *finish;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> *passGranted;</span><br><span class="line"></span><br><span class="line">finish = (<span class="keyword">int</span> *)mmap(<span class="literal">NULL</span>, childNum * <span class="keyword">sizeof</span>(<span class="keyword">int</span>), PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_SHARED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">passGranted = (<span class="keyword">int</span> *)mmap(<span class="literal">NULL</span>, childNum * <span class="keyword">sizeof</span>(<span class="keyword">int</span>), PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_SHARED, <span class="number">-1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="Parent-Process"><a href="#Parent-Process" class="headerlink" title="Parent Process"></a>Parent Process</h3><p>&#x7576; finish &#x6B04;&#x4F4D;&#x9084;&#x6C92;&#x6709;&#x5168;&#x90E8;&#x6A19;&#x8A18;&#x70BA; 1&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x9084;&#x6709; child process &#x6C92;&#x6709;&#x5B8C;&#x6210;&#x5DE5;&#x4F5C;&#x7684;&#x6642;&#x5019;&#xFF0C;parent process &#x5C31;&#x6703;&#x88AB;&#x5361;&#x5728; while loop &#x88E1;&#x9762;&#x3002;&#x812B;&#x96E2; while loop &#x4E4B;&#x5F8C; parent process &#x624D;&#x80FD;&#x958B;&#x59CB;&#x9032;&#x4ED6;&#x7684;&#x5DE5;&#x4F5C;&#x3002;&#x7576; parent process &#x628A;&#x81EA;&#x5DF1;&#x7684;&#x5DE5;&#x4F5C;&#x505A;&#x5B8C;&#x5F8C;&#xFF0C;&#x624D;&#x5141;&#x8A31; child process&#x9032;&#x884C;&#x4E0B;&#x4E00;&#x8F2A;&#x7684;&#x8A08;&#x7B97;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* wait until all child process finish */</span></span><br><span class="line"><span class="keyword">while</span>(!canPass(finish)) {</span><br><span class="line">    <span class="comment">/* do nothing */</span></span><br><span class="line">}</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* parent process working */</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reset synchronize variable */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childNum; j++) {</span><br><span class="line">    finish[j] = <span class="number">0</span>;</span><br><span class="line">    pass_granted[j] = <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">canPass</span><span class="params">(<span class="keyword">int</span> childNum, <span class="keyword">int</span> *finish)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childNum; i++) {</span><br><span class="line">        <span class="keyword">if</span>(finish[i] &gt; <span class="number">0</span>) sum ++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(sum == childNum) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="Child-Process"><a href="#Child-Process" class="headerlink" title="Child Process"></a>Child Process</h3><p>&#x7576; child process &#x6C92;&#x6709;&#x5F97;&#x5230;&#x5141;&#x8A31;&#xFF0C;&#x5373; passGranted &#x6B04;&#x4F4D;&#x70BA; 0 &#x6642;&#xFF0C;&#x6703;&#x88AB;&#x5361;&#x5728; while loop &#x88E1;&#x9762;&#xFF0C;&#x7B49;&#x5F85; parent process &#x7D66;&#x4E88;&#x901A;&#x904E;&#x7684;&#x5141;&#x8A31;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* child process working */</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">finish[id] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* wait until all child process finish */</span></span><br><span class="line"><span class="keyword">while</span>(!passGranted[id]) {</span><br><span class="line">    <span class="comment">/* do nothing */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reset synchronize variable */</span></span><br><span class="line">passGranted[id] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="Experimental-Result"><a href="#Experimental-Result" class="headerlink" title="Experimental Result"></a>Experimental Result</h2><p>&#x56E0;&#x70BA;&#x6211;&#x4F7F;&#x7528;&#x8CAA;&#x5A6A;&#x6F14;&#x7B97;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x8AD6;&#x662F; sequential / pthread / fork&#xFF0C;&#x627E;&#x8DEF;&#x5F91;&#x7684;&#x904E;&#x7A0B;&#x90FD;&#x662F;&#x4E00;&#x6A21;&#x4E00;&#x6A23;&#x7684;&#xFF0C;&#x6700;&#x5F8C;&#x627E;&#x5230;&#x7684;&#x7D50;&#x679C;&#x4E5F;&#x662F;&#x4E00;&#x6A21;&#x4E00;&#x6A23;&#x7684;&#x3002;&#x6211;&#x5F9E; tsplib &#x53D6;&#x5F97;&#x6E2C;&#x8CC7;&#xFF0C;tsplib&#x63D0;&#x4F9B;&#x591A;&#x500B; tsp &#x6E2C;&#x8CC7;&#x4EE5;&#x53CA;&#x8DDD;&#x96E2;&#x6700;&#x4F73;&#x89E3;&#xFF0C;&#x6211;&#x9078;&#x64C7;&#x4E86;&#x4E09;&#x500B;&#x5927;&#x5C0F;&#x7684;&#x6E2C;&#x8CC7;&#xFF0C;&#x5206;&#x5225;&#x662F; 1002 / 3795 / 7397 &#x500B;&#x57CE;&#x5E02;&#xFF0C;&#x62EC;&#x865F;&#x5167;&#x662F;&#x8A72;&#x6E2C;&#x8CC7;&#x7684;&#x6700;&#x4F73;&#x89E3;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x6E2C;&#x8A66;&#x7D50;&#x679C;&#x90FD;&#x662F; 5 &#x6B21;&#x6E2C;&#x8A66;&#x7684;&#x5E73;&#x5747;&#xFF0C;&#x5728; pthread &#x548C; fork &#x7684;&#x6E2C;&#x8A66;&#xFF0C;&#x6211;&#x4F7F;&#x7528;&#x4E86; 2 &#x500B; thread &#x548C; 2 &#x500B; child process&#x3002;</p><h3 id="pr1002"><a href="#pr1002" class="headerlink" title="pr1002"></a>pr1002</h3><table><thead><tr><th>pr1002</th><th>generation</th><th>distance</th><th>time (s)</th><th>speedup</th></tr></thead><tbody><tr><td>sequential</td><td>122</td><td>28079 (259045)</td><td>0.55</td><td>1.00</td></tr><tr><td>pthread (2)</td><td>122</td><td>28079 (259045)</td><td>0.45</td><td>1.22</td></tr><tr><td>fork (2)</td><td>122</td><td>28079 (259045)</td><td>0.38</td><td>1.45</td></tr></tbody></table><h3 id="fl3795"><a href="#fl3795" class="headerlink" title="fl3795"></a>fl3795</h3><table><thead><tr><th>fl3795</th><th>generation</th><th>distance</th><th>time (s)</th><th>speedup</th></tr></thead><tbody><tr><td>sequential</td><td>2251</td><td>34049 (28772)</td><td>294.61</td><td>1.00</td></tr><tr><td>pthread (2)</td><td>2251</td><td>34049 (28772)</td><td>149.16</td><td>1.98</td></tr><tr><td>fork (2)</td><td>2251</td><td>34049(28772)</td><td>160.16</td><td>1.84</td></tr></tbody></table><h3 id="pla7397"><a href="#pla7397" class="headerlink" title="pla7397"></a>pla7397</h3><table><thead><tr><th>pla7397</th><th>generation</th><th>distance</th><th>time (s)</th><th>speedup</th></tr></thead><tbody><tr><td>sequential</td><td>2243</td><td>25018352 (23260728)</td><td>1191.42</td><td>1.00</td></tr><tr><td>pthread (2)</td><td>2243</td><td>25018352 (23260728)</td><td>586.33</td><td>2.03</td></tr><tr><td>fork (2)</td><td>2243</td><td>34049(23260728)</td><td>705.31</td><td>1.69</td></tr></tbody></table><h3 id="speed-up"><a href="#speed-up" class="headerlink" title="speed up"></a>speed up</h3><p><img src="/2021/08/10/Parallel-TSP-using-pthread-and-fork/image1.svg"></p><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><p>&#x4E0B;&#x5716;&#x662F;&#x6E2C;&#x8CC7; pr1002 &#x521D;&#x59CB;&#x5316;&#x6642;&#x7684;&#x8DEF;&#x5F91;&#x5716;&#xFF0C;&#x4EE5;&#x53CA;&#x5B8C;&#x6210;&#x6700;&#x4F73;&#x5316;&#x4E4B;&#x5F8C;&#x7684;&#x8DEF;&#x5F91;&#x5716;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x7D93;&#x904E;&#x6700;&#x4F73;&#x5316;&#x7684;&#x8DEF;&#x5F91;&#xFF0C;&#x78BA;&#x5BE6;&#x5F97;&#x5230;&#x66F4;&#x597D;&#x7684;&#x8DEF;&#x5F91;&#x3002;</p><p><img src="/2021/08/10/Parallel-TSP-using-pthread-and-fork/image2.svg"></p><p><img src="/2021/08/10/Parallel-TSP-using-pthread-and-fork/image3.svg"></p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>&#x5EFA;&#x7ACB;&#x4E00;&#x500B;&#x65B0;&#x7684; process &#x6240;&#x9700;&#x8981;&#x7684;&#x8CC7;&#x6E90;&#x548C;&#x6642;&#x9593;&#x90FD;&#x8F03;&#x591A;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x9810;&#x671F; fork &#x7684;&#x6548;&#x80FD;&#x6703;&#x6BD4;&#x8F03;&#x5DEE;&#xFF0C;&#x5BE6;&#x9A57;&#x7D50;&#x679C;&#x4E5F;&#x5448;&#x73FE; pthread &#x6709;&#x8F03;&#x597D;&#x7684;&#x6548;&#x80FD;&#x3002;&#x7576;&#x6E2C;&#x8CC7;&#x592A;&#x5C0F;&#x6642;&#x5EFA;&#x7ACB;&#x5E73;&#x884C;&#x7684; overhead &#x6703;&#x4F7F;&#x5F97;&#x5E73;&#x884C;&#x7684;&#x6548;&#x80FD;&#x964D;&#x4F4E;&#xFF0C;&#x6700;&#x5C0F;&#x7684;&#x6E2C;&#x8CC7; pr1002 &#x78BA;&#x5BE6;&#x6548;&#x80FD;&#x4E0D;&#x4F73;&#xFF0C;&#x4E2D;&#x6E2C;&#x8CC7; fl3795 &#x6548;&#x80FD;&#x660E;&#x986F;&#x8F03;&#x4F73;&#x3002;</p><p>&#x5927;&#x6E2C;&#x8CC7; pla7394 &#x5728; pthread &#x7684; speedup &#x8D85;&#x904E; 2&#xFF0C;&#x7406;&#x8AD6;&#x4E0A; speedup &#x4E0D;&#x61C9;&#x8A72;&#x8D85;&#x904E; 2&#xFF0C;&#x56E0;&#x70BA;&#x6C92;&#x6709;&#x5DEE;&#x5F88;&#x591A;&#xFF0C;&#x6211;&#x5224;&#x65B7;&#x9019;&#x662F;&#x7D71;&#x8A08;&#x4E0A;&#x7684;&#x8AA4;&#x5DEE;&#x3002;</p><p>&#x9664;&#x4E86;&#x5EFA;&#x7ACB; thread / process &#x7684; overhead &#x4E4B;&#x5916;&#xFF0C;&#x6211;&#x4E0D;&#x78BA;&#x5B9A;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x5C0D;&#x65BC; thread &#x548C; process &#x7684;&#x6392;&#x7A0B;&#x512A;&#x5148;&#x6B0A;&#x662F;&#x5426;&#x76F8;&#x540C; (&#x6216;&#x8A31; process &#x7684;&#x512A;&#x5148;&#x6B0A;&#x6703;&#x9AD8;&#x65BC; thread&#xFF0C;&#x53EF;&#x4EE5;&#x62FF;&#x5230;&#x6BD4;&#x8F03;&#x9AD8;&#x7684;&#x512A;&#x5148;&#x6B0A;)&#xFF0C;&#x4EE5;&#x53CA;&#x9019;&#x5169;&#x8005;&#x5E95;&#x5C64;&#x7684;&#x5BE6;&#x505A;&#x5DEE;&#x7570;&#xFF0C;&#x96D6;&#x7136;&#x5728;&#x5BE6;&#x9A57;&#x7D50;&#x679C;&#x4E2D;&#x770B;&#x4E0D;&#x592A;&#x51FA;&#x4F86;&#x9019;&#x500B;&#x56E0;&#x7D20;&#x662F;&#x5426;&#x6709;&#x4F5C;&#x7528;&#xFF0C;&#x4F46;&#x9019;&#x4E5F;&#x6703;&#x662F;&#x5F71;&#x97FF; pthread &#x548C; fork &#x6548;&#x80FD;&#x7684;&#x4E00;&#x500B;&#x56E0;&#x7D20;&#x3002;</p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; gcc tsp_seq.c -o tsp_seq -lm</span><br><span class="line">&gt; g++ fork.cc -o fork -lm</span><br><span class="line">&gt; gcc tsp_pthread.c -o tsp_pthread -lm -lpthread</span><br></pre></td></tr></table></figure><h4 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; time ./tsp_seq &gt; 7397_seq.txt</span><br><span class="line">&gt; time ./fork &gt; fork_7397.txt</span><br><span class="line">&gt; time ./tsp_pthread &gt; 7397_pthread.txt</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] &#x65C5;&#x884C;&#x63A8;&#x92B7;&#x54E1;&#x554F;&#x984C;<br><a href="https://zh.wikipedia.org/wiki/%E6%97%85%E8%A1%8C%E6%8E%A8%E9%94%80%E5%91%98%E9%97%AE%E9%A2%98">https://zh.wikipedia.org/wiki/%E6%97%85%E8%A1%8C%E6%8E%A8%E9%94%80%E5%91%98%E9%97%AE%E9%A2%98</a><br>[2] TSP Test Data<br><a href="http://www.math.uwaterloo.ca/tsp/data/index.html">http://www.math.uwaterloo.ca/tsp/data/index.html</a><br>[3] 2-opt<br><a href="https://en.wikipedia.org/wiki/2-opt">https://en.wikipedia.org/wiki/2-opt</a><br>[4] TSPLIB<br><a href="http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/">http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;h3 id=&quot;TSP&quot;&gt;&lt;a href=&quot;#TSP&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>北科資工修課紀錄 : 碩一下</title>
    <link href="http://example.com/2021/07/31/%E5%8C%97%E7%A7%91%E8%B3%87%E5%B7%A5%E4%BF%AE%E8%AA%B2%E7%B4%80%E9%8C%84-%E7%A2%A9%E4%B8%80%E4%B8%8B/"/>
    <id>http://example.com/2021/07/31/%E5%8C%97%E7%A7%91%E8%B3%87%E5%B7%A5%E4%BF%AE%E8%AA%B2%E7%B4%80%E9%8C%84-%E7%A2%A9%E4%B8%80%E4%B8%8B/</id>
    <published>2021-07-31T05:55:20.000Z</published>
    <updated>2021-08-09T17:00:44.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="&#x78A9;&#x4E00;&#x4E0B;"><a href="#&#x78A9;&#x4E00;&#x4E0B;" class="headerlink" title="&#x78A9;&#x4E00;&#x4E0B;"></a>&#x78A9;&#x4E00;&#x4E0B;</h3><p>&#x56E0;&#x70BA;&#x7533;&#x8ACB;&#x63D0;&#x65E9;&#x5165;&#x5B78;&#xFF0C;&#x6240;&#x4EE5;&#x4E8C;&#x6708;&#x5C31;&#x5165;&#x5B78;&#x4E86;&#xFF0C;&#x6211;&#x5728;&#x5317;&#x79D1;&#x7684;&#x7B2C;&#x4E00;&#x500B;&#x5B78;&#x671F;&#x5C31;&#x662F;&#x4E0B;&#x5B78;&#x671F;&#xFF0C;&#x5317;&#x79D1;&#x8CC7;&#x5DE5;&#x898F;&#x5B9A;&#x975E;&#x672C;&#x79D1;&#x7684;&#x78A9;&#x58EB;&#x73ED;&#x5B78;&#x751F;&#x5FC5;&#x9700;&#x88DC;&#x4FEE;&#x5927;&#x5B78;&#x90E8;&#x7684;&#x8AB2;&#x7A0B;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4E5F;&#x6703;&#x4FEE;&#x4E00;&#x4E9B;&#x5927;&#x5B78;&#x90E8;&#x7684;&#x8AB2;&#x3002;</p><h3 id="&#x5927;&#x5B78;&#x90E8;&#x8AB2;&#x7A0B;"><a href="#&#x5927;&#x5B78;&#x90E8;&#x8AB2;&#x7A0B;" class="headerlink" title="&#x5927;&#x5B78;&#x90E8;&#x8AB2;&#x7A0B;"></a>&#x5927;&#x5B78;&#x90E8;&#x8AB2;&#x7A0B;</h3><h4 id="&#x8A08;&#x7B97;&#x6A5F;&#x7D44;&#x7E54;-&#x9673;&#x5F65;&#x9716;"><a href="#&#x8A08;&#x7B97;&#x6A5F;&#x7D44;&#x7E54;-&#x9673;&#x5F65;&#x9716;" class="headerlink" title="&#x8A08;&#x7B97;&#x6A5F;&#x7D44;&#x7E54; - &#x9673;&#x5F65;&#x9716;"></a>&#x8A08;&#x7B97;&#x6A5F;&#x7D44;&#x7E54; - &#x9673;&#x5F65;&#x9716;</h4><p>&#x8001;&#x5E2B;&#x6559;&#x7684;&#x5F88;&#x597D;&#x5F88;&#x4ED4;&#x7D30;&#xFF0C;&#x5C0D;&#x8AB2;&#x7A0B;&#x7684;&#x638C;&#x63E1;&#x5EA6;&#x5F88;&#x9AD8;&#xFF0C;&#x61C9;&#x8A72;&#x5DF2;&#x7D93;&#x6559;&#x9019;&#x9580;&#x8AB2;&#x5F88;&#x591A;&#x5E74;&#x4E86;&#xFF0C;&#x5C0D;&#x540C;&#x5B78;&#x7684;&#x554F;&#x984C;&#x90FD;&#x56DE;&#x7B54;&#x5F97;&#x5F88;&#x5B8C;&#x6574;&#x3002;&#x9019;&#x9580;&#x8AB2;&#x662F;&#x8CC7;&#x5DE5;&#x5927;&#x4E00;&#x7684;&#x8AB2;&#xFF0C;&#x4FEE;&#x9019;&#x9580;&#x8AB2;&#x4E4B;&#x524D;&#x901A;&#x5E38;&#x61C9;&#x8A72;&#x6703;&#x5148;&#x4FEE;&#x6578;&#x4F4D;&#x96FB;&#x8DEF;&#xFF0C;&#x4F46;&#x6211;&#x6C92;&#x4FEE;&#x904E;&#x5C31;&#x76F4;&#x63A5;&#x4E0A;&#x4E86;&#xFF0C;&#x671F;&#x4E2D;&#x8003;&#x524D;&#x8B1B;&#x95DC;&#x65BC; MIPS &#x6307;&#x4EE4;&#x7684;&#x9084;&#x6C92;&#x4EC0;&#x9EBC;&#x554F;&#x984C;&#xFF0C;&#x671F;&#x4E2D;&#x8003;&#x5F8C;&#x8B1B; CPU &#x8A2D;&#x8A08;&#x7684;&#x5C31;&#x89BA;&#x5F97;&#x6709;&#x9EDE;&#x96E3;&#x4EE5;&#x7406;&#x89E3;&#xFF0C;&#x9700;&#x8981;&#x82B1;&#x6BD4;&#x8F03;&#x591A;&#x6642;&#x9593;&#x53BB;&#x7406;&#x89E3;&#x3002;&#x6574;&#x500B;&#x5B78;&#x671F;&#x6709;&#x516D;&#x4EFD;&#x4F5C;&#x696D;&#xFF0C;&#x90FD;&#x662F;&#x624B;&#x5BEB;&#x4F5C;&#x696D;&#xFF0C;&#x671F;&#x4E2D;&#x671F;&#x672B;&#x5E7E;&#x4E4E;&#x90FD;&#x662F;&#x4F5C;&#x696D;&#x7684;&#x984C;&#x578B;&#xFF0C;&#x7D66;&#x5206;&#x5F88;&#x751C;&#xFF0C;&#x4E5F;&#x5B78;&#x5230;&#x5F88;&#x591A;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x6307;&#x4EE4;&#x96C6;&#x7684;&#x90E8;&#x4EFD;&#x5F88;&#x5BE6;&#x7528;&#x3002;</p><h4 id="&#x8A08;&#x7B97;&#x6A5F;&#x6F14;&#x7B97;&#x6CD5;-&#x856D;&#x69AE;&#x4FEE;"><a href="#&#x8A08;&#x7B97;&#x6A5F;&#x6F14;&#x7B97;&#x6CD5;-&#x856D;&#x69AE;&#x4FEE;" class="headerlink" title="&#x8A08;&#x7B97;&#x6A5F;&#x6F14;&#x7B97;&#x6CD5; - &#x856D;&#x69AE;&#x4FEE;"></a>&#x8A08;&#x7B97;&#x6A5F;&#x6F14;&#x7B97;&#x6CD5; - &#x856D;&#x69AE;&#x4FEE;</h4><p>&#x6559;&#x7684;&#x975E;&#x5E38;&#x7C21;&#x55AE;&#xFF0C;&#x8AB2;&#x975E;&#x5E38;&#x6DBC;&#xFF0C;&#x4F5C;&#x696D;&#x5F88;&#x5C11;&#xFF0C;&#x8003;&#x8A66;&#x7C21;&#x55AE;&#xFF0C;&#x7D66;&#x5206;&#x5F88;&#x751C;&#x3002;&#x6211;&#x76F8;&#x4FE1;&#x6240;&#x6709;&#x4EBA;&#x5728;&#x9078;&#x8AB2;&#x7684;&#x6642;&#x5019;&#x4E0D;&#x53EF;&#x80FD;&#x5168;&#x90E8;&#x90FD;&#x9078;&#x786C;&#x8AB2;&#xFF0C;&#x6DBC;&#x8AB2;&#x7D55;&#x5C0D;&#x6709;&#x5B58;&#x5728;&#x7684;&#x5FC5;&#x8981;&#xFF0C;&#x4F46;&#x662F;&#x6F14;&#x7B97;&#x6CD5;&#x4F5C;&#x70BA;&#x8CC7;&#x5DE5;&#x6700;&#x6838;&#x5FC3;&#x7684;&#x8AB2;&#x7A0B;&#x4E4B;&#x4E00;&#xFF0C;&#x7ADF;&#x7136;&#x662F;&#x6DBC;&#x8AB2;&#x771F;&#x7684;&#x5F88;&#x554F;&#x865F;&#x3002;</p><h3 id="&#x7814;&#x7A76;&#x6240;&#x8AB2;&#x7A0B;"><a href="#&#x7814;&#x7A76;&#x6240;&#x8AB2;&#x7A0B;" class="headerlink" title="&#x7814;&#x7A76;&#x6240;&#x8AB2;&#x7A0B;"></a>&#x7814;&#x7A76;&#x6240;&#x8AB2;&#x7A0B;</h3><h4 id="&#x4F5C;&#x696D;&#x7CFB;&#x7D71;-&#x738B;&#x6B63;&#x8C6A;"><a href="#&#x4F5C;&#x696D;&#x7CFB;&#x7D71;-&#x738B;&#x6B63;&#x8C6A;" class="headerlink" title="&#x4F5C;&#x696D;&#x7CFB;&#x7D71; - &#x738B;&#x6B63;&#x8C6A;"></a>&#x4F5C;&#x696D;&#x7CFB;&#x7D71; - &#x738B;&#x6B63;&#x8C6A;</h4><p>&#x82F1;&#x6587;&#x6388;&#x8AB2;&#xFF0C;&#x4E0A;&#x8AB2;&#x5167;&#x5BB9;&#x57FA;&#x672C;&#x4E0A;&#x91CD;&#x8907;&#x5927;&#x5B78;&#x90E8;&#x7684;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#xFF0C;&#x518D;&#x591A;&#x52A0;&#x4E00;&#x4E9B;&#x5206;&#x6563;&#x5F0F;&#x7CFB;&#x7D71;&#x7684;&#x5167;&#x5BB9;&#xFF0C;&#x8AB2;&#x5F88;&#x6DBC;&#xFF0C;&#x4F5C;&#x696D;&#x4E0D;&#x96E3;&#xFF0C;&#x671F;&#x672B;&#x8981;&#x5831;&#x544A;&#x8AD6;&#x6587;&#x6216;&#x505A;&#x5C08;&#x984C;&#xFF0C;&#x8001;&#x5E2B;&#x7684;&#x7D50;&#x5DF4;&#x6709;&#x9EDE;&#x56B4;&#x91CD;&#xFF0C;&#x6211;&#x662F;&#x56E0;&#x70BA;&#x6C92;&#x6709;&#x4FEE;&#x904E;&#x5927;&#x5B78;&#x90E8;&#x7684;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x6240;&#x4EE5;&#x4F86;&#x4FEE;&#x7684;&#x3002;&#x6211;&#x4FEE;&#x4E4B;&#x524D;&#x6015;&#x6211;&#x6C92;&#x4FEE;&#x904E;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x6703;&#x8DDF;&#x4E0D;&#x4E0A;&#xFF0C;&#x6240;&#x4EE5;&#x770B;&#x4E86;&#x6E05;&#x5927;&#x5468;&#x5FD7;&#x9060;&#x7684;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x958B;&#x653E;&#x5F0F;&#x8AB2;&#x7A0B;&#xFF0C;&#x7D50;&#x8AD6;&#x662F;&#x5468;&#x5FD7;&#x9060;&#x7684;&#x8AB2;&#x4E0A;&#x7684;&#x6BD4;&#x8F03;&#x597D;&#x3002;</p><h4 id="&#x6A94;&#x6848;&#x8207;&#x5132;&#x5B58;&#x7CFB;&#x7D71;-&#x9673;&#x78A9;&#x6F22;"><a href="#&#x6A94;&#x6848;&#x8207;&#x5132;&#x5B58;&#x7CFB;&#x7D71;-&#x9673;&#x78A9;&#x6F22;" class="headerlink" title="&#x6A94;&#x6848;&#x8207;&#x5132;&#x5B58;&#x7CFB;&#x7D71; - &#x9673;&#x78A9;&#x6F22;"></a>&#x6A94;&#x6848;&#x8207;&#x5132;&#x5B58;&#x7CFB;&#x7D71; - &#x9673;&#x78A9;&#x6F22;</h4><p>&#x82F1;&#x6587;&#x6388;&#x8AB2;&#xFF0C;&#x8001;&#x5E2B;&#x662F;&#x65B0;&#x4F86;&#x5317;&#x79D1;&#x7684;&#x8001;&#x5E2B;&#xFF0C;&#x96D6;&#x7136;&#x4E0A;&#x8AB2;&#x8A8D;&#x771F;&#x4F46;&#x53EF;&#x80FD;&#x56E0;&#x70BA;&#x624D;&#x525B;&#x958B;&#x59CB;&#x6559;&#x66F8;&#xFF0C;&#x89BA;&#x5F97;&#x9084;&#x6709;&#x9032;&#x6B65;&#x7A7A;&#x9593;&#xFF0C;&#x524D;&#x534A;&#x5B78;&#x671F;&#x8B1B;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#xFF0C;&#x5F8C;&#x534A;&#x5B78;&#x671F;&#x8B1B;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#xFF0C;&#x4F5C;&#x696D;&#x662F; NachOS &#x5BE6;&#x4F5C;&#xFF0C;&#x4ED6;&#x7684;&#x7684;&#x4F5C;&#x696D;&#x57FA;&#x672C;&#x4E0A;&#x5C31;&#x662F;&#x6E05;&#x5927;&#x5468;&#x5FD7;&#x9060;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x7684;&#x4F5C;&#x696D;&#x4E00;&#x548C;&#x4F5C;&#x696D;&#x56DB;&#xFF0C;&#x672C;&#x4F86;&#x9084;&#x6709;&#x53E6;&#x4E00;&#x4EFD;&#x4F5C;&#x696D;&#xFF0C;&#x4F46;&#x56E0;&#x70BA;&#x5927;&#x5BB6;&#x5728;&#x5BEB; NachOS &#x7684;&#x6642;&#x5019;&#x4EA4;&#x4F5C;&#x696D;&#x7387;&#x4E0D;&#x662F;&#x5F88;&#x9AD8;&#xFF0C;&#x8001;&#x5E2B;&#x5C31;&#x628A;&#x4F5C;&#x696D;&#x671F;&#x9650;&#x5EF6;&#x9577;&#xFF0C;&#x628A;&#x53E6;&#x4E00;&#x4EFD;&#x4F5C;&#x696D;&#x53D6;&#x6D88;&#x3002;&#x6211;&#x81EA;&#x5DF1;&#x662F;&#x4E0D;&#x592A;&#x559C;&#x6B61;&#x4E0A;&#x82F1;&#x6587;&#x6388;&#x8AB2;&#x7684;&#x8AB2;&#xFF0C;&#x4E0D;&#x904E;&#x6211;&#x9078;&#x8AB2;&#x662F;&#x770B;&#x8AB2;&#x7684;&#x5167;&#x5BB9;&#xFF0C;&#x82F1;&#x6587;&#x6388;&#x8AB2;&#x4E5F;&#x4E0D;&#x6392;&#x65A5;&#x3002;&#x6211;&#x89BA;&#x5F97;&#x8001;&#x5E2B;&#x5F88;&#x8A8D;&#x771F;&#x4F5C;&#x696D;&#x5F88;&#x6709;&#x8DA3;&#xFF0C;&#x5982;&#x679C;&#x9019;&#x9580;&#x8AB2;&#x662F;&#x4E2D;&#x6587;&#x6388;&#x8AB2;&#x7684;&#x5C31;&#x597D;&#x4E86;&#x3002;</p><h3 id="&#x7D50;&#x8A9E;"><a href="#&#x7D50;&#x8A9E;" class="headerlink" title="&#x7D50;&#x8A9E;"></a>&#x7D50;&#x8A9E;</h3><p>&#x904E;&#x53BB;&#x96D6;&#x7136;&#x4E5F;&#x5728;&#x6E05;&#x5927;&#x4FEE;&#x904E;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x8AB2;&#xFF0C;&#x4F46;&#x4FEE;&#x7684;&#x5927;&#x90E8;&#x5206;&#x90FD;&#x9084;&#x662F;&#x6A5F;&#x68B0;&#x7CFB;&#x5FC5;&#x4FEE;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x6240;&#x6709;&#x8AB2;&#x90FD;&#x662F;&#x4FEE;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x8AB2;&#xFF0C;&#x89BA;&#x5F97;&#x548C;&#x4EE5;&#x524D;&#x5728;&#x6A5F;&#x68B0;&#x7CFB;&#x7684;&#x6642;&#x5019;&#x4E0D;&#x4E00;&#x6A23;&#xFF0C;&#x4E0D;&#x662F;&#x53EA;&#x60F3;&#x6E4A;&#x5B78;&#x5206;&#xFF0C;&#x662F;&#x771F;&#x7684;&#x5C0D;&#x8AB2;&#x7A0B;&#x611F;&#x8208;&#x8DA3;&#xFF0C;&#x6709;&#x6642;&#x5019;&#x5F8C;&#x6094;&#x6C92;&#x6709;&#x65E9;&#x9EDE;&#x8F49;&#x7CFB;&#xFF0C;&#x4F46;&#x904E;&#x53BB;&#x7684;&#x4E8B;&#x60C5;&#x662F;&#x4E0D;&#x80FD;&#x6539;&#x8B8A;&#x7684;&#x662F;&#x5427;&#xFF0C;&#x73FE;&#x5728;&#x9019;&#x6A23;&#x4E5F;&#x5F88;&#x597D;&#x3002;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;&amp;#x78A9;&amp;#x4E00;&amp;#x4E0B;&quot;&gt;&lt;a href=&quot;#&amp;#x78A9;&amp;#x4E00;&amp;#x4E0B;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x78A9;&amp;#x4E00;&amp;#x4E0B;&quot;&gt;&lt;/a&gt;&amp;#x78A9;&amp;#x4E0</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NachOS MP2</title>
    <link href="http://example.com/2021/07/18/NachOS-MP2/"/>
    <id>http://example.com/2021/07/18/NachOS-MP2/</id>
    <published>2021-07-18T13:44:55.000Z</published>
    <updated>2021-08-09T11:42:33.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="README"><a href="#README" class="headerlink" title="README"></a>README</h2><p>&#x9019;&#x662F;&#x6E05;&#x5927;&#x5468;&#x5FD7;&#x9060;&#x6559;&#x6388;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x7684;&#x4F5C;&#x696D;&#xFF0C;&#x6211;&#x5728;&#x7DB2;&#x8DEF;&#x4E0A;&#x627E;&#x5230;&#x9019;&#x4EFD;&#x4F5C;&#x696D;&#x7684;&#x76F8;&#x95DC;&#x8CC7;&#x6599;&#xFF0C;&#x6211;&#x4E26;&#x6C92;&#x6709;&#x4E0A;&#x904E;&#x9019;&#x9580;&#x8AB2;&#xFF0C;&#x9019;&#x53EA;&#x662F;&#x6211;&#x7684;&#x81EA;&#x5B78;&#x7DF4;&#x7FD2;&#xFF0C;&#x6211;&#x7121;&#x6CD5;&#x80AF;&#x5B9A;&#x6211;&#x7684;&#x5831;&#x544A;&#x548C;&#x5BE6;&#x4F5C;&#x7684;&#x6B63;&#x78BA;&#x6027;&#xFF0C;&#x6211;&#x7684;&#x5BE6;&#x4F5C;&#x5728;<a href="https://github.com/WendyUsingGithub/NTHU_OS_NachOS/tree/main/NachOS-4.0_MP2">&#x9019;&#x88E1;</a>&#xFF0C;&#x6211;&#x7684; shell script &#x5728;<a href="https://github.com/WendyUsingGithub/NTHU_OS_NachOS/blob/main/NachOS-4.0_MP2/code/test/sh.sh">&#x9019;&#x88E1;</a>&#x3002;</p><h2 id="Trace-code"><a href="#Trace-code" class="headerlink" title="Trace code"></a>Trace code</h2><h3 id="Kernel-ExecAll-&#x200B;"><a href="#Kernel-ExecAll-&#x200B;" class="headerlink" title="Kernel::ExecAll()&#x200B;"></a>Kernel::ExecAll()&#x200B;</h3><p>Starting from &#x201C;threads/kernel.cc&#x200B; Kernel::ExecAll()&#x200B;&#x201D; is called.</p><h4 id="1-int-main-int-argc-char-argv"><a href="#1-int-main-int-argc-char-argv" class="headerlink" title="1. int main(int argc, char **argv)"></a>1. int main(int argc, char **argv)</h4><p><strong>threads/main.cc</strong></p><p>kernel &#x5BA3;&#x544A;&#x70BA;&#x5168;&#x57DF;&#x8B8A;&#x6578;&#xFF0C;&#x6574;&#x500B; NachOS file &#x90FD;&#x53EF;&#x4EE5;&#x5171;&#x4EAB;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kernel *kernel; <span class="comment">/* global variable */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    kernel = <span class="keyword">new</span> Kernel(argc, argv);</span><br><span class="line">    kernel-&gt;Initialize();</span><br><span class="line">    ... </span><br><span class="line">    kernel-&gt;ExecAll();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x7576;&#x6211;&#x5011;&#x5728;&#x547D;&#x4EE4;&#x5217;&#x4E0B;&#x6307;&#x4EE4; -e halt&#xFF0C;halt &#x5373;&#x662F;&#x6211;&#x5011;&#x60F3;&#x57F7;&#x884C;&#x7684;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/kernel.cc */</span></span><br><span class="line"></span><br><span class="line">Kernel::Kernel(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argc; i++) {</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-e&quot;</span>) == <span class="number">0</span>) {</span><br><span class="line">            execfile[++execfileNum]= argv[++i];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; execfile[execfileNum] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        }     </span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/kernel.h */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Thread *currentThread; <span class="comment">/* the thread holding CPU */</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Thread* t[<span class="number">10</span>]; <span class="comment">/* 10 threads at most */</span></span><br><span class="line">  <span class="keyword">char</span>* execfile[<span class="number">10</span>]; <span class="comment">/* executable file name */</span></span><br><span class="line">};</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/kernel.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kernel::Initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    currentThread = <span class="keyword">new</span> Thread(<span class="string">&quot;main&quot;</span>, threadNum++);</span><br><span class="line">    currentThread-&gt;setStatus(RUNNING); </span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="2-void-Kernel-ExecAll"><a href="#2-void-Kernel-ExecAll" class="headerlink" title="2. void Kernel::ExecAll()"></a>2. void Kernel::ExecAll()</h4><p><strong>threads/kernel.cc</strong>&#x200B; </p><p>&#x628A;&#x6240;&#x6709;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x4E1F;&#x9032; Exec() &#x57F7;&#x884C;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kernel::ExecAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= execfileNum; i++) {</span><br><span class="line">        <span class="keyword">int</span> a = Exec(execfile[i]);</span><br><span class="line">    }</span><br><span class="line">    currentThread-&gt;Finish();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="3-int-Kernel-Exec-char-name"><a href="#3-int-Kernel-Exec-char-name" class="headerlink" title="3. int Kernel::Exec(char* name)"></a>3. int Kernel::Exec(char* name)</h4><p><strong>threads/kernel.cc</strong>&#x200B; </p><p>&#x6BCF;&#x4E00;&#x500B;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x90FD;&#x9700;&#x8981; new &#x4E00;&#x500B;&#x65B0;&#x7684; thread &#x4F86;&#x57F7;&#x884C;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kernel::Exec</span><span class="params">(<span class="keyword">char</span>* name)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    t[threadNum] = <span class="keyword">new</span> Thread(name, threadNum);</span><br><span class="line">    t[threadNum]-&gt;space = <span class="keyword">new</span> AddrSpace();    </span><br><span class="line">    t[threadNum]-&gt;Fork((VoidFunctionPtr)&amp;ForkExecute,</span><br><span class="line">                       (<span class="keyword">void</span>*)t[threadNum]);</span><br><span class="line">    threadNum++;</span><br><span class="line">    <span class="keyword">return</span> threadNum<span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="4-void-Thread-Fork-VoidFunctionPtr-func-void-arg"><a href="#4-void-Thread-Fork-VoidFunctionPtr-func-void-arg" class="headerlink" title="4. void Thread::Fork(VoidFunctionPtr func, void *arg)"></a>4. void Thread::Fork(VoidFunctionPtr func, void *arg)</h4><p><strong>threads/thread.cc</strong></p><p>&#x5EFA;&#x7ACB; thread &#x57F7;&#x884C;&#x6240;&#x9700;&#x8981;&#x7684; stack&#xFF0C;&#x4E26;&#x628A; thread &#x4E1F;&#x9032; readyList &#x7B49;&#x5F85;&#x57F7;&#x884C;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::Fork</span><span class="params">(VoidFunctionPtr func, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Interrupt *interrupt = kernel-&gt;interrupt;</span><br><span class="line">    Scheduler *scheduler = kernel-&gt;scheduler;</span><br><span class="line">    IntStatus oldLevel;</span><br><span class="line">    </span><br><span class="line">    StackAllocate(func, arg);</span><br><span class="line"></span><br><span class="line">    oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    scheduler-&gt;ReadyToRun(<span class="keyword">this</span>);</span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">}   </span><br></pre></td></tr></table></figure><h4 id="5-void-Scheduler-ReadyToRun-Thread-thread"><a href="#5-void-Scheduler-ReadyToRun-Thread-thread" class="headerlink" title="5. void Scheduler::ReadyToRun (Thread *thread)"></a>5. void Scheduler::ReadyToRun (Thread *thread)</h4><p><strong>threads/scheduler.cc</strong></p><p>&#x5C07; thread &#x52A0;&#x5165; readyList&#xFF0C;&#x7576; scheduler &#x9700;&#x8981;&#x5B89;&#x6392; thread &#x4F86;&#x57F7;&#x884C;&#x7684;&#x6642;&#x5019;&#xFF0C;&#x5C31;&#x5F9E; readyList dequeue &#x4E00;&#x500B; thread &#x4F86;&#x57F7;&#x884C;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Scheduler::ReadyToRun</span> <span class="params">(Thread *thread)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ASSERT(kernel-&gt;interrupt-&gt;getLevel() == IntOff);</span><br><span class="line">    thread-&gt;setStatus(READY);</span><br><span class="line">    readyList-&gt;Append(thread);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span> {</span></span><br><span class="line">    <span class="function">Thread* <span class="title">FindNextToRun</span><span class="params">()</span></span>;</span><br><span class="line">    List&lt;Thread *&gt; *readyList;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h3 id="Thread-Sleep"><a href="#Thread-Sleep" class="headerlink" title="Thread::Sleep"></a>Thread::Sleep</h3><p>Starting from &#x201C;threads/thread.cc thread::Sleep&#x200B;&#x201D; is called.</p><h4 id="1-void-Thread-Sleep-bool-finishing"><a href="#1-void-Thread-Sleep-bool-finishing" class="headerlink" title="1. void Thread::Sleep (bool finishing)"></a>1. void Thread::Sleep (bool finishing)</h4><p><strong>threads/thread.cc</strong></p><p>&#x53EA;&#x6709; currentThread &#x53EF;&#x4EE5;&#x547C;&#x53EB; Sleep()&#xFF0C;currentThread &#x662F;&#x76EE;&#x524D;&#x6B63;&#x5728;&#x57F7;&#x884C;&#x7684; thread&#xFF0C;&#x7576;currentThread &#x5B8C;&#x6210;&#x4ED6;&#x7684;&#x5DE5;&#x4F5C;&#x6216;&#x662F;&#x5728;&#x7B49;&#x5F85; synchronization variable (Semaphore, Lock, or Condition)&#xFF0C;&#x6703;&#x9032;&#x5165; Sleep()&#x3002; &#x7576; currentThread &#x9032;&#x5165; Sleep()&#xFF0C;&#x5C31;&#x80FD;&#x5F9E; readyList &#x4E2D; dequeue &#x4E00;&#x500B; thread &#x6210;&#x70BA; currentThread&#xFF0C;&#x4F7F;&#x7528; CPU&#x3002;&#x6211;&#x5011;&#x5C07;&#x9032;&#x5165; Sleep() &#x7684; thread &#x7684; state &#x5B58;&#x8D77;&#x4F86;&#xFF0C;&#x4E26;&#x4E14;&#x9032;&#x884C; context switch &#x3002;&#x7576;&#x518D;&#x6B21;&#x8F2A;&#x5230;&#x5728; Sleep() &#x7684; thread &#x4F7F;&#x7528; CPU &#x6642;&#xFF0C;Run() &#x624D;&#x6703; return&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::Sleep</span> <span class="params">(<span class="keyword">bool</span> finishing)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Thread *nextThread;</span><br><span class="line">    ASSERT(<span class="keyword">this</span> == kernel-&gt;currentThread);</span><br><span class="line">    ASSERT(kernel-&gt;interrupt-&gt;getLevel() == IntOff);</span><br><span class="line">    status = BLOCKED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((nextThread = kernel-&gt;scheduler-&gt;FindNextToRun()) == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="comment">/* no one to run, wait for an interrupt */</span></span><br><span class="line">        kernel-&gt;interrupt-&gt;Idle();</span><br><span class="line">    }    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* returns when it&apos;s time for us to run */</span></span><br><span class="line">    kernel-&gt;scheduler-&gt;Run(nextThread, finishing); </span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="2-void-Scheduler-Run-Thread-nextThread-bool-finishing"><a href="#2-void-Scheduler-Run-Thread-nextThread-bool-finishing" class="headerlink" title="2. void Scheduler::Run (Thread *nextThread, bool finishing)"></a>2. void Scheduler::Run (Thread *nextThread, bool finishing)</h4><p><strong>threads/scheduler.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Scheduler::Run</span> <span class="params">(Thread *nextThread, <span class="keyword">bool</span> finishing)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Thread *oldThread = kernel-&gt;currentThread;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (finishing) {</span><br><span class="line">        <span class="comment">/* mark that we need to delete current thread */</span></span><br><span class="line">        ASSERT(toBeDestroyed == <span class="literal">NULL</span>);</span><br><span class="line">  toBeDestroyed = oldThread;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (oldThread-&gt;space &#xFF01;= <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="comment">/* save the user&apos;s state */</span></span><br><span class="line">        oldThread-&gt;SaveUserState();</span><br><span class="line">        oldThread-&gt;space-&gt;SaveState();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    oldThread-&gt;CheckOverflow();</span><br><span class="line">    <span class="comment">/* switch to the next thread */</span></span><br><span class="line">    kernel-&gt;currentThread = nextThread;      </span><br><span class="line">    <span class="comment">/* nextThread is now running */</span></span><br><span class="line">    nextThread-&gt;setStatus(RUNNING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is a machine-dependent assembly language routine defined </span></span><br><span class="line"><span class="comment">     * in switch.s */</span></span><br><span class="line">    SWITCH(oldThread, nextThread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we&apos;re back, running oldThread */</span></span><br><span class="line">    <span class="comment">/* check if thread we were running before this one has finished</span></span><br><span class="line"><span class="comment">     * and needs to be cleaned up */</span></span><br><span class="line">    CheckToBeDestroyed();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (oldThread-&gt;space != <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="comment">/* if there is an address space to restore, do it */</span></span><br><span class="line">        oldThread-&gt;RestoreUserState();</span><br><span class="line">  oldThread-&gt;space-&gt;RestoreState();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x547C;&#x53EB; SWITCH() &#x9032;&#x884C; context switch&#xFF0C;&#x5728; SWITCH() &#x5B8C;&#x6210;&#x4E4B;&#x5F8C;&#xFF0C;&#x4E26;&#x4E0D;&#x6703;&#x7E7C;&#x7E8C;&#x57F7;&#x884C; Run() &#x7684;&#x4E0B;&#x4E00;&#x884C;&#xFF0C;&#x56E0;&#x70BA;&#x63A7;&#x5236;&#x6B0A;&#x5DF2;&#x7D93;&#x50B3;&#x7D66; nextThread&#xFF0C;&#x4E0B;&#x4E00;&#x884C;&#x8981;&#x88AB;&#x57F7;&#x884C;&#x7684;&#x6307;&#x4EE4;&#x662F; nextThread &#x7684;&#x6307;&#x4EE4;&#xFF0C;&#x7576; CheckToBeDestroyed() &#x88AB;&#x57F7;&#x884C;&#xFF0C;&#x4EE3;&#x8868;&#x5DF2;&#x7D93;&#x53C8;&#x8F2A;&#x5230;&#x9019;&#x500B; thread &#x4F7F;&#x7528; CPU&#xFF0C;&#x9019;&#x4E2D;&#x9593;&#x53EF;&#x80FD;&#x5DF2;&#x7D93;&#x5728;&#x597D;&#x5E7E;&#x500B; thread &#x4E4B;&#x9593; context  switch &#x597D;&#x5E7E;&#x6B21;&#x4E86;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SWITCH(oldThread, nextThread);</span><br></pre></td></tr></table></figure><h3 id="Machine-Run-&#x200B;"><a href="#Machine-Run-&#x200B;" class="headerlink" title="Machine::Run()&#x200B;"></a>Machine::Run()&#x200B;</h3><p>Starting from &#x201C;machine/mipssim.cc Machine::Run()&#x200B;&#x201D; is called.</p><h4 id="1-void-Machine-Run"><a href="#1-void-Machine-Run" class="headerlink" title="1. void Machine::Run()"></a>1. void Machine::Run()</h4><p><strong>machine/mippsim.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">/* storage for decoded instruction */</span></span><br><span class="line">    Instruction *instr = <span class="keyword">new</span> Instruction; /</span><br><span class="line"></span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">    <span class="keyword">for</span> (;;) {</span><br><span class="line">        OneInstruction(instr);</span><br><span class="line">        kernel-&gt;interrupt-&gt;OneTick();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="2-void-Machine-OneInstruction-Instruction-instr"><a href="#2-void-Machine-OneInstruction-Instruction-instr" class="headerlink" title="2. void Machine::OneInstruction(Instruction *instr)"></a>2. void Machine::OneInstruction(Instruction *instr)</h4><p><strong>machine/mippsim.cc</strong></p><p>OneInstruction() &#x8B80;&#x53D6;&#x7576;&#x524D;&#x6307;&#x4EE4;&#xFF0C;&#x7D93;&#x904E; decode()&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5F97;&#x5230; rs / rt / rd / opCode&#xFF0C;&#x4F9D;&#x7167; opCode &#x6211;&#x5011;&#x5C0D; register[rs] &#x548C; register[rt] &#x9032;&#x884C;&#x5C0D;&#x61C9;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x4E26;&#x4E14;&#x5C07;&#x7D50;&#x679C;&#x5BEB;&#x5165; register[rd]&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::OneInstruction</span><span class="params">(Instruction *instr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> raw;</span><br><span class="line">    <span class="comment">/* Fetch instruction */</span> </span><br><span class="line">    <span class="keyword">if</span> (!ReadMem(registers[PCReg], <span class="number">4</span>, &amp;raw))</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">/* exception occurred */</span></span><br><span class="line"></span><br><span class="line">    instr-&gt;value = raw;</span><br><span class="line">    instr-&gt;Decode();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> pcAfter = registers[NextPCReg] + <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> rs, rt, imm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Execute the instruction */</span></span><br><span class="line">    <span class="keyword">switch</span> (instr-&gt;opCode) {</span><br><span class="line">        <span class="keyword">case</span> OP_ADD:</span><br><span class="line">        sum = registers[instr-&gt;rs] + registers[instr-&gt;rt];</span><br><span class="line">    registers[instr-&gt;rd] = sum;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/* Advance program counters */</span></span><br><span class="line">    registers[PrevPCReg] = registers[PCReg];</span><br><span class="line">    registers[PCReg] = registers[NextPCReg];</span><br><span class="line">    registers[NextPCReg] = pcAfter;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E00;&#x500B; Instruction &#x662F; 4 &#x500B; byte&#xFF0C;&#x6070;&#x597D;&#x662F;&#x4E00;&#x500B; unsigned int &#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x5011;&#x7528;&#x4E00;&#x500B; unsigned int &#x4F86;&#x5132;&#x5B58;&#x4ED6;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instruction</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Decode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">char</span> opCode; <span class="comment">/* Type of instruction */</span></span><br><span class="line">    <span class="keyword">char</span> rs, rt, rd; <span class="comment">/* Three registers from instruction */</span></span><br><span class="line">    <span class="keyword">int</span> extra; <span class="comment">/* Immediate or target or shamt field or offset */</span></span><br><span class="line">};</span><br></pre></td></tr></table></figure><h4 id="3-void-Instruction-Decode"><a href="#3-void-Instruction-Decode" class="headerlink" title="3. void Instruction::Decode()"></a>3. void Instruction::Decode()</h4><p><strong>machine/mippsim.cc</strong></p><p>&#x5C07;&#x6211;&#x5011;&#x5B58;&#x5728; unsigned int value &#x88E1;&#x7684; instruction decode&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x9019;&#x4E00;&#x5230;&#x6307;&#x4EE4;&#x7684; rs / rt / rd / opCode&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Instruction::Decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    OpInfo *opPtr;</span><br><span class="line">    </span><br><span class="line">    rs = (value &gt;&gt; <span class="number">21</span>) &amp; <span class="number">0x1f</span>;</span><br><span class="line">    rt = (value &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x1f</span>;</span><br><span class="line">    rd = (value &gt;&gt; <span class="number">11</span>) &amp; <span class="number">0x1f</span>;</span><br><span class="line">    opPtr = &amp;opTable[(value &gt;&gt; <span class="number">26</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">    opCode = opPtr-&gt;opCode;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Modify-pageTable-building"><a href="#Modify-pageTable-building" class="headerlink" title="Modify pageTable building"></a>Modify pageTable building</h3><p>&#x5728;&#x4FEE;&#x6539;&#x4E4B;&#x524D;&#xFF0C;&#x5728; addrSpace &#x7269;&#x4EF6;&#x5EFA;&#x7ACB;&#x6642;&#x5C31;&#x6703;&#x5EFA;&#x7ACB; pageTable&#xFF0C;&#x9810;&#x8A2D; NachOS &#x53EA;&#x6703;&#x904B;&#x884C;&#x4E00;&#x500B;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#xFF0C;&#x56E0;&#x6B64;&#x9019;&#x500B; pageTable &#x6DB5;&#x84CB;&#x6574;&#x500B; physical memory&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x9700;&#x8981;&#x505A;&#x4EFB;&#x4F55; virtualPage &#x548C; physicalPage &#x4E4B;&#x9593;&#x7684;&#x6620;&#x5C04;&#x3002; </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* userprog/addrspace.cc */</span></span><br><span class="line"></span><br><span class="line">AddrSpace::AddrSpace()</span><br><span class="line">{</span><br><span class="line">    pageTable = <span class="keyword">new</span> TranslationEntry[NumPhysPages];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NumPhysPages; i++) {</span><br><span class="line">        pageTable[i].virtualPage = i;</span><br><span class="line">        pageTable[i].physicalPage = i;</span><br><span class="line">        pageTable[i].valid = TRUE;</span><br><span class="line">        pageTable[i].use = FALSE;</span><br><span class="line">        pageTable[i].dirty = FALSE;</span><br><span class="line">        pageTable[i].readOnly = FALSE;  </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* zero out the entire address space */</span></span><br><span class="line">    bzero(kernel-&gt;machine-&gt;mainMemory, MemorySize);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4F46;&#x662F;&#x7576;&#x6211;&#x5011;&#x60F3;&#x8981;&#x540C;&#x6642;&#x57F7;&#x884C;&#x4E00;&#x500B;&#x4EE5;&#x4E0A;&#x7684;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x6642;&#xFF0C;&#x6703;&#x767C;&#x751F;&#x554F;&#x984C;&#xFF0C;&#x56E0;&#x70BA;&#x55AE;&#x4E00;&#x500B; thread &#x4E0D;&#x80FD;&#x64C1;&#x6709;&#x6574;&#x500B; physical memory &#x7684;&#x6240;&#x6709;&#x6B0A;&#xFF0C;&#x6BCF;&#x500B; thread &#x90FD;&#x53EA;&#x80FD;&#x64C1;&#x6709;&#x90E8;&#x4EFD;&#x7684; physical memory&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4FEE;&#x6539; pageTable &#x7684;&#x5EFA;&#x7ACB;&#xFF0C;&#x6BCF;&#x500B; thread &#x7684; pageTable &#x7684;&#x5C3A;&#x5BF8;&#x53EA;&#x5305;&#x542B;&#x4ED6;&#x6240;&#x9700;&#x8981;&#x7684;&#x90E8;&#x4EFD;&#x3002;&#x4F46;&#x662F;&#x5728;&#x6211;&#x5011;&#x5C07;&#x53EF;&#x57F7;&#x884C;&#x6A94; load &#x9032; memory &#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x5011;&#x4E26;&#x4E0D;&#x77E5;&#x9053;&#x9019;&#x500B;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x9700;&#x8981;&#x591A;&#x5C11;&#x7A7A;&#x9593;&#xFF0C; &#x56E0;&#x6B64;&#x6211;&#x5C07; pageTable &#x7684;&#x5EFA;&#x7ACB;&#x5EF6;&#x5F8C;&#xFF0C;&#x76F4;&#x5230;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x7684; header &#x8B80;&#x5165;&#xFF0C;&#x6211;&#x5011;&#x77E5;&#x9053;&#x9019;&#x500B;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x7684;&#x5927;&#x5C0F;&#x4E4B;&#x5F8C;&#xFF0C;&#x624D;&#x5EFA;&#x7ACB; pageTable&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* userprog/addrspace.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddrSpace::Load</span><span class="params">(<span class="keyword">char</span> *fileName)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ...</span><br><span class="line">    numPages = divRoundUp(size, PageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* setup pageTable after we know how much space the program needs */</span></span><br><span class="line">    pageTable = <span class="keyword">new</span> TranslationEntry[numPages];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPages; i++) {</span><br><span class="line">        pageTable[i].virtualPage = i;</span><br><span class="line">        pageTable[i].physicalPage = kernel-&gt;usedPhyPage-&gt;checkAndSet();</span><br><span class="line">        pageTable[i].valid = <span class="literal">true</span>;</span><br><span class="line">        pageTable[i].use = <span class="literal">false</span>;</span><br><span class="line">        pageTable[i].dirty = <span class="literal">false</span>;</span><br><span class="line">        pageTable[i].readOnly = <span class="literal">false</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* zero out this physical page */</span></span><br><span class="line">        bzero(kernel-&gt;machine-&gt;mainMemory + pageTable[i].physicalPage * </span><br><span class="line">              PageSize, PageSize);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x65B0;&#x589E; class UsedPhyPage &#x4F86;&#x7BA1;&#x7406; physical memory&#xFF0C;&#x4F7F;&#x7528;&#x4E00;&#x500B; array &#x7D00;&#x9304; physical page &#x662F;&#x5426;&#x5DF2;&#x7D93;&#x88AB;&#x4F7F;&#x7528;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/kernel.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsedPhyPage</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> *pages; <span class="comment">/* 0 for unused, 1 for used */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">checkAndSet</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>checkAndSet() &#x56DE;&#x50B3;&#x4E00;&#x500B;&#x672A;&#x4F7F;&#x7528;&#x7684; physical page &#x7684; pageNum&#xFF0C;&#x5982;&#x679C;&#x6574;&#x500B; physical memory &#x90FD;&#x5DF2;&#x7D93;&#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x56DE;&#x50B3; -1&#x3002;&#x4F7F;&#x7528;&#x9019;&#x500B;&#x65B9;&#x6CD5;&#x5EFA;&#x7ACB; pageTable&#xFF0C;&#x6BCF;&#x500B; thread &#x7BA1;&#x7406;&#x81EA;&#x5DF1;&#x7684; pageTable&#xFF0C;&#x4F7F;&#x7528;&#x5C6C;&#x65BC;&#x81EA;&#x5DF1;&#x7684; memory space &#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageTable[i].physicalPage = kernel-&gt;usedPhyPage-&gt;checkAndSet();</span><br></pre></td></tr></table></figure><h3 id="Modify-executable-file-loading"><a href="#Modify-executable-file-loading" class="headerlink" title="Modify executable file loading"></a>Modify executable file loading</h3><p>&#x7576;&#x6211;&#x5011;&#x8981;&#x57F7;&#x884C;&#x4E00;&#x500B;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x628A;&#x8A72;&#x6A94;&#x6848; load &#x9032; memory&#xFF0C;&#x4E00;&#x500B; NachOS &#x53EF;&#x57F7;&#x884C;&#x6A94;&#x5206;&#x6210;&#x56DB;&#x500B;&#x90E8;&#x4EFD;&#xFF0C;header / code / initData / readonlyData&#xFF0C;&#x6211;&#x5011;&#x9996;&#x5148;&#x8B80;&#x51FA; header &#x4F86;&#x7372;&#x53D6;&#x6A94;&#x6848;&#x7684; metadata&#xFF0C;&#x6839;&#x64DA;&#x6B64; metadata &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x77E5;&#x9053; code / initData / readonlyData &#x5728;&#x6A94;&#x6848;&#x4E2D;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x548C;&#x5927;&#x5C0F;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* coff2noff/noff.h */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">noffHeader</span> {</span></span><br><span class="line">   <span class="keyword">int</span> noffMagic; <span class="comment">/* should be NOFFMAGIC */</span></span><br><span class="line">   Segment code; <span class="comment">/* executable code segment */</span> </span><br><span class="line">   Segment initData; <span class="comment">/* initialized data segment */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RDATA</span></span><br><span class="line">   Segment readonlyData; <span class="comment">/* read only data */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   Segment uninitData; <span class="comment">/* uninitialized data segment, should be zero&apos;ed </span></span><br><span class="line"><span class="comment">                        * before use */</span></span><br><span class="line">} NoffHeader;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* coff2noff/noff.h */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">segment</span> {</span></span><br><span class="line">    <span class="keyword">int</span> virtualAddr; <span class="comment">/* location of segment in virt addr space */</span></span><br><span class="line">    <span class="keyword">int</span> inFileAddr; <span class="comment">/* location of segment in this file */</span></span><br><span class="line">    <span class="keyword">int</span> size; <span class="comment">/* size of segment */</span></span><br><span class="line">} Segment;</span><br></pre></td></tr></table></figure><p>&#x6211;&#x5011;&#x7684;&#x76EE;&#x6A19;&#x662F;&#x628A;&#x6BCF;&#x4E00;&#x6BB5; segment &#x5F9E;&#x4ED6;&#x5728;&#x6A94;&#x6848;&#x88E1;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;load &#x5230;&#x4ED6;&#x7684; virtualAddr &#x6240;&#x5C0D;&#x61C9;&#x7684; physicalAddr&#x3002;&#x672A;&#x4FEE;&#x6539;&#x524D;&#x56E0;&#x70BA;&#x6574;&#x500B; memory &#x53EA;&#x6709;&#x4E00;&#x500B; thread  &#x5728;&#x4F7F;&#x7528;&#xFF0C;&#x6240;&#x4EE5; physicalAddr &#x548C; virtualAddr &#x76F8;&#x540C;&#xFF0C;&#x4E26;&#x4E14;&#x56E0;&#x70BA;&#x9019;&#x500B;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x662F;&#x7B2C;&#x4E00;&#x500B;&#x4E5F;&#x662F;&#x552F;&#x4E00;&#x4E00;&#x500B; load &#x9032; memory &#x7684;&#x6A94;&#x6848;&#xFF0C;&#x56E0;&#x6B64;&#x6574;&#x500B;&#x7A7A;&#x9593;&#x662F;&#x9023;&#x7E8C;&#x4E14;&#x7121;&#x4EBA;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x628A;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x642C;&#x79FB;&#x5230; memory&#xFF0C;&#x6BCF;&#x4E00;&#x500B; segment &#x53EA;&#x8981;&#x642C;&#x79FB;&#x4E00;&#x6B21;&#x5373;&#x53EF;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* userprog/addrspace.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddrSpace::Load</span><span class="params">(<span class="keyword">char</span> *fileName)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">/* read header file */</span></span><br><span class="line">    OpenFile *executable = kernel-&gt;fileSystem-&gt;Open(fileName);</span><br><span class="line">    NoffHeader noffH;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size;</span><br><span class="line">    executable-&gt;ReadAt((<span class="keyword">char</span> *)&amp;noffH, <span class="keyword">sizeof</span>(noffH), <span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RDATA</span></span><br><span class="line">    size = noffH.code.size + noffH.readonlyData.size +  </span><br><span class="line">           noffH.initData.size + noffH.uninitData.size + UserStackSize;</span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    numPages = divRoundUp(size, PageSize);</span><br><span class="line">    size = numPages * PageSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (noffH.code.size &gt; <span class="number">0</span>) {</span><br><span class="line">        executable-&gt;ReadAt(</span><br><span class="line">                  &amp;(kernel-&gt;machine-&gt;mainMemory[noffH.code.virtualAddr]),</span><br><span class="line">                  noffH.code.size, noffH.code.inFileAddr);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (noffH.initData.size &gt; <span class="number">0</span>) {</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RDATA</span></span><br><span class="line">    <span class="keyword">if</span> (noffH.readonlyData.size &gt; <span class="number">0</span>) {</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5728;&#x4FEE;&#x6539;&#x4E4B;&#x5F8C;&#xFF0C;memory &#x7531;&#x591A;&#x500B; thread &#x5171;&#x7528;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5C07;&#x8CC7;&#x6599;&#x5F9E;&#x6A94;&#x6848; load &#x9032; memory &#x4E4B;&#x524D;&#xFF0C;&#x9700;&#x8981;&#x5148;&#x4F7F;&#x7528; Translate() &#x5C07; virtualAddr &#x8F49;&#x63DB;&#x6210;&#x5C0D;&#x61C9;&#x7684; physicalAddr&#x3002;&#x56E0;&#x70BA;&#x6709;&#x591A;&#x500B; thread &#x5171;&#x7528; memory&#xFF0C;memory &#x4E2D;&#x53EF;&#x80FD;&#x5DF2;&#x7D93;&#x6709;&#x4E9B; page &#x88AB;&#x5225;&#x7684; thread &#x4F54;&#x7528;&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#x8CC7;&#x6599;&#x9700;&#x8981;&#x4E00;&#x500B; page &#x4E00;&#x500B; page &#x7684; load &#x9032; memory &#xFF0C;&#x800C;&#x4E0D;&#x80FD;&#x6574;&#x6BB5; segment (&#x5305;&#x542B;&#x6578;&#x500B; page ) load &#x9032; memory &#x3002; &#x4EE5;&#x4E0B;&#x5716;&#x70BA;&#x4F8B;&#xFF0C;&#x9019;&#x500B;&#x6A94;&#x6848;&#x6709; 4 &#x500B; page&#xFF0C;&#x6BCF;&#x4E00;&#x500B; page &#x6709; 5 &#x500B; bytes&#xFF0C;virtal page &#x548C; physical page &#x7684;&#x5C0D;&#x61C9;&#x5982;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230; virtual page &#x662F;&#x9023;&#x7E8C;&#x7684; (0 , 1 , 2 , 3)&#xFF0C;&#x4F46; physical page &#x4E0D;&#x662F;&#x9023;&#x7E8C;&#x7684; (6 , 9 , 7 , 11)&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x5011;&#x5728;&#x642C;&#x79FB;&#x8CC7;&#x6599;&#x6642;&#xFF0C;&#x4E00;&#x6B21;&#x53EA;&#x80FD;&#x642C;&#x4E00;&#x500B; virtual page &#x7684;&#x8CC7;&#x6599;&#x3002;</p><p><img src="/2021/07/18/NachOS-MP2/image1.svg"></p><p>&#x5047;&#x8A2D;&#x6211;&#x5011;&#x6240;&#x8981;&#x642C;&#x79FB;&#x7684;&#x8CC7;&#x6599;&#x5F9E; virtual addr 8 - 17&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x4ED6;&#x5305;&#x542B;&#x4E86; 3 &#x500B; page&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x5011;&#x9700;&#x8981;&#x5206;&#x6210; 3 &#x6B21;&#x8F49;&#x79FB;&#x8CC7;&#x6599;&#xFF0C;&#x8CC7;&#x6599;&#x5F9E; inFile addr &#x642C;&#x79FB;&#x5230;&#x6211;&#x5011;&#x6307;&#x5B9A;&#x7684; virtual addr &#x5C0D;&#x61C9;&#x5230;&#x7684; physical addr&#xFF0C;virtual addr &#x53EF;&#x4EE5;&#x81EA;&#x8A02;&#xFF0C;&#x5728; NachOS &#x88E1; virtual addr &#x548C; inFile addr &#x662F;&#x76F8;&#x540C;&#x7684;&#x3002; </p><p><img src="/2021/07/18/NachOS-MP2/image2.svg"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* userprog/addrspace.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddrSpace::Load</span><span class="params">(<span class="keyword">char</span> *fileName)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> virtualAddr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> physicalAddr;</span><br><span class="line">    <span class="keyword">int</span> unReadSize;</span><br><span class="line">    <span class="keyword">int</span> chunkStart;</span><br><span class="line">    <span class="keyword">int</span> chunkSize;</span><br><span class="line">    <span class="keyword">int</span> inFilePosiotion;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (noffH.code.size &gt; <span class="number">0</span>) {</span><br><span class="line">        unReadSize = noffH.code.size;</span><br><span class="line">        chunkStart = noffH.code.virtualAddr;</span><br><span class="line">        chunkSize = <span class="number">0</span>;</span><br><span class="line">        inFilePosiotion = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* while still unread code */</span></span><br><span class="line">        <span class="keyword">while</span>(unReadSize &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">/* first chunk and last chunk might not be full */</span></span><br><span class="line">            chunkSize =  calChunkSize(chunkStart, unReadSize); </span><br><span class="line">            <span class="comment">/* mapping from virtual addr to physical addr */</span></span><br><span class="line">            Translate(chunkStart, &amp;physicalAddr, <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            executable-&gt;ReadAt(                     </span><br><span class="line">                  &amp;(kernel-&gt;machine-&gt;mainMemorymainMemory[physicalAddr]), </span><br><span class="line">                  chunkSize, noffH.code.inFileAddr + inFilePosiotion);</span><br><span class="line"></span><br><span class="line">            unReadSize = unReadSize - chunkSize;</span><br><span class="line">            chunkStart = chunkStart + chunkSize;</span><br><span class="line">            inFilePosiotion = inFilePosiotion + chunkSize;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (noffH.initData.size &gt; <span class="number">0</span>) {</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RDATA</span></span><br><span class="line">    <span class="keyword">if</span> (noffH.readonlyData.size &gt; <span class="number">0</span>) {</span><br><span class="line">        ...        </span><br><span class="line">    }</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><h5 id="How-Nachos-allocates-the-memory-space-for-new-thread-process"><a href="#How-Nachos-allocates-the-memory-space-for-new-thread-process" class="headerlink" title="How Nachos allocates the memory space for new thread(process)?**"></a>How Nachos allocates the memory space for new thread(process)?**</h5><h5 id="How-Nachos-initializes-the-memory-content-of-a-thread-process-including-loading-the-user-binary-code-in-the-memory"><a href="#How-Nachos-initializes-the-memory-content-of-a-thread-process-including-loading-the-user-binary-code-in-the-memory" class="headerlink" title="How Nachos initializes the memory content of a thread(process), including loading the user binary code in the memory?**"></a>How Nachos initializes the memory content of a thread(process), including loading the user binary code in the memory?**</h5><h5 id="How-Nachos-initializes-the-machine-status-registers-etc-before-running-a-thread-process"><a href="#How-Nachos-initializes-the-machine-status-registers-etc-before-running-a-thread-process" class="headerlink" title="How Nachos initializes the machine status (registers, etc) before running a thread(process)?**"></a>How Nachos initializes the machine status (registers, etc) before running a thread(process)?**</h5><p>&#x6BCF;&#x4E00;&#x500B;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x90FD;&#x9700;&#x8981; new &#x4E00;&#x500B;&#x65B0;&#x7684; thread &#x4F86;&#x57F7;&#x884C;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/kernel.cc&#x200B; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kernel::Exec</span><span class="params">(<span class="keyword">char</span>* name)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    t[threadNum] = <span class="keyword">new</span> Thread(name, threadNum);</span><br><span class="line">    t[threadNum]-&gt;space = <span class="keyword">new</span> AddrSpace();    </span><br><span class="line">    t[threadNum]-&gt;Fork((VoidFunctionPtr)&amp;ForkExecute,</span><br><span class="line">                       (<span class="keyword">void</span>*)t[threadNum]);</span><br><span class="line">    threadNum++;</span><br><span class="line">    <span class="keyword">return</span> threadNum<span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x9019;&#x500B; thread &#x6240;&#x8981;&#x57F7;&#x884C;&#x7684; function &#x548C;&#x4ED6;&#x6240;&#x9700;&#x8981;&#x7684; argument &#x4E1F;&#x9032; StackAllocate&#xFF0C;&#x6B64;&#x6642;&#x6211;&#x5011;&#x8981;&#x57F7;&#x884C;&#x7684; function &#x662F; ForkExecute&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/thread.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::Fork</span><span class="params">(VoidFunctionPtr func, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Interrupt *interrupt = kernel-&gt;interrupt;</span><br><span class="line">    Scheduler *scheduler = kernel-&gt;scheduler;</span><br><span class="line">    IntStatus oldLevel;</span><br><span class="line">    </span><br><span class="line">    StackAllocate(func, arg);</span><br><span class="line"></span><br><span class="line">    oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    scheduler-&gt;ReadyToRun(<span class="keyword">this</span>);</span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">}   </span><br></pre></td></tr></table></figure><p>&#x5EFA;&#x7ACB;&#x548C;&#x521D;&#x59CB;&#x5316;&#x9019;&#x500B; thread &#x7684; execution stack&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/thread.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::StackAllocate</span> <span class="params">(VoidFunctionPtr func, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">stack</span> = (<span class="keyword">int</span> *) AllocBoundedArray(StackSize * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    ...</span><br><span class="line">    machineState[PCState] = (<span class="keyword">void</span>*)ThreadRoot;</span><br><span class="line">    machineState[StartupPCState] = (<span class="keyword">void</span>*)ThreadBegin;</span><br><span class="line">    machineState[InitialPCState] = (<span class="keyword">void</span>*)func;</span><br><span class="line">    machineState[InitialArgState] = (<span class="keyword">void</span>*)arg;</span><br><span class="line">    machineState[WhenDonePCState] = (<span class="keyword">void</span>*)ThreadFinish;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>ForkExecute &#x662F;&#x6211;&#x5011;&#x60F3;&#x57F7;&#x884C;&#x7684; func&#xFF0C;&#x5C07;&#x6211;&#x5011;&#x6307;&#x5B9A;&#x7684;&#x53EF;&#x57F7;&#x884C;&#x6A94; load &#x9032; memory&#xFF0C;&#x7136;&#x5F8C;&#x57F7;&#x884C;&#x4ED6;&#x3002;&#x6B64;&#x6642;&#x5206;&#x914D;&#x7A7A;&#x9593;&#x4E26;&#x4E14;&#x5EFA;&#x7ACB; pageTable&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/kernel.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ForkExecute</span><span class="params">(Thread *t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">/* allocate pageTable for this process */</span></span><br><span class="line">    <span class="keyword">if</span> ( !t-&gt;space-&gt;Load(t-&gt;getName()) ) {</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">/* executable not found */</span></span><br><span class="line">    }</span><br><span class="line">    t-&gt;space-&gt;Execute(t-&gt;getName());</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5C07;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x8B80;&#x5165; memory&#x3002;&#x9996;&#x5148;&#x8B80;&#x5165;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x7684; header&#xFF0C;&#x8B80;&#x53D6; header &#x4E4B;&#x5F8C;&#x5C31;&#x80FD;&#x77E5;&#x9053;&#x6A94;&#x6848;&#x5927;&#x5C0F;&#xFF0C;&#x5EFA;&#x7ACB; pageTable&#x3002;&#x5EFA;&#x7ACB; pageTable &#x6642;&#x6703;&#x628A;&#x8A72; thread &#x5206;&#x914D;&#x5230;&#x7684; physical page &#x6E05;&#x7A7A;&#x3002;&#x6709;&#x4E86; pageTable &#x4E4B;&#x5F8C;&#x5C31;&#x80FD;&#x628A;&#x53EF;&#x57F7;&#x884C;&#x6A94;&#x7684;&#x5176;&#x4ED6;&#x90E8;&#x4EFD; load &#x9032; memory &#x4E86;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t-&gt;space-&gt;Load(t-&gt;getName())</span><br></pre></td></tr></table></figure><h5 id="How-Nachos-creates-and-manages-the-page-table"><a href="#How-Nachos-creates-and-manages-the-page-table" class="headerlink" title="How Nachos creates and manages the page table?**"></a>How Nachos creates and manages the page table?**</h5><h5 id="How-Nachos-translates-address"><a href="#How-Nachos-translates-address" class="headerlink" title="How Nachos translates address?**"></a>How Nachos translates address?**</h5><p>class UsedPhyPage &#x53EF;&#x4EE5;&#x5E6B;&#x52A9;&#x5EFA;&#x7ACB;&#x548C;&#x7BA1;&#x7406; physical memory&#xFF0C;&#x5728;&#x5B8C;&#x6210; pageTable &#x4E4B;&#x5F8C;&#x4F7F;&#x7528; Translate &#x5373;&#x53EF;&#x5C07; virtual addr &#x8F49;&#x63DB;&#x70BA; physical addr&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* machine/translate.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function">ExceptionType</span></span><br><span class="line"><span class="function"><span class="title">Machine::Translate</span><span class="params">(<span class="keyword">int</span> virtAddr, <span class="keyword">int</span>* physAddr, <span class="keyword">int</span> size, <span class="keyword">bool</span> writing)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> vpn, offset;</span><br><span class="line">    TranslationEntry *entry;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> pageFrame;</span><br><span class="line"></span><br><span class="line">    vpn = (<span class="keyword">unsigned</span>) virtAddr / PageSize; <span class="comment">/* virtual page number */</span></span><br><span class="line">    offset = (<span class="keyword">unsigned</span>) virtAddr % PageSize; <span class="comment">/* offset within the page */</span></span><br><span class="line">    ...</span><br><span class="line">    entry = &amp;pageTable[vpn]; <span class="comment">/* translate using pageTable */</span></span><br><span class="line">    ...</span><br><span class="line">    pageFrame = entry-&gt;physicalPage;</span><br><span class="line">    ...</span><br><span class="line">    *physAddr = pageFrame * PageSize + offset;</span><br><span class="line">    <span class="keyword">return</span> NoException;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TranslationEntry</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> virtualPage;</span><br><span class="line">    <span class="keyword">int</span> physicalPage;</span><br><span class="line">    ...</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h5 id="Which-object&#x200B;-in-Nachos-acts-the-role-of-&#x200B;-process-control-block"><a href="#Which-object&#x200B;-in-Nachos-acts-the-role-of-&#x200B;-process-control-block" class="headerlink" title="Which object&#x200B; in Nachos acts the role of &#x200B; process control block?**"></a>Which object&#x200B; in Nachos acts the role of &#x200B; process control block?**</h5><p>PCB (process control block) &#x5305;&#x542B;&#x548C; process / thread &#x76F8;&#x95DC;&#x7684;&#x4E00;&#x4E9B;&#x8CC7;&#x8A0A;&#xFF0C;&#x4F8B;&#x5982; :</p><ul><li>process state</li><li>program counter</li><li>CPU register</li><li>CPU scheduling info (e.g. priority)</li><li>memory management info (e.g. base / limit register)</li><li>and more</li></ul><p>class Thread &#x6709;&#x5F88;&#x591A; PCB &#x61C9;&#x8A72;&#x5305;&#x542B;&#x7684;&#x8CC7;&#x8A0A;&#xFF0C;&#x4F8B;&#x5982; :</p><ul><li>process state &#x2013;&gt; status</li><li>memory management &#x2013;&gt; space</li><li>CPU register &#x2013;&gt; machineState</li><li>and more</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span> {</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *stackTop; <span class="comment">/* the current stack pointer */</span></span><br><span class="line">    <span class="keyword">void</span> *machineState[MachineStateSize]; <span class="comment">/* all registers except for </span></span><br><span class="line"><span class="comment">                                           * stackTop */</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> *<span class="built_in">stack</span>; <span class="comment">/* bottom of the stack */</span> </span><br><span class="line">    ThreadStatus status; <span class="comment">/* ready, running or blocked */</span></span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">int</span> userRegisters[NumTotalRegs]; <span class="comment">/* user-level CPU register state */</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    AddrSpace *space; <span class="comment">/* user code this thread is running */</span></span><br><span class="line">    ...</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h5 id="When-and-how-does-a-thread-get-added-into-the-ReadyToRun-queue-of-Nachos-CPU-scheduler"><a href="#When-and-how-does-a-thread-get-added-into-the-ReadyToRun-queue-of-Nachos-CPU-scheduler" class="headerlink" title="When and how does a thread get added into the ReadyToRun queue of Nachos CPU scheduler?"></a>When and how does a thread get added into the ReadyToRun queue of Nachos CPU scheduler?</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/thread.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::Fork</span><span class="params">(VoidFunctionPtr func, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Interrupt *interrupt = kernel-&gt;interrupt;</span><br><span class="line">    Scheduler *scheduler = kernel-&gt;scheduler;</span><br><span class="line">    IntStatus oldLevel;</span><br><span class="line">    </span><br><span class="line">    StackAllocate(func, arg);</span><br><span class="line"></span><br><span class="line">    oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    scheduler-&gt;ReadyToRun(<span class="keyword">this</span>);</span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">}   </span><br></pre></td></tr></table></figure><p>&#x7576;&#x4E00;&#x500B; thread &#x5DF2;&#x7D93;&#x5EFA;&#x7ACB;&#x597D;&#x4ED6;&#x7684; stack&#xFF0C;&#x5C07;&#x4ED6;&#x52A0;&#x5165; readyList&#xFF0C;&#x7576; scheduler &#x9700;&#x8981;&#x5B89;&#x6392; thread &#x4F86;&#x57F7;&#x884C;&#x7684;&#x6642;&#x5019;&#xFF0C;&#x5C31;&#x5F9E; readyList dequeue &#x4E00;&#x500B; thread &#x4F86;&#x57F7;&#x884C;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler-&gt;ReadyToRun(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] shawn2000100/10810CS_342301_OperatingSystem<br><a href="https://github.com/shawn2000100/10810CS_342301_OperatingSystem">https://github.com/shawn2000100/10810CS_342301_OperatingSystem</a><br>[2] OS::NachOS::HW1<br><a href="http://blog.terrynini.tw/tw/OS-NachOS-HW1/">http://blog.terrynini.tw/tw/OS-NachOS-HW1/</a><br>[3] Nachos Project 3<br><a href="https://www.csie.ntu.edu.tw/~b96201044/Project3_Slide_2010.pdf">https://www.csie.ntu.edu.tw/~b96201044/Project3_Slide_2010.pdf</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;README&quot;&gt;&lt;a href=&quot;#README&quot; class=&quot;headerlink&quot; title=&quot;README&quot;&gt;&lt;/a&gt;README&lt;/h2&gt;&lt;p&gt;&amp;#x9019;&amp;#x662F;&amp;#x6E05;&amp;#x5927;&amp;#x5468;&amp;#x5FD7;&amp;#x906</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NachOS MP1</title>
    <link href="http://example.com/2021/07/14/NachOS-MP1/"/>
    <id>http://example.com/2021/07/14/NachOS-MP1/</id>
    <published>2021-07-13T16:57:48.000Z</published>
    <updated>2021-08-09T11:40:08.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="README"><a href="#README" class="headerlink" title="README"></a>README</h2><p>&#x9019;&#x662F;&#x6E05;&#x5927;&#x5468;&#x5FD7;&#x9060;&#x6559;&#x6388;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x7684;&#x4F5C;&#x696D;&#xFF0C;&#x6211;&#x5728;&#x7DB2;&#x8DEF;&#x4E0A;&#x627E;&#x5230;&#x9019;&#x4EFD;&#x4F5C;&#x696D;&#x7684;&#x76F8;&#x95DC;&#x8CC7;&#x6599;&#xFF0C;&#x6211;&#x4E26;&#x6C92;&#x6709;&#x4E0A;&#x904E;&#x9019;&#x9580;&#x8AB2;&#xFF0C;&#x9019;&#x53EA;&#x662F;&#x6211;&#x7684;&#x81EA;&#x5B78;&#x7DF4;&#x7FD2;&#xFF0C;&#x6211;&#x7121;&#x6CD5;&#x80AF;&#x5B9A;&#x6211;&#x7684;&#x5831;&#x544A;&#x548C;&#x5BE6;&#x4F5C;&#x7684;&#x6B63;&#x78BA;&#x6027;&#xFF0C;&#x6211;&#x7684;&#x5BE6;&#x4F5C;&#x5728;<a href="https://github.com/WendyUsingGithub/NTHU_OS_NachOS/tree/main/NachOS-4.0_MP1">&#x9019;&#x88E1;</a>&#xFF0C;&#x6211;&#x7684; shell script &#x5728;<a href="https://github.com/WendyUsingGithub/NTHU_OS_NachOS/blob/main/NachOS-4.0_MP1/code/test/sh.sh">&#x9019;&#x88E1;</a>&#x3002;</p><h2 id="Trace-code"><a href="#Trace-code" class="headerlink" title="Trace code"></a>Trace code</h2><h3 id="SC-Halt"><a href="#SC-Halt" class="headerlink" title="SC_Halt"></a>SC_Halt</h3><p>Trace the SC_Halt system call to understand the implementation of a system call. (Sample code : halt.c)</p><h4 id="void-Halt"><a href="#void-Halt" class="headerlink" title="void Halt();"></a>void Halt();</h4><p><strong>userprog/syscall.h</strong></p><p>trace code &#x7684;&#x76EE;&#x6A19;&#x662F; syscall.h &#x7684; Halt()&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC_Halt 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Halt</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* test/start.s */</span><br><span class="line"></span><br><span class="line">.globl Halt</span><br><span class="line">.entHalt</span><br><span class="line">Halt:</span><br><span class="line">addiu $2,$0,SC_Halt</span><br><span class="line">syscall</span><br><span class="line">j$31</span><br><span class="line">.end Halt</span><br></pre></td></tr></table></figure><p>&#x57F7;&#x884C;&#x6307;&#x4EE4; addiu&#xFF0C;SC_Halt &#x662F;&#x5B9A;&#x7FA9;&#x5728; syscall.h &#x7684;&#x5E38;&#x6578;&#xFF0C;MIPS &#x67B6;&#x69CB;&#x7684; register(0) &#x6C38;&#x9060;&#x662F; 0&#xFF0C;&#x5C07;&#x5169;&#x8005;&#x76F8;&#x52A0;&#x5F8C;&#x5B58;&#x5230; register(2) &#x4E2D;&#xFF0C;&#x5373;&#x5C07; SC_Halt &#x7684;&#x503C; assign &#x7D66; register(2)&#x3002;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addiu $2,$0,SC_Halt</span><br></pre></td></tr></table></figure><p>&#x57F7;&#x884C;&#x6307;&#x4EE4; syscall&#xFF0C;&#x9032;&#x5165;Exception handler&#x3002;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syscall</span><br></pre></td></tr></table></figure><p>&#x5728; machine.h &#x5B9A;&#x7FA9;&#x5E38;&#x6578; RetAddrReg &#x7684;&#x503C;&#x662F; 31&#x3002;&#x8DF3;&#x5230; register(31) &#x6240;&#x5132;&#x5B58;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8868;&#x793A;&#x56DE;&#x5230; frame &#x7684;&#x4E0A;&#x4E00;&#x5C64;&#x3002;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j$31</span><br></pre></td></tr></table></figure><h4 id="1-void-Machine-Run"><a href="#1-void-Machine-Run" class="headerlink" title="1. void Machine::Run()"></a>1. void Machine::Run()</h4><p><strong>machine/mipssim.cc</strong> </p><p>&#x7A0B;&#x5F0F;&#x958B;&#x59CB;&#x57F7;&#x884C;&#xFF0C;kernel &#x547C;&#x53EB; Machine::Run()&#xFF0C;Machine::Run() &#x5728;&#x7121;&#x7AAE;&#x8FF4;&#x5708;&#x547C;&#x53EB; OneInstruction()&#xFF0C;&#x4E0D;&#x505C;&#x7684;&#x57F7;&#x884C;&#x6307;&#x4EE4;&#x3002;mipssim.h &#x5B9A;&#x7FA9;&#x4E86; MIPS &#x67B6;&#x69CB;&#x652F;&#x63F4;&#x7684; 63 &#x500B;operation&#xFF0C;OneInstruction() &#x8CA0;&#x8CAC;&#x8655;&#x7406;&#x9019; 63 &#x500B; operation &#x7D44;&#x6210;&#x7684;&#x6307;&#x4EE4;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(;;) </span><br><span class="line">    {</span><br><span class="line">        OneInstruction(instr);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="2-void-Machine-OneInstruction-Instruction-instr"><a href="#2-void-Machine-OneInstruction-Instruction-instr" class="headerlink" title="2. void Machine::OneInstruction(Instruction *instr)"></a>2. void Machine::OneInstruction(Instruction *instr)</h4><p><strong>machine/mipssim.cc</strong></p><p>machine.h &#x5B9A;&#x7FA9;&#x5E38;&#x6578; PCReg &#x503C; 34&#xFF0C;register(34) &#x653E;&#x6709;&#x7576;&#x524D;&#x6307;&#x4EE4;&#x7684;&#x4F4D;&#x5740;&#x3002;&#x4E0D;&#x540C;&#x6307;&#x4EE4;&#x9032;&#x5165;&#x4E0D;&#x540C;&#x7684; switch case&#xFF0C;&#x7576;&#x6307;&#x4EE4;&#x662F; addiu&#xFF0C;&#x4E0D;&#x6703;&#x767C;&#x751F; interrupt&#xFF0C;&#x4F46;&#x7576;&#x6307;&#x4EE4;&#x662F; syscall&#xFF0C;interupt &#x767C;&#x751F;&#xFF0C;&#x547C;&#x53EB; RaiseException()&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Void <span class="title">Machine::OneInstruction</span><span class="params">(Instruction *instr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> raw;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* fetch instruction */</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadMem(registers[PCReg], <span class="number">4</span>, &amp;raw)) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    instr-&gt;value = raw;</span><br><span class="line">    instr-&gt;Decode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (instr-&gt;opCode) {</span><br><span class="line">    <span class="keyword">case</span> OP_SYSCALL:</span><br><span class="line">        RaiseException(SyscallException, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>NachOS &#x5B9A;&#x7FA9;&#x4E86; 9 &#x7A2E; exception &#x985E;&#x578B;&#xFF0C;&#x5728; case OP_SYSCALL &#x767C;&#x751F;&#x7684;&#x662F; SyscallException &#x985E;&#x578B;&#x7684; exception&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* machine/machine.h */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ExceptionType</span> {</span> </span><br><span class="line">    NoException,           </span><br><span class="line">    SyscallException,      </span><br><span class="line">    PageFaultException,   </span><br><span class="line">    ReadOnlyException,     </span><br><span class="line">    BusErrorException,     </span><br><span class="line">    AddressErrorException, </span><br><span class="line">    OverflowException,     </span><br><span class="line">    IllegalInstrException, </span><br><span class="line">    NumExceptionTypes</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h4 id="3-void-Machine-RaiseException-ExceptionType-which-int-badVAddr"><a href="#3-void-Machine-RaiseException-ExceptionType-which-int-badVAddr" class="headerlink" title="3. void Machine::RaiseException(ExceptionType which, int badVAddr)"></a>3. void Machine::RaiseException(ExceptionType which, int badVAddr)</h4><p><strong>machine/machine.cc</strong></p><p>&#x628A;&#x7A0B;&#x5F0F;&#x5F9E; user mode &#x6539;&#x6210; kernel mode&#xFF0C;&#x547C;&#x53EB; ExceptionHandler&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::RaiseException</span><span class="params">(ExceptionType which, <span class="keyword">int</span> badVAddr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="4-void-ExceptionHandler-ExceptionType-which"><a href="#4-void-ExceptionHandler-ExceptionType-which" class="headerlink" title="4. void ExceptionHandler(ExceptionType which)"></a>4. void ExceptionHandler(ExceptionType which)</h4><p><strong>userprog/exception .cc</strong></p><p>ExceptionHandler() &#x8B80;&#x53D6; register(2) &#x7684;&#x503C;&#xFF0C;&#x5148;&#x524D;&#x5DF2;&#x7D93;&#x628A; SC_Halt &#x7684;&#x503C; assign &#x7D66;register(2)&#xFF0C;&#x56E0;&#x6B64;&#x9032;&#x5165; SC_Halt &#x7684; switch case&#xFF0C;&#x547C;&#x53EB; SysHalt()&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExceptionHandler</span><span class="params">(ExceptionType which)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> type = kernel-&gt;machine-&gt;ReadRegister(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">switch</span>(type) {</span><br><span class="line">    <span class="keyword">case</span> SC_Halt:</span><br><span class="line">        SysHalt(); </span><br><span class="line">        <span class="keyword">break</span>;   </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="5-void-SysHalt"><a href="#5-void-SysHalt" class="headerlink" title="5. void SysHalt()"></a>5. void SysHalt()</h4><p><strong>userprog/ksyscall.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysHalt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    kernel-&gt;interrupt-&gt;Halt();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="6-void-Interrupt-Halt"><a href="#6-void-Interrupt-Halt" class="headerlink" title="6. void Interrupt::Halt()"></a>6. void Interrupt::Halt()</h4><p><strong>machine/interrupt.cc</strong></p><p>&#x5C07;&#x7269;&#x4EF6; kernel &#x6240;&#x4F54;&#x7528;&#x7684;&#x8A18;&#x61B6;&#x9AD4;&#x91CB;&#x653E;&#xFF0C;&#x5373;&#x95DC;&#x6A5F;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Interrupt::Halt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Machine halting!\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;This is halt\n&quot;</span>;</span><br><span class="line">    kernel-&gt;stats-&gt;Print();</span><br><span class="line">    <span class="keyword">delete</span> kernel; </span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="SC-Create"><a href="#SC-Create" class="headerlink" title="SC_Create"></a>SC_Create</h3><p>Trace the SC_Create system call to understand the basic operations and data structure in a file system. (Sample code : createFile.c)</p><h4 id="void-Create"><a href="#void-Create" class="headerlink" title="void Create();"></a>void Create();</h4><p><strong>userprog/syscall.h</strong></p><p>trace code &#x7684;&#x76EE;&#x6A19;&#x662F; syscall.h &#x7684; Create()&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC_Create4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Create</span><span class="params">(<span class="keyword">char</span> *name)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* test/start.s */</span><br><span class="line"></span><br><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line"></span><br><span class="line">.globl Create</span><br><span class="line">.entCreate</span><br><span class="line">Create:</span><br><span class="line">addiu $2,$0,SC_Create</span><br><span class="line">syscall</span><br><span class="line">j$31</span><br><span class="line">.end Create</span><br></pre></td></tr></table></figure><h4 id="1-void-Machine-OneInstruction-Instruction-instr"><a href="#1-void-Machine-OneInstruction-Instruction-instr" class="headerlink" title="1. void Machine::OneInstruction(Instruction *instr)"></a>1. void Machine::OneInstruction(Instruction *instr)</h4><p><strong>machine/mipssim</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;machine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mipssim.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::OneInstruction</span><span class="params">(Instruction *instr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span> (instr-&gt;opCode) {</span><br><span class="line">    <span class="keyword">case</span> OP_SYSCALL:</span><br><span class="line">       RaiseException(SyscallException, <span class="number">0</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="2-void-Machine-RaiseException-ExceptionType-which-int-badVAddr"><a href="#2-void-Machine-RaiseException-ExceptionType-which-int-badVAddr" class="headerlink" title="2. void Machine::RaiseException(ExceptionType which, int badVAddr)"></a>2. void Machine::RaiseException(ExceptionType which, int badVAddr)</h4><p><strong>machine/machine.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;machine.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::RaiseException</span><span class="params">(ExceptionType which, <span class="keyword">int</span> badVAddr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="3-void-ExceptionHandler-ExceptionType-which"><a href="#3-void-ExceptionHandler-ExceptionType-which" class="headerlink" title="3. void ExceptionHandler(ExceptionType which)"></a>3. void ExceptionHandler(ExceptionType which)</h4><p><strong>userprog/exception.cc</strong></p><p>&#x5F9E; register(4) &#x8B80;&#x51FA;&#x547C;&#x53EB; Create &#x6642;&#x50B3;&#x5165;&#x7684;&#x53C3;&#x6578;&#xFF0C;&#x5373; filename &#x7684;&#x4F4D;&#x7F6E;&#x3002;Syscreate &#x56DE;&#x50B3;&#x662F;&#x5426;&#x6709;&#x6210;&#x529F;&#x7684; create file&#xFF0C;&#x6210;&#x529F;&#x56DE;&#x50B3; 1&#xFF0C;&#x5931;&#x6557;&#x56DE;&#x50B3; 0&#x3002;&#x5B8C;&#x6210; SysCreate &#x5F8C;&#x5FC5;&#x9808;&#x4FEE;&#x6539; PCReg &#x8B93; PCReg &#x6307;&#x5411;&#x4E0B;&#x4E00;&#x500B;&#x6307;&#x4EE4;&#xFF0C;&#x5982;&#x679C;&#x6C92;&#x6709;&#x52A0;&#x4E0A;&#x9019;&#x4E00;&#x884C;&#xFF0C;&#x7A0B;&#x5F0F;&#x6703;&#x4E0D;&#x505C;&#x7684;&#x57F7;&#x884C;&#x540C;&#x4E00;&#x9053;&#x6307;&#x4EE4;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;syscall.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ksyscall.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExceptionHandler</span><span class="params">(ExceptionType which)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">   <span class="keyword">int</span> type = kernel-&gt;machine-&gt;ReadRegister(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span>(type) </span><br><span class="line">   {</span><br><span class="line">       <span class="keyword">case</span> SC_Create:</span><br><span class="line">          val = kernel-&gt;machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">          <span class="keyword">char</span> *filename = &amp;(kernel-&gt;machine-&gt;mainMemory[val]);</span><br><span class="line">          status = SysCreate(filename);</span><br><span class="line">          <span class="keyword">if</span>(status != <span class="number">-1</span>) status = <span class="number">1</span>;</span><br><span class="line">          kernel-&gt;machine-&gt;WriteRegister(<span class="number">2</span>, (<span class="keyword">int</span>) status);</span><br><span class="line"></span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PrevPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg));</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg) + <span class="number">4</span>);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(NextPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg)+<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    ASSERTNOTREACHED();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="4-int-SysCreate-char-filename"><a href="#4-int-SysCreate-char-filename" class="headerlink" title="4. int SysCreate(char *filename)"></a>4. int SysCreate(char *filename)</h4><p><strong>userprog/ksyscall.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Interrupt::CreateFile</span><span class="params">(<span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> kernel-&gt;CreateFile(filename);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="5-int-Interrupt-CreateFile-char-filename"><a href="#5-int-Interrupt-CreateFile-char-filename" class="headerlink" title="5. int Interrupt::CreateFile(char *filename)"></a>5. int Interrupt::CreateFile(char *filename)</h4><p><strong>machine/interrupt.cc</strong></p><p>class FileSystem &#x662F; NachOS &#x7684; file system API&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kernel::CreateFile</span><span class="params">(<span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> fileSystem-&gt;Create(filename);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5728; filesys.cc &#x7684;&#x958B;&#x982D;&#x6709;&#x4E00;&#x6BB5; #ifdef #else&#xFF0C;&#x6709;&#x6C92;&#x6709; #define FILESYS_STUB &#x4F7F;&#x7528;&#x7684;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#xFF0C;&#x5982;&#x679C;&#x6709; #define FILESYS_STUB&#xFF0C;&#x4E26;&#x4E0D;&#x662F;&#x4F7F;&#x7528;&#x771F;&#x6B63;&#x7684; NachOS &#x6A94;&#x6848;&#x7CFB;&#x7D71;&#xFF0C;&#x53EA;&#x662F;&#x501F;&#x7528;&#x4E86; linux &#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#xFF0C;&#x5982;&#x679C;&#x6C92;&#x6709; #define FILESYS_STUB&#xFF0C;&#x624D;&#x662F;&#x4F7F;&#x7528; NachOS &#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FILESYS_STUB</span></span><br></pre></td></tr></table></figure><p>Makefile &#x88E1;&#x6709;&#x4E0B; DFILESYS_STUB &#x7684; flag&#xFF0C;&#x4EE3;&#x8868;&#x76EE;&#x524D; NachOS &#x53EA;&#x662F;&#x501F;&#x7528;&#x4E86; linux &#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#x3002;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFINES =  -DFILESYS_STUB -DRDATA -DSIM_FIX</span><br></pre></td></tr></table></figure><h4 id="6-bool-Filesystem-Create-char-name"><a href="#6-bool-Filesystem-Create-char-name" class="headerlink" title="6. bool Filesystem::Create(char *name)"></a>6. bool Filesystem::Create(char *name)</h4><p><strong>filesys/filesys.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FILESYS_STUB </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystem</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Create</span><span class="params">(<span class="keyword">char</span> *name)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> fileDescriptor = OpenForWrite(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fileDescriptor == <span class="number">-1</span>) <span class="keyword">return</span> FALSE;</span><br><span class="line">Close(fileDescriptor); </span><br><span class="line"><span class="keyword">return</span> TRUE; </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="7-int-OpenForWrite-char-name"><a href="#7-int-OpenForWrite-char-name" class="headerlink" title="7. int OpenForWrite(char *name)"></a>7. int OpenForWrite(char *name)</h4><p><strong>lib/sysdep.c</strong></p><p>&#x76EE;&#x524D;&#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#x662F;&#x501F;&#x7528; linux &#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#xFF0C;Create &#x7684;&#x5BE6;&#x4F5C;&#x662F;&#x547C;&#x53EB;&#x4E86; linux &#x63D0;&#x4F9B;&#x7684; open()&#xFF0C;open() &#x5931;&#x6557;&#x56DE;&#x50B3; -1&#xFF0C;&#x6210;&#x529F;&#x56DE;&#x50B3;&#x975E;&#x8CA0;&#x6574;&#x6578;&#x3002;NachOS &#x76EE;&#x524D;&#x6C92;&#x6709;&#x771F;&#x6B63;&#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x5011;&#x8981;&#x4F7F;&#x7528;&#x771F;&#x6B63;&#x7684; NachOS &#x6A94;&#x6848;&#x7CFB;&#x7D71;&#xFF0C;&#x5C31;&#x8981;&#x5728; File System &#x7684; API &#x4E4B;&#x4E0B;&#xFF0C;&#x81EA;&#x5DF1;&#x5BEB;&#x4E00;&#x500B;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/file.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OpenForWrite</span><span class="params">(<span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> fd = open(name, O_RDWR|O_CREAT|O_TRUNC, <span class="number">0666</span>);</span><br><span class="line">    ASSERT(fd &gt;= <span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="PrintInt"><a href="#PrintInt" class="headerlink" title="PrintInt"></a>PrintInt</h3><p>Trace the SC_PrintInt system call to understand how NachOS implements asynchronized I/O using CallBack functions and register schedule events. (Sample code : add.c)</p><h4 id="void-PrintInt-int-number"><a href="#void-PrintInt-int-number" class="headerlink" title="void PrintInt(int number);"></a>void PrintInt(int number);</h4><p><strong>userprog/syscall.h</strong></p><p>trace code &#x7684;&#x76EE;&#x6A19;&#x662F; syscall.h &#x7684; PrintInt()&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC_PrintInt 16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintInt</span><span class="params">(<span class="keyword">int</span> number)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* test/start.s */</span><br><span class="line"></span><br><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line"></span><br><span class="line">.globl PrintInt</span><br><span class="line">.entPrintInt</span><br><span class="line">PrintInt:</span><br><span class="line">addiu $2,$0,SC_PrintInt</span><br><span class="line">syscall</span><br><span class="line">j$31</span><br><span class="line">.end PrintInt</span><br></pre></td></tr></table></figure><h4 id="1-void-Machine-OneInstruction-Instruction-instr-1"><a href="#1-void-Machine-OneInstruction-Instruction-instr-1" class="headerlink" title="1. void Machine::OneInstruction(Instruction *instr)"></a>1. void Machine::OneInstruction(Instruction *instr)</h4><p><strong>machine/mipssim</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::OneInstruction</span><span class="params">(Instruction *instr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> raw;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ReadMem(registers[PCReg], <span class="number">4</span>, &amp;raw))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    instr-&gt;value = raw;</span><br><span class="line">    instr-&gt;Decode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (instr-&gt;opCode) {</span><br><span class="line">    <span class="keyword">case</span> OP_SYSCALL:</span><br><span class="line">        RaiseException(SyscallException, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="2-void-Machine-RaiseException-ExceptionType-which-int-badVAddr-1"><a href="#2-void-Machine-RaiseException-ExceptionType-which-int-badVAddr-1" class="headerlink" title="2. void Machine::RaiseException(ExceptionType which, int badVAddr)"></a>2. void Machine::RaiseException(ExceptionType which, int badVAddr)</h4><p><strong>machine/machine.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::RaiseException</span><span class="params">(ExceptionType which, <span class="keyword">int</span> badVAddr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="3-void-ExceptionHandler-ExceptionType-which-1"><a href="#3-void-ExceptionHandler-ExceptionType-which-1" class="headerlink" title="3. void ExceptionHandler(ExceptionType which)"></a>3. void ExceptionHandler(ExceptionType which)</h4><p><strong>userprog/exception .cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;syscall.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ksyscall.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExceptionHandler</span><span class="params">(ExceptionType which)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">   <span class="keyword">int</span> type = kernel-&gt;machine-&gt;ReadRegister(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span>(type) </span><br><span class="line">   {</span><br><span class="line">       <span class="keyword">case</span> SC_PrintInt:</span><br><span class="line">          val = kernel-&gt;machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">          SysPrintInt(val); </span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PrevPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg));</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg) + <span class="number">4</span>);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(NextPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg)+<span class="number">4</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="4-void-SysPrintInt-int-number"><a href="#4-void-SysPrintInt-int-number" class="headerlink" title="4. void SysPrintInt(int number)"></a>4. void SysPrintInt(int number)</h4><p><strong>userprog/ksyscall.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysPrintInt</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    kernel-&gt;synchConsoleOut-&gt;PutInt(number);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="5-void-SynchConsoleOutput-PutInt-int-value"><a href="#5-void-SynchConsoleOutput-PutInt-int-value" class="headerlink" title="5. void SynchConsoleOutput::PutInt(int value)"></a>5. void SynchConsoleOutput::PutInt(int value)</h4><p><strong>userprog/synchconsole.cc</strong></p><p>&#x53EA;&#x6709;&#x4E00;&#x500B; console&#xFF0C;&#x56E0;&#x6B64;&#x5FC5;&#x9808;&#x8981; sync&#xFF0C;&#x8F38;&#x51FA;&#x7684;&#x904E;&#x7A0B;&#x662F; critical section&#xFF0C;&#x4E00;&#x6B21;&#x53EA;&#x80FD;&#x6709;&#x4E00;&#x500B; thread &#x505A; console output&#x3002;&#x4F7F;&#x7528; while &#x8FF4;&#x5708;&#xFF0C;&#x5C07;&#x5B57;&#x4E32;&#x4E2D;&#x7684;&#x5B57;&#x5143;&#x4E00;&#x500B;&#x4E00;&#x500B;&#x7684;&#x5370;&#x51FA;&#x3002;&#x5728;&#x6B64;&#x4F7F;&#x7528; do while &#x8FF4;&#x5708;&#xFF0C;&#x56E0;&#x70BA;&#x7B2C;&#x4E00;&#x500B;&#x8F38;&#x51FA;&#x7684;&#x5B57;&#x5143;&#x4E0D;&#x9700;&#x8981;&#x7B49;&#x5F85;&#xFF0C;&#x4ED6;&#x65E2;&#x7136;&#x53EF;&#x4EE5;&#x6210;&#x529F; acquire &#x5230; lock &#x4EE3;&#x8868;&#x76EE;&#x524D;&#x6C92;&#x6709;&#x4EBA;&#x5728;&#x9032;&#x884C;&#x8F38;&#x51FA;&#xFF0C;&#x4F46;&#x63A5;&#x4E0B;&#x4F86;&#x7684;&#x5B57;&#x5143;&#x8F38;&#x51FA;&#x90FD;&#x8981;&#x7B49;&#x524D;&#x4E00;&#x500B;&#x5B57;&#x5143;&#x8F38;&#x51FA;&#x5B8C;&#x6210;&#x624D;&#x80FD;&#x9032;&#x884C;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SynchConsoleOutput::PutInt</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">int</span> idx=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(str, <span class="string">&quot;%d\n\0&quot;</span>, value); <span class="comment">/* convert int into string */</span></span><br><span class="line">    lock-&gt;Acquire();  <span class="comment">/* enter critical section */</span></span><br><span class="line">    <span class="keyword">do</span>{</span><br><span class="line">        consoleOutput-&gt;PutChar(str[idx]);</span><br><span class="line">        idx++;</span><br><span class="line">        waitFor-&gt;P();</span><br><span class="line">    } <span class="keyword">while</span>(str[idx] != <span class="string">&apos;\0&apos;</span>);</span><br><span class="line">    lock-&gt;Release(); <span class="comment">/* leave critical section */</span> </span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynchConsoleOutput</span> :</span> <span class="keyword">public</span> CallBackObj {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ConsoleOutput *consoleOutput; <span class="comment">/* the hardware display */</span></span><br><span class="line">    Lock *lock; <span class="comment">/* only one writer at a time */</span></span><br><span class="line">    Semaphore *waitFor; <span class="comment">/* wait for callBack */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CallBack</span><span class="params">()</span></span>; <span class="comment">/* called when more data can be written */</span></span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>waitFor &#x662F; class Semaphore &#x7684;&#x7269;&#x4EF6;&#xFF0C;&#x7576;&#x547C;&#x53EB; P() &#x6642;&#xFF0C;&#x82E5; waitFor.value &lt; 0 &#xFF0C;thread &#x6703;&#x88AB;&#x52A0;&#x5165; waitFor.queue &#x4E2D;&#x7B49;&#x5F85;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">waitFor-&gt;P();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/synch.h */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Semaphore</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">P</span><span class="params">()</span></span>; <span class="comment">/* waits until value &gt; 0, then decrement */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">V</span><span class="params">()</span></span>; <span class="comment">/* increment, waking up a thread waiting in P() if </span></span><br><span class="line"><span class="comment">               * necessary */</span></span><br><span class="line"><span class="keyword">private</span>:      </span><br><span class="line">    <span class="keyword">int</span> value;             </span><br><span class="line">    List&lt;Thread *&gt; *<span class="built_in">queue</span>; <span class="comment">/* threads waiting in P() for the value to be </span></span><br><span class="line"><span class="comment">                            * &gt; 0 */</span>      </span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>&#x5728; value &gt; 0 &#x4E4B;&#x524D;&#x90FD;&#x6703;&#x5361;&#x5728;&#x8FF4;&#x5708;&#x88E1;&#xFF0C;&#x5728;&#x524D;&#x4E00;&#x500B;&#x5B57;&#x5143;&#x505A;&#x8F38;&#x51FA;&#x6642;&#xFF0C;thread &#x6703;&#x9032;&#x5165; Sleep() &#x4E2D;&#xFF0C;scheduler &#x6703;&#x5B89;&#x6392;&#x6B63;&#x5728;readyList &#x7684; thread &#x4F7F;&#x7528; CPU&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/synch.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Semaphore::P</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{ </span><br><span class="line">    <span class="keyword">while</span> (value == <span class="number">0</span>) { </span><br><span class="line">        <span class="built_in">queue</span>-&gt;Append(currentThread);</span><br><span class="line">        currentThread-&gt;Sleep(FALSE);</span><br><span class="line">    } </span><br><span class="line">    value--;        </span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="6-void-ConsoleOutput-PutChar-char-ch"><a href="#6-void-ConsoleOutput-PutChar-char-ch" class="headerlink" title="6. void ConsoleOutput::PutChar(char ch)"></a>6. void ConsoleOutput::PutChar(char ch)</h4><p><strong>machine/console.cc</strong></p><p>&#x547C;&#x53EB; WriteFile() &#x5C0D;&#x87A2;&#x5E55;&#x9032;&#x884C;&#x8F38;&#x51FA;&#xFF0C;&#x547C;&#x53EB; Schedule() &#x6A21;&#x64EC;&#x87A2;&#x5E55;&#x5B8C;&#x6210;&#x8F38;&#x51FA;&#x5F8C;&#x767C;&#x51FA; interrupt&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ConsoleOutput::PutChar</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    WriteFile(writeFileNo, &amp;ch, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    kernel-&gt;interrupt-&gt;Schedule(<span class="keyword">this</span>, ConsoleTime, ConsoleWriteInt);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>WriteFile() &#x7684;&#x5BE6;&#x4F5C;&#x662F;&#x547C;&#x53EB; linux &#x63D0;&#x4F9B;&#x7684; write()&#xFF0C;fd &#x662F;&#x88AB;&#x5BEB;&#x5165;&#x6A94;&#x6848;&#x7684; file descriptor&#xFF0C;writeFileNo &#x7684;&#x503C;&#x5728; console.cc &#x4E2D;&#x88AB; assign &#x70BA; 1&#x3002; &#x5728; linux &#x7CFB;&#x7D71;&#x4E2D;&#xFF0C;file descriptor &#x70BA; 1 &#x5373;&#x662F; stdout&#xFF0C;&#x5B57;&#x5143;&#x6703;&#x88AB;&#x8F38;&#x51FA;&#x5230;&#x87A2;&#x5E55;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* lib/sysdep.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WriteFile</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buffer, <span class="keyword">int</span> nBytes)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> retVal = write(fd, buffer, nBytes);</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E00;&#x500B;&#x771F;&#x6B63;&#x7684;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x6703;&#x5728;&#x8F38;&#x51FA;&#x5B8C;&#x6210;&#x7684;&#x6642;&#x5019;&#x767C;&#x51FA; interrupt&#xFF0C;&#x7531;&#x65BC;&#x9019;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#xFF0C;&#x6240;&#x4EE5;&#x4ED6;&#x53EA;&#x80FD;&#x9810;&#x4F30;&#x8F38;&#x51FA;&#x6642;&#x9593;&#x7136;&#x5F8C;&#x81EA;&#x5DF1;&#x767C;&#x51FA; interrupt &#x3002;NachOS &#x9810;&#x4F30;&#x5B57;&#x5143;&#x8F38;&#x51FA;&#x9700;&#x8981; 100 &#x55AE;&#x4F4D;&#x6642;&#x9593;&#xFF0C;&#x56E0;&#x6B64;&#x5B89;&#x6392;&#x5728; 100 &#x500B;&#x55AE;&#x4F4D;&#x6642;&#x9593;&#x5F8C;&#x767C;&#x51FA; interrupt &#x3002;&#x95DC;&#x9375;&#x5B57; this &#x901A;&#x5E38;&#x88AB;&#x7528;&#x5728;&#x4E00;&#x500B; class &#x5167;&#x90E8;&#xFF0C;this &#x662F;&#x4E00;&#x500B;&#x6307;&#x6A19;&#xFF0C;&#x6307;&#x5411;&#x6B63;&#x5728;&#x88AB;&#x57F7;&#x884C;&#x7684; class &#x7684;&#x7269;&#x4EF6;&#xFF0C;this &#x5728;&#x6B64;&#x8655;&#x662F; ConsoleOutput&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel-&gt;interrupt-&gt;Schedule(<span class="keyword">this</span>, ConsoleTime, ConsoleWriteInt);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* machine/stats.h */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ConsoleTime =<span class="number">100</span>; <span class="comment">/* time to read or write one character */</span></span><br></pre></td></tr></table></figure><p>IntType &#x7D00;&#x9304;&#x9019;&#x500B; interrupt &#x662F;&#x7531;&#x54EA;&#x500B;&#x786C;&#x9AD4;&#x767C;&#x51FA;&#xFF0C;NachOS&#x652F;&#x63F4;&#x516D;&#x7A2E;&#x786C;&#x9AD4;&#x76F8;&#x95DC; interrupt &#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* machine/interrupt.h */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IntType</span> {</span> TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, </span><br><span class="line">               NetworkSendInt, NetworkRecvInt};</span><br></pre></td></tr></table></figure><p>writeFileNo &#x7684;&#x503C;&#x5728; console.cc &#x4E2D;&#x88AB; assign &#x70BA; 1&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* machine/console.cc */</span></span><br><span class="line"></span><br><span class="line">ConsoleOutput::ConsoleOutput(<span class="keyword">char</span> *writeFile, CallBackObj *toCall)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (writeFile == <span class="literal">NULL</span>)</span><br><span class="line">        writeFileNo = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        writeFileNo = OpenForWrite(writeFile);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/kernel.cc */</span></span><br><span class="line"></span><br><span class="line">synchConsoleOut = <span class="keyword">new</span> SynchConsoleOutput(consoleOut);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/kernel.cc */</span></span><br><span class="line"></span><br><span class="line">consoleOut = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="7-void-Interrupt-Schedule-CallBackObj-toCall-int-fromNow-IntType-type"><a href="#7-void-Interrupt-Schedule-CallBackObj-toCall-int-fromNow-IntType-type" class="headerlink" title="7. void Interrupt::Schedule(CallBackObj *toCall, int fromNow, IntType type)"></a>7. void Interrupt::Schedule(CallBackObj *toCall, int fromNow, IntType type)</h4><p><strong>machine/interrupt.cc</strong></p><p>&#x628A;&#x5F85;&#x767C;&#x751F;&#x7684; interrupt &#x653E;&#x9032; pending&#xFF0C;&#x7576;&#x6392;&#x5B9A;&#x7684;&#x6642;&#x9593;&#x5230;&#x9054;&#x6642;&#x624D;&#x6703;&#x767C;&#x751F;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Interrupt::Schedule</span><span class="params">(CallBackObj *toCall, <span class="keyword">int</span> fromNow, IntType type)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> when = kernel-&gt;stats-&gt;totalTicks + fromNow;</span><br><span class="line">    PendingInterrupt *toOccur = <span class="keyword">new</span> PendingInterrupt(toCall, when, type);</span><br><span class="line">    pending-&gt;Insert(toOccur);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interrupt</span> {</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SortedList&lt;PendingInterrupt *&gt; *pending;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>&#x7576;&#x6392;&#x5B9A;&#x7684;&#x6642;&#x9593;&#x5230;&#x9054;&#xFF0C;interrupt &#x767C;&#x751F;&#xFF0C;&#x56DE;&#x5831;&#x767C;&#x51FA; interrupt &#x7684;&#x7269;&#x4EF6;&#xFF0C;&#x5373; ConsoleOutput&#xFF0C;&#x8B93;&#x4ED6;&#x9032;&#x884C; interrupt &#x7684;&#x8655;&#x7406;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PendingInterrupt *toOccur = <span class="keyword">new</span> PendingInterrupt(toCall, when, type);</span><br></pre></td></tr></table></figure><p>when &#x662F; interrupt &#x6392;&#x5B9A;&#x8981;&#x767C;&#x751F;&#x7684;&#x6642;&#x9593;&#xFF0C;totalTicks &#x662F;&#x7576;&#x524D;&#x6642;&#x9593;&#xFF0C;fromNow &#x7684;&#x503C;&#x70BA; ConsoleTime&#xFF0C;&#x5373; 100&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> when = kernel-&gt;stats-&gt;totalTicks + fromNow;</span><br></pre></td></tr></table></figure><h4 id="8-void-Machine-Run"><a href="#8-void-Machine-Run" class="headerlink" title="8. void Machine::Run()"></a>8. void Machine::Run()</h4><p><strong>machine/mipssim.cc</strong></p><p>Onetick() &#x5C07;&#x7CFB;&#x7D71;&#x6642;&#x9593;&#x63A8;&#x9032;&#x4E00;&#x500B;&#x55AE;&#x4F4D;&#xFF0C;&#x4E26;&#x4E14;&#x6AA2;&#x67E5;&#x662F;&#x5426;&#x6709; interrupt &#x6B63;&#x8981;&#x767C;&#x751F;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Instruction *instr = <span class="keyword">new</span> Instruction;</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">    <span class="keyword">for</span> (;;) {</span><br><span class="line">        OneInstruction(instr);</span><br><span class="line">        kernel-&gt;interrupt-&gt;OneTick();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="9-void-Interrupt-OneTick"><a href="#9-void-Interrupt-OneTick" class="headerlink" title="9. void Interrupt::OneTick()"></a>9. void Interrupt::OneTick()</h4><p><strong>machine/interrupt.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Interrupt::OneTick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (status == SystemMode) {</span><br><span class="line">        stats-&gt;totalTicks += SystemTick;</span><br><span class="line">        stats-&gt;systemTicks += SystemTick;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        stats-&gt;totalTicks += UserTick;</span><br><span class="line">        stats-&gt;userTicks += UserTick;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* check for pending interrupts */</span></span><br><span class="line">    CheckIfDue(FALSE);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="10-bool-Interrupt-CheckIfDue-bool-advanceClock"><a href="#10-bool-Interrupt-CheckIfDue-bool-advanceClock" class="headerlink" title="10. bool Interrupt::CheckIfDue(bool advanceClock)"></a>10. bool Interrupt::CheckIfDue(bool advanceClock)</h4><p><strong>machine/interrupt.cc</strong></p><p>&#x5982;&#x679C;&#x6C92;&#x6709;interrupt &#x8981;&#x767C;&#x751F;&#xFF0C;&#x56DE;&#x50B3; false&#xFF0C;&#x82E5;&#x6709; interrupt &#x8981;&#x767C;&#x751F;&#xFF0C;&#x57F7;&#x884C;&#x4E26;&#x4E14;&#x56DE;&#x50B3; true&#xFF0C;&#x82E5; advanceClock &#x70BA; true&#xFF0C;&#x8868;&#x793A;&#x76EE;&#x524D;&#x5DF2;&#x7D93;&#x6C92;&#x6709;&#x4EFB;&#x4F55;&#x6307;&#x4EE4;&#x8981;&#x57F7;&#x884C;&#xFF0C;&#x5247;&#x76F4;&#x63A5;&#x57F7;&#x884C;&#x4E00;&#x500B; interrupt&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Interrupt::CheckIfDue</span><span class="params">(<span class="keyword">bool</span> advanceClock)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    PendingInterrupt *next;</span><br><span class="line">    Statistics *stats = kernel-&gt;stats;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pending-&gt;IsEmpty()) {</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    next = pending-&gt;Front();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next-&gt;when &gt; stats-&gt;totalTicks) {</span><br><span class="line">        <span class="keyword">if</span> (!advanceClock) { </span><br><span class="line">            <span class="keyword">return</span> FALSE;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> { </span><br><span class="line">    stats-&gt;idleTicks += (next-&gt;when - stats-&gt;totalTicks);</span><br><span class="line">    stats-&gt;totalTicks = next-&gt;when;</span><br><span class="line">}</span><br><span class="line">    }</span><br><span class="line">    inHandler = TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        next = pending-&gt;RemoveFront();    </span><br><span class="line">        next-&gt;callOnInterrupt-&gt;CallBack();</span><br><span class="line">  <span class="keyword">delete</span> next;</span><br><span class="line">    } <span class="keyword">while</span>(!pending-&gt;IsEmpty()</span><br><span class="line">            &amp;&amp; (pending-&gt;Front()-&gt;when &lt;= stats-&gt;totalTicks));</span><br><span class="line">    inHandler = FALSE;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x82E5;&#x76EE;&#x524D;&#x6709;&#x8981;&#x767C;&#x751F;&#x7684; interrupt&#xFF0C;&#x628A; interrupt &#x5F9E; pending &#x4E2D;&#x53D6;&#x51FA;&#xFF0C;&#x547C;&#x53EB;&#x767C;&#x51FA;&#x6B64; interrupt<br>&#x7269;&#x4EF6;&#x7684; callBack()&#xFF0C;&#x5728; interrupt &#x8655;&#x7406;&#x5B8C;&#x4E4B;&#x5F8C;&#xFF0C;&#x56DE;&#x50B3; true&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    next = pending-&gt;RemoveFront();    </span><br><span class="line">    next-&gt;callOnInterrupt-&gt;CallBack();</span><br><span class="line">    <span class="keyword">delete</span> next;</span><br><span class="line">} <span class="keyword">while</span>(!pending-&gt;IsEmpty()</span><br><span class="line">        &amp;&amp; (pending-&gt;Front()-&gt;when &lt;= stats-&gt;totalTicks));</span><br></pre></td></tr></table></figure><h4 id="11-void-ConsoleOutput-CallBack"><a href="#11-void-ConsoleOutput-CallBack" class="headerlink" title="11. void ConsoleOutput::CallBack()"></a>11. void ConsoleOutput::CallBack()</h4><p><strong>machine/console.cc</strong></p><p>&#x7576;&#x87A2;&#x5E55;&#x8F38;&#x51FA;&#x5B8C;&#x6210;&#xFF0C;ConsoleOutput &#x547C;&#x53EB; SynchConsoleOutput&#x7269;&#x4EF6;&#x7684; callBack()&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ConsoleOutput::CallBack</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    putBusy = FALSE;</span><br><span class="line">    kernel-&gt;stats-&gt;numConsoleCharsWritten++;</span><br><span class="line">    callWhenDone-&gt;CallBack();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>consoleOutput &#x7684; callWhenDone &#x662F; SynchConsoleOutput&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* machine/console.h */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsoleOutput</span> :</span> <span class="keyword">public</span> CallBackObj {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CallBackObj *callWhenDone;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* machine/console.cc */</span></span><br><span class="line"></span><br><span class="line">ConsoleOutput::ConsoleOutput(<span class="keyword">char</span> *writeFile, CallBackObj *toCall)</span><br><span class="line">{</span><br><span class="line">    callWhenDone = toCall;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* userprog/synchconsole.cc */</span></span><br><span class="line"></span><br><span class="line">SynchConsoleOutput::SynchConsoleOutput(<span class="keyword">char</span> *outputFile)</span><br><span class="line">{</span><br><span class="line">    consoleOutput = <span class="keyword">new</span> ConsoleOutput(outputFile, <span class="keyword">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="12-void-SynchConsoleOutput-CallBack"><a href="#12-void-SynchConsoleOutput-CallBack" class="headerlink" title="12. void SynchConsoleOutput::CallBack()"></a>12. void SynchConsoleOutput::CallBack()</h4><p><strong>userprog/synchconsole.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SynchConsoleOutput::CallBack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    waitFor-&gt;V();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>V() &#x91CB;&#x653E;&#x4E00;&#x500B; semaphore &#x8CC7;&#x6E90;&#xFF0C;&#x4E26;&#x4E14; pop &#x51FA;&#x4E0B;&#x4E00;&#x500B;&#x5728; semaphore.queue &#x7684; thread &#x653E;&#x9032; readyList&#xFF0C;&#x7B49;&#x5230; scheduler &#x5B89;&#x6392;&#x6B64; thread &#x53EF;&#x4EE5;&#x4F7F;&#x7528; CPU &#x6642;&#xFF0C;&#x624D;&#x80FD;&#x8F38;&#x51FA;&#x4E0B;&#x4E00;&#x500B;&#x5B57;&#x5143;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* threads/synch.cc */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Semaphore::V</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">queue</span>-&gt;IsEmpty()) { </span><br><span class="line">kernel-&gt;scheduler-&gt;ReadyToRun(<span class="built_in">queue</span>-&gt;RemoveFront());</span><br><span class="line">    }</span><br><span class="line">    value++;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Implement four I/O system calls in NachOS</p><ul><li>OpenFileId Open(char *name);</li><li>int Write(char *buffer, int size, OpenFileId id);</li><li>int Read(char *buffer, int size, OpenFileId id);</li><li>int Close(OpenFileId id);</li></ul><p>Open / Close / Read / Write &#x56DB;&#x8005;&#x975E;&#x5E38;&#x50CF;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EE5; Write &#x70BA;&#x4F8B;&#x5B50;&#x9032;&#x884C;&#x5BE6;&#x4F5C;&#x89E3;&#x8AAA; &#xFF0C;&#x552F;&#x6709;&#x6BD4;&#x8F03;&#x9700;&#x8981;&#x8AAA;&#x660E;&#x7684;&#x90E8;&#x4EFD;&#x6703;&#x5C07; Open / Close / Read &#x4E00;&#x8D77;&#x8AAA;&#x660E;&#x3002;</p><h4 id="int-Write-char-buffer-int-size-OpenFileId-id"><a href="#int-Write-char-buffer-int-size-OpenFileId-id" class="headerlink" title="int Write(char *buffer, int size, OpenFileId id);"></a>int Write(char *buffer, int size, OpenFileId id);</h4><p><strong>userprog/syscall.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC_Write 8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> *buffer, <span class="keyword">int</span> size, OpenFileId id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* test/start.s */</span><br><span class="line"></span><br><span class="line">#include &quot;syscall.h&quot;</span><br><span class="line"></span><br><span class="line">.globl Write</span><br><span class="line">.entWrite</span><br><span class="line">Write:</span><br><span class="line">addiu $2,$0,SC_Write</span><br><span class="line">syscall</span><br><span class="line">j$31</span><br><span class="line">.end Write</span><br></pre></td></tr></table></figure><h4 id="1-void-Machine-OneInstruction-Instruction-instr-2"><a href="#1-void-Machine-OneInstruction-Instruction-instr-2" class="headerlink" title="1. void Machine::OneInstruction(Instruction *instr)"></a>1. void Machine::OneInstruction(Instruction *instr)</h4><p><strong>machine/mipssim.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;machine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mipssim.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::OneInstruction</span><span class="params">(Instruction *instr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span> (instr-&gt;opCode) {</span><br><span class="line">    <span class="keyword">case</span> OP_SYSCALL:</span><br><span class="line">        RaiseException(SyscallException, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="2-void-Machine-RaiseException-ExceptionType-which-int-badVAddr-2"><a href="#2-void-Machine-RaiseException-ExceptionType-which-int-badVAddr-2" class="headerlink" title="2. void Machine::RaiseException(ExceptionType which, int badVAddr)"></a>2. void Machine::RaiseException(ExceptionType which, int badVAddr)</h4><p><strong>machine/machine.cc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;machine.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::RaiseException</span><span class="params">(ExceptionType which, <span class="keyword">int</span> badVAddr)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);</span><br><span class="line">    kernel-&gt;interrupt-&gt;setStatus(UserMode);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="3-void-ExceptionHandler-ExceptionType-which-2"><a href="#3-void-ExceptionHandler-ExceptionType-which-2" class="headerlink" title="3. void ExceptionHandler(ExceptionType which)"></a>3. void ExceptionHandler(ExceptionType which)</h4><p><strong>userprog/exception.cc</strong></p><p>&#x4F9D;&#x7167;&#x6211;&#x5011;&#x50B3;&#x5165;&#x53C3;&#x6578;&#x7684;&#x9806;&#x5E8F; (char *buffer, int size, OpenFileId id) &#x4F9D;&#x5E8F;&#x5F9E; register $a0 $a1 $a2&#xFF0C;&#x5373;&#x5F9E; register(4) register(5) register(6) &#x8B80;&#x51FA;&#x547C;&#x53EB; system call Write &#x6642;&#x6240;&#x50B3;&#x5165;&#x7684;&#x53C3;&#x6578;&#x3002;SysWrite &#x6703;&#x56DE;&#x50B3;&#x5BEB;&#x5165;&#x662F;&#x5426;&#x6210;&#x529F;&#x3002;&#x4F9D;&#x7167; MIPS &#x6163;&#x4F8B;&#xFF0C;&#x51FD;&#x5F0F;&#x56DE;&#x50B3;&#x503C;&#x61C9;&#x653E;&#x5728; register $v0&#xFF0C;&#x5373; register(4)&#x3002;&#x5B8C;&#x6210; SysWrite &#x4E4B;&#x5F8C;&#x8981;&#x4FEE;&#x6539; PCReg &#x8B93; PCReg &#x6307;&#x5411;&#x4E0B;&#x4E00;&#x500B;&#x6307;&#x4EE4;&#xFF0C;&#x5982;&#x679C;&#x6C92;&#x6709;&#x52A0;&#x4E0A;&#x9019;&#x4E00;&#x884C;&#x7684;&#x8A71;&#xFF0C;&#x7A0B;&#x5F0F;&#x6703;&#x4E0D;&#x505C;&#x7684;&#x57F7;&#x884C;&#x7576;&#x524D;&#x6307;&#x4EE4;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;syscall.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ksyscall.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExceptionHandler</span><span class="params">(ExceptionType which)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">   <span class="keyword">int</span> type = kernel-&gt;machine-&gt;ReadRegister(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SC_Write:</span><br><span class="line">    val = kernel-&gt;machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">char</span> *buffer = &amp;(kernel-&gt;machine-&gt;mainMemory[val]);</span><br><span class="line">    size = kernel-&gt;machine-&gt;ReadRegister(<span class="number">5</span>); </span><br><span class="line">    id = kernel-&gt;machine-&gt;ReadRegister(<span class="number">6</span>); </span><br><span class="line">    status = SysWrite(buffer, size, id);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(<span class="number">2</span>, (<span class="keyword">int</span>) status);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PrevPCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg));</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(PCReg, </span><br><span class="line">                              kernel-&gt;machine-&gt;ReadRegister(PCReg) + <span class="number">4</span>);</span><br><span class="line">    kernel-&gt;machine-&gt;WriteRegister(NextPCReg, </span><br><span class="line">        kernel-&gt;machine-&gt;ReadRegister(PCReg)+<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    ASSERTNOTREACHED();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="4-int-SysWrite-char-buffer-int-size-int-id"><a href="#4-int-SysWrite-char-buffer-int-size-int-id" class="headerlink" title="4. int SysWrite(char *buffer, int size, int id)"></a>4. int SysWrite(char *buffer, int size, int id)</h4><p><strong>userprog/ksyscall.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SysWrite</span><span class="params">(<span class="keyword">char</span> *buffer, <span class="keyword">int</span> size, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> kernel-&gt;WriteFile(buffer, size, id);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="5-int-Kernel-WriteFile-char-buffer-int-size-int-id"><a href="#5-int-Kernel-WriteFile-char-buffer-int-size-int-id" class="headerlink" title="5. int Kernel::WriteFile(char *buffer, int size, int id)"></a>5. int Kernel::WriteFile(char *buffer, int size, int id)</h4><p><strong>machine/interrupt.cc</strong></p><p>class FileSystem &#x662F; NachOS &#x7684; file system API&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kernel::WriteFile</span><span class="params">(<span class="keyword">char</span> *buffer, <span class="keyword">int</span> size, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> fileSystem-&gt;WriteF(buffer, size, id);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="6-int-Filesystem-WriteF-char-name"><a href="#6-int-Filesystem-WriteF-char-name" class="headerlink" title="6. int Filesystem::WriteF(char *name)"></a>6. int Filesystem::WriteF(char *name)</h4><p><strong>filesys/filesys.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FILESYS_STUB </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystem</span> {</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">WriteF</span><span class="params">(<span class="keyword">char</span> *buffer, <span class="keyword">int</span> size, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">int</span> status = WriteFile(id, buffer, size);</span><br><span class="line">        <span class="keyword">return</span> status; </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="7-1-int-WriteFile-int-fd-char-buffer-int-nBytes"><a href="#7-1-int-WriteFile-int-fd-char-buffer-int-nBytes" class="headerlink" title="7_1.  int WriteFile(int fd, char *buffer, int nBytes)"></a>7_1.  int WriteFile(int fd, char *buffer, int nBytes)</h4><p><strong>lib/sysdep.cc</strong></p><p>class FileSystem &#x662F; NachOS &#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71; API&#xFF0C;&#x7531;&#x65BC;&#x76EE;&#x524D;&#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#x662F;&#x4F9D;&#x8CF4; linux &#x7684;&#x6A94;&#x6848;&#x7CFB;&#x7D71;&#xFF0C;system call Write &#x7684;&#x5BE6;&#x4F5C;&#x662F;&#x547C;&#x53EB; linux &#x63D0;&#x4F9B;&#x7684; write()&#xFF0C;write() &#x5931;&#x6557;&#x56DE;&#x50B3; -1&#xFF0C;&#x6210;&#x529F;&#x56DE;&#x50B3;&#x6210;&#x529F;&#x5BEB;&#x5165;&#x7684;&#x5B57;&#x5143;&#x6578;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WriteFile</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buffer, <span class="keyword">int</span> nBytes)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> retVal = write(fd, buffer, nBytes);</span><br><span class="line">    ASSERT(retVal == nBytes);</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="7-2-int-OpenForReadWrite-char-name-bool-crashOnError"><a href="#7-2-int-OpenForReadWrite-char-name-bool-crashOnError" class="headerlink" title="7_2. int OpenForReadWrite(char *name, bool crashOnError)"></a>7_2. int OpenForReadWrite(char *name, bool crashOnError)</h4><p><strong>lib/sysdep.cc</strong></p><p>system call Open &#x7684;&#x5BE6;&#x4F5C;&#x662F;&#x547C;&#x53EB; linux &#x63D0;&#x4F9B;&#x7684; open()&#xFF0C;open() &#x5931;&#x6557;&#x56DE;&#x50B3; -1&#xFF0C;&#x6210;&#x529F;&#x56DE;&#x50B3; file description&#x3002;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x7528; fopen() &#x958B;&#x555F;&#x6A94;&#x6848;&#xFF0C;&#x4ED6;&#x56DE;&#x50B3;&#x7684;&#x662F; FILE*&#xFF0C;&#x662F;&#x4E00;&#x500B;&#x6307;&#x6A19;&#xFF0C;&#x800C; open() &#x56DE;&#x50B3;&#x7684;&#x662F;&#x4E00;&#x500B;&#x6574;&#x6578;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OpenForReadWrite</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">bool</span> crashOnError)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> fd = open(name, O_RDWR, <span class="number">0</span>);</span><br><span class="line">    ASSERT(!crashOnError || fd &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="7-3-int-Read-int-fd-char-buffer-int-nBytes"><a href="#7-3-int-Read-int-fd-char-buffer-int-nBytes" class="headerlink" title="7_3. int Read(int fd, char *buffer, int nBytes)"></a>7_3. int Read(int fd, char *buffer, int nBytes)</h4><p><strong>lib/sysdep.cc</strong></p><p>system call Read &#x7684;&#x5BE6;&#x4F5C;&#x662F;&#x547C;&#x53EB; linux &#x63D0;&#x4F9B;&#x7684; read()&#xFF0C;read() &#x5931;&#x6557;&#x56DE;&#x50B3; -1&#xFF0C;&#x6210;&#x529F;&#x56DE;&#x50B3;&#x6210;&#x529F;&#x8B80;&#x51FA;&#x7684;&#x5B57;&#x5143;&#x6578;&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buffer, <span class="keyword">int</span> nBytes)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> retVal = read(fd, buffer, nBytes);</span><br><span class="line">    ASSERT(retVal == nBytes);</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="7-4-int-Close-int-fd"><a href="#7-4-int-Close-int-fd" class="headerlink" title="7_4. int Close(int fd)"></a>7_4. int Close(int fd)</h4><p><strong>lib/sysdep.cc</strong></p><p>system call Close &#x7684;&#x5BE6;&#x4F5C;&#x662F;&#x547C;&#x53EB; linux &#x63D0;&#x4F9B;&#x7684; read()&#xFF0C;read() &#x5931;&#x6557;&#x56DE;&#x50B3; -1&#xFF0C;&#x6210;&#x529F;&#x56DE;&#x50B3; 0&#x3002;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Close</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> retVal = close(fd);</span><br><span class="line">    ASSERT(retVal &gt;= <span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><h4 id="Compile-Rebuild-NachOS"><a href="#Compile-Rebuild-NachOS" class="headerlink" title="Compile / Rebuild NachOS"></a>Compile / Rebuild NachOS</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd NachOS-4.0_MP1/code/build.linux</span><br><span class="line">&gt; make clean</span><br><span class="line">&gt; make depend</span><br><span class="line">&gt; make</span><br></pre></td></tr></table></figure><h4 id="Test-NachOS"><a href="#Test-NachOS" class="headerlink" title="Test NachOS"></a>Test NachOS</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd NachOS-4.0_MP1/code/test</span><br><span class="line">&gt; make clean</span><br><span class="line">&gt; make halt</span><br><span class="line">&gt; ../build.linux/nachos -e halt</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] shawn2000100/10810CS_342301_OperatingSystem<br><a href="https://github.com/shawn2000100/10810CS_342301_OperatingSystem">https://github.com/shawn2000100/10810CS_342301_OperatingSystem</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;README&quot;&gt;&lt;a href=&quot;#README&quot; class=&quot;headerlink&quot; title=&quot;README&quot;&gt;&lt;/a&gt;README&lt;/h2&gt;&lt;p&gt;&amp;#x9019;&amp;#x662F;&amp;#x6E05;&amp;#x5927;&amp;#x5468;&amp;#x5FD7;&amp;#x906</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>學期結束了</title>
    <link href="http://example.com/2021/06/25/%E5%AD%B8%E6%9C%9F%E7%B5%90%E6%9D%9F%E4%BA%86/"/>
    <id>http://example.com/2021/06/25/%E5%AD%B8%E6%9C%9F%E7%B5%90%E6%9D%9F%E4%BA%86/</id>
    <published>2021-06-25T04:13:55.000Z</published>
    <updated>2021-07-13T08:56:18.864Z</updated>
    
    <content type="html"><![CDATA[<p>&#x5927;&#x6982;&#x516D;&#x500B;&#x5C0F;&#x6642;&#x4E4B;&#x524D;&#x5B8C;&#x6210;&#x4E86;&#x9019;&#x5B78;&#x671F;&#x7684;&#x6700;&#x5F8C;&#x4E00;&#x5834;&#x8003;&#x8A66;&#xFF0C;&#x96D6;&#x7136;&#x660E;&#x5929;&#x9084;&#x6709;&#x4E00;&#x4EFD;&#x5831;&#x544A;&#x548C;&#x4E00;&#x4EFD;&#x88DC;&#x4EA4;&#x7684;&#x4F5C;&#x696D;&#xFF0C;&#x4F46;&#x6211;&#x7684;&#x5FC3;&#x5DF2;&#x7D93;&#x5728;&#x653E;&#x6691;&#x5047;&#x4E86;&#xFF0C;&#x4F5C;&#x696D;&#x4EC0;&#x9EBC;&#x7684;&#x5C31;&#x7B97;&#x4E86;&#x5427;&#x3002;&#x7562;&#x7ADF;&#x662F;&#x5DE5;&#x4F5C;&#x904E;&#x7684;&#x4EBA;&#xFF0C;&#x5C0D;&#x65BC;&#x6691;&#x5047;&#xFF0C;&#x56E0;&#x70BA;&#x66FE;&#x7D93;&#x5931;&#x53BB;&#x904E;&#x6240;&#x4EE5;&#x66F4;&#x52A0;&#x73CD;&#x8CB4;&#x3002;&#x5B78;&#x671F;&#x9593;&#x5C31;&#x6709;&#x6162;&#x6162;&#x5728;&#x60F3;&#x6691;&#x5047;&#x8981;&#x505A;&#x4EC0;&#x9EBC;&#xFF0C;&#x7A0B;&#x5F0F;&#x65B9;&#x9762;&#x7684;&#x9032;&#x5EA6;&#x90FD;&#x6703;&#x5728;&#x9019;&#x88E1;&#x66F4;&#x65B0;&#x7684;&#x3002;&#x4F46;&#x662F;&#x590F;&#x5929;&#xFF0C;&#x9664;&#x4E86;&#x5BEB;&#x7A0B;&#x5F0F;&#xFF0C;&#x9084;&#x662F;&#x5F97;&#x8981;&#x51FA;&#x53BB;&#x73A9;&#x7684;&#x5427;&#xFF0C;&#x8AB0;&#x77E5;&#x9053;&#x75AB;&#x60C5;&#x7A81;&#x7136;&#x8B8A;&#x5F97;&#x56B4;&#x91CD;&#xFF0C;&#x5230;&#x5E95;&#x6691;&#x5047;&#x7D50;&#x675F;&#x524D;&#x80FD;&#x4E0D;&#x80FD;&#x53BB;&#x6C99;&#x7058;&#x5462;&#xFF0C;&#x5BE6;&#x5728;&#x597D;&#x60F3;&#x53BB;&#x6C99;&#x7058;&#x5440;&#x3002;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;#x5927;&amp;#x6982;&amp;#x516D;&amp;#x500B;&amp;#x5C0F;&amp;#x6642;&amp;#x4E4B;&amp;#x524D;&amp;#x5B8C;&amp;#x6210;&amp;#x4E86;&amp;#x9019;&amp;#x5B78;&amp;#x671F;&amp;#x7684;&amp;#x6700;&amp;#x5F8C;&amp;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>跨系推甄北科資工所</title>
    <link href="http://example.com/2020/12/04/%E8%B7%A8%E7%B3%BB%E6%8E%A8%E7%94%84%E5%8C%97%E7%A7%91%E8%B3%87%E5%B7%A5%E6%89%80/"/>
    <id>http://example.com/2020/12/04/%E8%B7%A8%E7%B3%BB%E6%8E%A8%E7%94%84%E5%8C%97%E7%A7%91%E8%B3%87%E5%B7%A5%E6%89%80/</id>
    <published>2020-12-04T10:23:50.000Z</published>
    <updated>2021-07-27T18:24:28.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="&#x63A8;&#x7504;&#x8CC7;&#x5DE5;&#x6240;"><a href="#&#x63A8;&#x7504;&#x8CC7;&#x5DE5;&#x6240;" class="headerlink" title="&#x63A8;&#x7504;&#x8CC7;&#x5DE5;&#x6240;"></a>&#x63A8;&#x7504;&#x8CC7;&#x5DE5;&#x6240;</h3><p>&#x78A9;&#x4E8C;&#x4E0A;&#x539F;&#x672C;&#x662F;&#x61C9;&#x8A72;&#x52A0;&#x5FEB;&#x8AD6;&#x6587;&#x9032;&#x5EA6;&#x7684;&#x6642;&#x671F;&#xFF0C;&#x4F46;&#x6211;&#x56E0;&#x4E00;&#x4E9B;&#x4E0D;&#x53EF;&#x6297;&#x529B;&#x56E0;&#x7D20;&#x4F11;&#x5B78;&#x4E86;&#x4E00;&#x500B;&#x5B78;&#x671F;&#xFF0C;&#x4E0D;&#x904E;&#x6211;&#x5F9E;&#x6691;&#x5047;&#x5C31;&#x958B;&#x59CB;&#x6E96;&#x5099;&#x63A8;&#x7504;&#x3002;&#x901A;&#x5E38;&#x8DE8;&#x7CFB;&#x63A8;&#x7504;&#x7684;&#x4EBA;&#x5C31;&#x7B97;&#x6C92;&#x6709;&#x8F14;&#x7CFB;&#x4E5F;&#x6703;&#x5148;&#x53BB;&#x4FEE;&#x4E00;&#x4E9B;&#x4E3B;&#x8981;&#x8AB2;&#x7A0B;&#xFF0C;&#x4F8B;&#x5982;&#x8CC7;&#x6599;&#x7D50;&#x69CB;&#x6F14;&#x7B97;&#x6CD5;&#x7B49;&#x7B49;&#xFF0C;&#x4F46;&#x6211;&#x5B8C;&#x5168;&#x6C92;&#x6709;&#x4FEE;&#x904E;&#x4EFB;&#x4F55;&#x8CC7;&#x5DE5;&#x7CFB;&#x5927;&#x5B78;&#x90E8;&#x8AB2;&#x7A0B;&#xFF0C;&#x6A5F;&#x68B0;&#x7CFB;&#x7562;&#x696D;&#x6642;&#x7CFB;&#x6392;&#x53EA;&#x6709; 70&#xFF05;&#xFF0C;&#x60F3;&#x8981;&#x63A8;&#x6E05;&#x4EA4;&#x986F;&#x7136;&#x6C92;&#x6709;&#x6A5F;&#x6703;&#xFF0C;&#x56E0;&#x70BA;&#x6709;&#x56DE;&#x53F0;&#x5317;&#x7684;&#x6025;&#x8FEB;&#x9700;&#x8981;&#xFF0C;&#x53EA;&#x7533;&#x8ACB;&#x4E86;&#x4E2D;&#x592E;&#x548C;&#x53F0;&#x79D1;&#x548C;&#x5317;&#x79D1;&#x7684;&#x8CC7;&#x5DE5;&#x6240;&#xFF0C;&#x4E2D;&#x592E;&#x548C;&#x53F0;&#x79D1;&#x6C92;&#x6709;&#x904E;&#x66F8;&#x5BE9;&#xFF0C;&#x5317;&#x79D1;&#x6B63;&#x53D6;&#x3002;</p><h3 id="&#x5317;&#x79D1;&#x8CC7;&#x5DE5;&#x9762;&#x8A66;"><a href="#&#x5317;&#x79D1;&#x8CC7;&#x5DE5;&#x9762;&#x8A66;" class="headerlink" title="&#x5317;&#x79D1;&#x8CC7;&#x5DE5;&#x9762;&#x8A66;"></a>&#x5317;&#x79D1;&#x8CC7;&#x5DE5;&#x9762;&#x8A66;</h3><p>&#x5317;&#x79D1;&#x8CC7;&#x5DE5;&#x5206;&#x6210;&#x7532;&#x7D44;&#x548C;&#x4E59;&#x7D44;&#xFF0C;&#x4E59;&#x7D44;&#x540D;&#x984D;&#x6BD4;&#x8F03;&#x5C11;&#xFF0C;&#x662F;&#x958B;&#x7D66;&#x975E;&#x672C;&#x79D1;&#x5B78;&#x751F;&#x7684;&#x7D44;&#x5225;&#x3002;&#x9762;&#x8A66;&#x5206;&#x6210;&#x4E09;&#x95DC;&#xFF0C;&#x5404;&#x4E00;&#x4F4D;&#x6559;&#x6388;&#x3002;&#x7B2C;&#x4E00;&#x95DC;&#x662F;&#x81EA;&#x6211;&#x4ECB;&#x7D39;&#xFF0C;&#x7B2C;&#x4E8C;&#x95DC;&#x662F;&#x82F1;&#x6587;&#xFF0C;&#x4E00;&#x5F35;&#x82F1;&#x6587;&#x7684;&#x6388;&#x8AB2;&#x5927;&#x7DB1;&#x8B93;&#x4F60;&#x7FFB;&#x8B6F;&#xFF0C;&#x7B2C;&#x4E09;&#x95DC;&#x4E00;&#x9032;&#x53BB;&#x6559;&#x6388;&#x554F;&#x6211;&#xFF0C;&#x77E5;&#x4E0D;&#x77E5;&#x9053;&#x7269;&#x4EF6;&#x5C0E;&#x5411;&#x7684;&#x4E09;&#x5927;&#x7279;&#x6027;&#x662F;&#x4EC0;&#x9EBC;&#xFF0C;&#x6211;&#x60F3;&#x4E86;&#x4E00;&#x4E0B;&#x8AAA;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x63A5;&#x8457;&#x4ED6;&#x5C31;&#x554F;&#x6211;&#x6709;&#x6C92;&#x6709;&#x8CC7;&#x5DE5;&#x76F8;&#x95DC;&#x7684;&#x5DE5;&#x4F5C;&#x7D93;&#x9A57;&#x6216;&#x5C08;&#x984C;&#xFF0C;&#x6211;&#x6709;&#x628A;&#x6211;&#x78A9;&#x4E00;&#x7684;&#x7814;&#x7A76;&#x6210;&#x679C;&#x6574;&#x7406;&#x6210;&#x4E00;&#x4EFD;&#x5C0F;&#x5C08;&#x984C;&#x653E;&#x5728;&#x5099;&#x5BE9;&#x8CC7;&#x6599;&#x88E1;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x7C21;&#x55AE;&#x4ECB;&#x7D39;&#x6211;&#x7684;&#x5C08;&#x984C;&#x5167;&#x5BB9;&#x3002;</p><h3 id="&#x7D50;&#x8A9E;"><a href="#&#x7D50;&#x8A9E;" class="headerlink" title="&#x7D50;&#x8A9E;"></a>&#x7D50;&#x8A9E;</h3><p>&#x8DE8;&#x7CFB;&#x7533;&#x8ACB;&#x4E0D;&#x5BB9;&#x6613;&#xFF0C;&#x5982;&#x679C;&#x5C0D;&#x4EC0;&#x9EBC;&#x7CFB;&#x6709;&#x8208;&#x8DA3;&#xFF0C;&#x5C31;&#x53BB;&#x4FEE;&#x4E00;&#x4E9B;&#x4ED6;&#x5011;&#x7684;&#x5FC5;&#x4FEE;&#x8AB2;&#xFF0C;&#x63A8;&#x7504;&#x672C;&#x4F86;&#x5C31;&#x662F;&#x9577;&#x671F;&#x7684;&#x7D2F;&#x7A4D;&#x3002;&#x5927;&#x5B78;&#x7684;&#x6642;&#x5019;&#x4E0D;&#x4E00;&#x5B9A;&#x8981;&#x5F88;&#x8A8D;&#x771F;&#x8B80;&#x66F8;&#xFF0C;&#x4F46;&#x81F3;&#x5C11;&#x8981;&#x597D;&#x597D;&#x627E;&#x8208;&#x8DA3;&#xFF0C;&#x89BA;&#x5F97;&#x81EA;&#x5DF1;&#x958B;&#x59CB;&#x7684;&#x6709;&#x9EDE;&#x665A;&#x3002;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;&amp;#x63A8;&amp;#x7504;&amp;#x8CC7;&amp;#x5DE5;&amp;#x6240;&quot;&gt;&lt;a href=&quot;#&amp;#x63A8;&amp;#x7504;&amp;#x8CC7;&amp;#x5DE5;&amp;#x6240;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x63A8;&amp;#x7</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>清大資工修課紀錄</title>
    <link href="http://example.com/2020/10/02/%E6%B8%85%E5%A4%A7%E8%B3%87%E5%B7%A5%E4%BF%AE%E8%AA%B2%E7%B4%80%E9%8C%84/"/>
    <id>http://example.com/2020/10/02/%E6%B8%85%E5%A4%A7%E8%B3%87%E5%B7%A5%E4%BF%AE%E8%AA%B2%E7%B4%80%E9%8C%84/</id>
    <published>2020-10-02T09:21:32.000Z</published>
    <updated>2021-07-30T17:58:14.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="&#x7B2C;&#x4E00;&#x6B21;&#x4FEE;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x8AB2;"><a href="#&#x7B2C;&#x4E00;&#x6B21;&#x4FEE;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x8AB2;" class="headerlink" title="&#x7B2C;&#x4E00;&#x6B21;&#x4FEE;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x8AB2;"></a>&#x7B2C;&#x4E00;&#x6B21;&#x4FEE;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x8AB2;</h3><p>&#x96D6;&#x7136;&#x662F;&#x6A5F;&#x68B0;&#x6240;&#xFF0C;&#x4F46;&#x60F3;&#x5F80;&#x8CC7;&#x5DE5;&#x8D70;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x4FEE;&#x4E86;&#x4E00;&#x4E9B;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x8AB2;&#x3002;&#x70BA;&#x4E86;&#x6E4A;&#x8DB3;&#x7562;&#x696D;&#x5B78;&#x5206;&#xFF0C;&#x96D6;&#x7136;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x7684;&#x80FD;&#x529B;&#x4E0D;&#x8DB3;&#xFF0C;&#x9084;&#x662F;&#x5F97;&#x8981;&#x4FEE;&#x7814;&#x7A76;&#x6240;&#x7684;&#x8AB2;&#xFF0C;&#x4FEE;&#x5F97;&#x5F88;&#x8F9B;&#x82E6;&#xFF0C;&#x4FEE;&#x5E73;&#x884C;&#x7A0B;&#x5F0F;&#x7684;&#x6642;&#x5019;&#xFF0C;&#x6BCF;&#x5929;&#x90FD;&#x5728;&#x5BEB;&#x4F5C;&#x696D;&#xFF0C;&#x4F46;&#x5B78;&#x671F;&#x7D50;&#x675F;&#x7684;&#x6642;&#x5019;&#xFF0C;&#x9084;&#x662F;&#x89BA;&#x5F97;&#x81EA;&#x5DF1;&#x5B78;&#x5230;&#x5F88;&#x591A;&#x4E86;&#x5462;&#x3002;</p><h3 id="&#x4E0A;&#x5B78;&#x671F;"><a href="#&#x4E0A;&#x5B78;&#x671F;" class="headerlink" title="&#x4E0A;&#x5B78;&#x671F;"></a>&#x4E0A;&#x5B78;&#x671F;</h3><h4 id="&#x5E73;&#x884C;&#x7A0B;&#x5F0F;-&#x5468;&#x5FD7;&#x9060;"><a href="#&#x5E73;&#x884C;&#x7A0B;&#x5F0F;-&#x5468;&#x5FD7;&#x9060;" class="headerlink" title="&#x5E73;&#x884C;&#x7A0B;&#x5F0F; - &#x5468;&#x5FD7;&#x9060;"></a>&#x5E73;&#x884C;&#x7A0B;&#x5F0F; - &#x5468;&#x5FD7;&#x9060;</h4><p>&#x8001;&#x5E2B;&#x5F88;&#x8A8D;&#x771F;&#xFF0C;&#x52A9;&#x6559;&#x4E5F;&#x5F88;&#x8A8D;&#x771F;&#xFF0C;&#x56DB;&#x6B21;&#x4F5C;&#x696D;&#xFF0C;&#x662F; MPI / Pthread / OpenMP / CUDA &#x7684;&#x5BE6;&#x4F5C;&#xFF0C;&#x6BCF;&#x6B21;&#x4F5C;&#x696D;&#x4E4B;&#x524D;&#x6703;&#x5148;&#x6709;&#x4E00;&#x500B; lab &#x8AB2;&#xFF0C;&#x5B78;&#x671F;&#x672B;&#x8981;&#x505A;&#x4E00;&#x500B;&#x5C08;&#x984C;&#xFF0C;&#x6BCF;&#x6B21;&#x4F5C;&#x696D;&#x6211;&#x90FD;&#x8981;&#x5BEB;&#x5169;&#x500B;&#x661F;&#x671F;&#x4EE5;&#x4E0A;&#xFF0C;&#x5168;&#x73ED;&#x8981;&#x7AF6;&#x8CFD;&#xFF0C;&#x4EE5;&#x6548;&#x80FD;&#x5728;&#x73ED;&#x4E0A;&#x7684;&#x767E;&#x5206;&#x6BD4;&#x505A;&#x8A55;&#x5206;&#xFF0C;&#x5927;&#x795E;&#x5F88;&#x591A;&#xFF0C;&#x6211;&#x7E3D;&#x662F;&#x588A;&#x5E95;&#xFF0C;&#x7D66;&#x5206;&#x751C;&#x5EA6;&#x6211;&#x7121;&#x6CD5;&#x8A55;&#x50F9;&#xFF0C;&#x56E0;&#x70BA;&#x9019;&#x9580;&#x8AB2;&#x958B;&#x5B78;&#x7684;&#x6642;&#x5019;&#x6709;&#x5927;&#x7D04;&#x4E94;&#x5341;&#x500B;&#x4EBA;&#xFF0C;&#x5B78;&#x671F;&#x672B;&#x53EA;&#x5269;&#x5927;&#x7D04;&#x4E09;&#x5341;&#x4E94;&#x500B;&#xFF0C;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#x6490;&#x5230;&#x6700;&#x5F8C;&#x5927;&#x6982;&#x90FD;&#x662F;&#x6703;&#x904E;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x6709;&#x6490;&#x5230;&#x6700;&#x5F8C;&#x3002;</p><h3 id="&#x4E0B;&#x5B78;&#x671F;"><a href="#&#x4E0B;&#x5B78;&#x671F;" class="headerlink" title="&#x4E0B;&#x5B78;&#x671F;"></a>&#x4E0B;&#x5B78;&#x671F;</h3><h4 id="&#x96F2;&#x7AEF;&#x8A08;&#x7B97;-&#x674E;&#x54F2;&#x69AE;"><a href="#&#x96F2;&#x7AEF;&#x8A08;&#x7B97;-&#x674E;&#x54F2;&#x69AE;" class="headerlink" title="&#x96F2;&#x7AEF;&#x8A08;&#x7B97; - &#x674E;&#x54F2;&#x69AE;"></a>&#x96F2;&#x7AEF;&#x8A08;&#x7B97; - &#x674E;&#x54F2;&#x69AE;</h4><p>&#x8001;&#x5E2B;&#x5F88;&#x8A8D;&#x771F;&#xFF0C;&#x7C21;&#x4ECB;&#x4E00;&#x4E9B;&#x96F2;&#x7AEF;&#x904B;&#x7B97;&#x4E0A;&#x7684;&#x6280;&#x8853;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x4F5C;&#x696D;&#x662F;&#x4F7F;&#x7528; QEMU &#x88DD; Ubuntu &#x865B;&#x64EC;&#x6A5F;&#xFF0C;&#x53E6;&#x5916;&#x5169;&#x6B21;&#x4F5C;&#x696D;&#x90FD;&#x662F;&#x5728;&#x5206;&#x6563;&#x67B6;&#x69CB;&#x4E0A;&#x8A13;&#x7DF4;&#x6A5F;&#x5668;&#x5B78;&#x7FD2;&#x7DB2;&#x8DEF;&#xFF0C;&#x4F5C;&#x696D;&#x4E0D;&#x96E3;&#xFF0C;&#x671F;&#x672B;&#x8981;&#x5831;&#x544A;&#x8AD6;&#x6587;&#xFF0C;&#x671F;&#x672B;&#x8003;&#x53EF;&#x4EE5;&#x9078;&#x64C7;&#x5BE6;&#x4F5C;&#x6216;&#x7D19;&#x7B46; (&#x4F46;&#x8001;&#x5E2B;&#x6709;&#x8AAA;&#x56E0;&#x70BA;&#x9019;&#x5B78;&#x671F;&#x4FEE;&#x7684;&#x4EBA;&#x592A;&#x591A;&#x96FB;&#x8166;&#x8CC7;&#x6E90;&#x6240;&#x4EE5;&#x624D;&#x958B;&#x653E;&#x7D19;&#x7B46;&#x8003;&#x8A66;)&#xFF0C;&#x7D19;&#x7B46;&#x8003;&#x8A66;&#x5F88;&#x7C21;&#x55AE;&#xFF0C;&#x7D66;&#x5206;&#x5F88;&#x751C;&#x3002;</p><h4 id="&#x4EBA;&#x5DE5;&#x667A;&#x6167;&#x8207;&#x85DD;&#x8853;&#x5C0E;&#x8AD6;-&#x5433;&#x4E2D;&#x6D69;"><a href="#&#x4EBA;&#x5DE5;&#x667A;&#x6167;&#x8207;&#x85DD;&#x8853;&#x5C0E;&#x8AD6;-&#x5433;&#x4E2D;&#x6D69;" class="headerlink" title="&#x4EBA;&#x5DE5;&#x667A;&#x6167;&#x8207;&#x85DD;&#x8853;&#x5C0E;&#x8AD6; - &#x5433;&#x4E2D;&#x6D69;"></a>&#x4EBA;&#x5DE5;&#x667A;&#x6167;&#x8207;&#x85DD;&#x8853;&#x5C0E;&#x8AD6; - &#x5433;&#x4E2D;&#x6D69;</h4><p>&#x96D6;&#x7136;&#x662F;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x8AB2;&#x4F46;&#x5167;&#x5BB9;&#x5927;&#x591A;&#x662F;&#x5728;&#x6559;&#x85DD;&#x8853;&#x76F8;&#x95DC;&#xFF0C;&#x6211;&#x767C;&#x73FE;&#x4E8B;&#x60C5;&#x4E0D;&#x592A;&#x5C0D;&#x7684;&#x6642;&#x5019;&#x5DF2;&#x7D93;&#x4F86;&#x4E0D;&#x6025;&#x4E86;&#xFF0C;&#x8001;&#x5E2B;&#x958B;&#x8AB2;&#x662F;&#x5E0C;&#x671B;&#x85DD;&#x8853;&#x7CFB;&#x7684;&#x4EBA;&#x4E5F;&#x4F86;&#x4FEE;&#x8AB2;&#xFF0C;&#x6240;&#x4EE5;&#x5BE6;&#x4F5C;&#x76F8;&#x95DC;&#x975E;&#x5E38;&#x5C11;&#xFF0C;&#x4E09;&#x4EFD;&#x4F5C;&#x696D;&#x90FD;&#x662F;&#x85DD;&#x8853;&#x76F8;&#x95DC;&#x7684;&#x5831;&#x544A;&#xFF0C;&#x5B78;&#x671F;&#x672B;&#x8981;&#x505A;&#x4E00;&#x500B;&#x5C08;&#x984C;&#xFF0C;&#x7D66;&#x5206;&#x5F88;&#x751C;&#x3002;</p><h3 id="&#x7D50;&#x8A9E;"><a href="#&#x7D50;&#x8A9E;" class="headerlink" title="&#x7D50;&#x8A9E;"></a>&#x7D50;&#x8A9E;</h3><p>&#x6E05;&#x5927;&#x8CC7;&#x5DE5;&#x597D;&#x8AB2;&#x4E0D;&#x5C11;&#xFF0C;&#x60F3;&#x4FEE;&#x7684;&#x4EBA;&#x4E5F;&#x5F88;&#x591A;&#xFF0C;&#x5C0D;&#x65BC;&#x975E;&#x672C;&#x79D1;&#x5B78;&#x751F;&#xFF0C;&#x8981;&#x6436;&#x5230;&#x8AB2;&#x4E5F;&#x4E0D;&#x5BB9;&#x6613;&#xFF0C;&#x633A;&#x7FA8;&#x6155;&#x8CC7;&#x5DE5;&#x7CFB;&#x7684;&#x5927;&#x5B78;&#x90E8;&#x5B78;&#x751F;&#x53EF;&#x4EE5;&#x6709;&#x56DB;&#x5E74;&#x597D;&#x597D;&#x4FEE;&#x8AB2;&#x4E9B;&#x8AB2;&#x3002;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;&amp;#x7B2C;&amp;#x4E00;&amp;#x6B21;&amp;#x4FEE;&amp;#x8CC7;&amp;#x5DE5;&amp;#x7CFB;&amp;#x7684;&amp;#x8AB2;&quot;&gt;&lt;a href=&quot;#&amp;#x7B2C;&amp;#x4E00;&amp;#x6B21;&amp;#x4FEE;&amp;#x8CC7;&amp;#x5DE5;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工作兩年辭職準備研究所</title>
    <link href="http://example.com/2019/03/23/%E5%B7%A5%E4%BD%9C%E5%85%A9%E5%B9%B4%E8%BE%AD%E8%81%B7%E6%BA%96%E5%82%99%E7%A0%94%E7%A9%B6%E6%89%80/"/>
    <id>http://example.com/2019/03/23/%E5%B7%A5%E4%BD%9C%E5%85%A9%E5%B9%B4%E8%BE%AD%E8%81%B7%E6%BA%96%E5%82%99%E7%A0%94%E7%A9%B6%E6%89%80/</id>
    <published>2019-03-22T22:02:11.000Z</published>
    <updated>2021-07-27T18:24:05.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="&#x8FAD;&#x8077;&#x6E96;&#x5099;&#x7814;&#x7A76;&#x6240;"><a href="#&#x8FAD;&#x8077;&#x6E96;&#x5099;&#x7814;&#x7A76;&#x6240;" class="headerlink" title="&#x8FAD;&#x8077;&#x6E96;&#x5099;&#x7814;&#x7A76;&#x6240;"></a>&#x8FAD;&#x8077;&#x6E96;&#x5099;&#x7814;&#x7A76;&#x6240;</h3><p>&#x6211;&#x5F9E;&#x67D0;&#x56DB;&#x5927;&#x6A5F;&#x68B0;&#x7CFB;&#x7562;&#x696D;&#x5F8C;&#x5C31;&#x53BB;&#x5DE5;&#x4F5C;&#x4E86;&#xFF0C;&#x56E0;&#x70BA;&#x6211;&#x7684;&#x7CFB;&#x6392;&#x53EA;&#x6709; 70% &#x5DE6;&#x53F3;&#xFF0C;&#x4E5F;&#x4E0D;&#x60F3;&#x8981;&#x6E96;&#x5099;&#x8003;&#x8A66;&#xFF0C;&#x7576;&#x6642;&#x6211;&#x5C0D;&#x5FF5;&#x66F8;&#x9019;&#x4EF6;&#x4E8B;&#x60C5;&#x5DF2;&#x7D93;&#x975E;&#x5E38;&#x53AD;&#x5026;&#xFF0C;&#x6211;&#x5C0D;&#x6A5F;&#x68B0;&#x7CFB;&#x4E5F;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x975E;&#x5E38;&#x6709;&#x71B1;&#x5FF1;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x60F3;&#xFF0C;&#x90A3;&#x5C31;&#x51FA;&#x53BB;&#x5DE5;&#x4F5C;&#x5427;&#xFF0C;&#x81F3;&#x5C11;&#x53EF;&#x4EE5;&#x770B;&#x770B;&#x81EA;&#x5DF1;&#x5230;&#x5E95;&#x80FD;&#x4E0D;&#x80FD;&#x7368;&#x7ACB;&#x751F;&#x6D3B;&#xFF0C;&#x7576;&#x6642;&#x4E5F;&#x60F3;&#x597D;&#x518D;&#x904E;&#x4E00;&#x5169;&#x5E74;&#x5982;&#x679C;&#x6539;&#x8B8A;&#x5FC3;&#x610F;&#x60F3;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x90A3;&#x5C31;&#x53BB;&#x5427;&#x3002;</p><h3 id="&#x63A8;&#x7504;&#x548C;&#x8003;&#x8A66;"><a href="#&#x63A8;&#x7504;&#x548C;&#x8003;&#x8A66;" class="headerlink" title="&#x63A8;&#x7504;&#x548C;&#x8003;&#x8A66;"></a>&#x63A8;&#x7504;&#x548C;&#x8003;&#x8A66;</h3><p>&#x6211;&#x5F9E; 2018 &#x5E74;&#x7684;&#x4E09;&#x6708;&#x958B;&#x59CB;&#x6162;&#x6162;&#x7684;&#x8B80;&#x8D77;&#x66F8;&#x4F86;&#xFF0C; &#x4F46;&#x56E0;&#x70BA;&#x662F;&#x908A;&#x4E0A;&#x73ED;&#x908A;&#x5FF5;&#x66F8;&#xFF0C;&#x4E00;&#x5929;&#x5927;&#x7D04;&#x53EA;&#x80FD;&#x5538;&#x5230;&#x5169;&#x500B;&#x5C0F;&#x6642;&#x5DE6;&#x53F3;&#x7684;&#x66F8;&#xFF0C;&#x4E2D;&#x9593;&#x9084;&#x7D93;&#x6B77;&#x7D04;&#x672B;&#x4E00;&#x500B;&#x6708;&#x5E38;&#x5E38;&#x52A0;&#x73ED;&#x7684;&#x65E5;&#x5B50;&#xFF0C; &#x56E0;&#x6B64;&#x9032;&#x5EA6;&#x5B8C;&#x5168;&#x66AB;&#x505C;&#xFF0C;&#x76F4;&#x5230;&#x516D;&#x6708;&#x6642;&#x6C7A;&#x5B9A;&#x63D0;&#x51FA;&#x8FAD;&#x5448;&#xFF0C;&#x4E03;&#x6708;&#x6B63;&#x5F0F;&#x96E2;&#x8077;&#xFF0C;&#x4E4B;&#x5F8C;&#x5C31;&#x5728;&#x88DC;&#x7FD2;&#x73ED;&#x4E0A;&#x4E86;&#x4E00;&#x6691;&#x5047;&#x7684;&#x8AB2;&#xFF0C;&#x7D04;&#x83AB;&#x4E5D;&#x6708;&#x7684;&#x6642;&#x5019;&#x958B;&#x59CB;&#x6E96;&#x5099;&#x63A8;&#x7504;&#xFF0C;&#x63A8;&#x7504;&#x8CC7;&#x6599;&#x5305;&#x542B;&#x81EA;&#x50B3;&#x63A8;&#x85A6;&#x4FE1;&#x90FD;&#x8981;&#x82B1;&#x4E00;&#x5B9A;&#x7684;&#x6642;&#x9593;&#x6E96;&#x5099;&#xFF0C;&#x9304;&#x53D6;&#x4E4B;&#x5F8C;&#x627E;&#x6559;&#x6388;&#x7684;&#x6642;&#x9593;&#x4E5F;&#x9700;&#x8981;&#x4E00;&#x500B;&#x661F;&#x671F;&#x5DE6;&#x53F3;&#xFF0C;&#x6211;&#x4E00;&#x76F4;&#x5F88;&#x64D4;&#x5FC3;&#x5982;&#x679C;&#x6C92;&#x6709;&#x63A8;&#x4E0A;&#x4EFB;&#x4F55;&#x4E00;&#x6240;&#x5B78;&#x6821;&#xFF0C;&#x90A3;&#x6E96;&#x5099;&#x7684;&#x6642;&#x9593;&#x5C31;&#x6D6A;&#x8CBB;&#x6389;&#x4E86;&#xFF0C;&#x4F46;&#x56E0;&#x6211;&#x89BA;&#x5F97;&#x6211;&#x5728;&#x63A8;&#x7504;&#x4E0A;&#x6709;&#x4E00;&#x5B9A;&#x512A;&#x52E2; (&#x5DE5;&#x4F5C;&#x7D93;&#x9A57;)&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x60F3;&#x653E;&#x68C4;&#x9019;&#x500B;&#x7BA1;&#x9053;&#xFF0C;&#x6700;&#x5F8C;&#x6211;&#x5728;&#x5341;&#x4E8C;&#x6708;&#x5099;&#x4E0A;&#x6210;&#x5927;&#xFF0C;&#x4E00;&#x6708;&#x5099;&#x4E0A;&#x4EA4;&#x5927;&#xFF0C;&#x7136;&#x5F8C;&#x53C3;&#x52A0;&#x4E8C;&#x6708;&#x7684;&#x7814;&#x7A76;&#x6240;&#x8003;&#x8A66;&#xFF0C;&#x6E05;&#x5927;&#x7684;&#x8003;&#x8A66;&#x5165;&#x5B78;&#x5176;&#x5BE6;&#x4E5F;&#x662F;&#x63A8;&#x7504;&#x7684;&#x65B9;&#x5F0F; (&#x53EA;&#x662F;&#x8981;&#x8003;&#x4E00;&#x79D1;&#x82F1;&#x6587;)&#xFF0C;&#x53F0;&#x5927;&#x662F;&#x666E;&#x901A;&#x8003;&#x8A66;&#x65B9;&#x5F0F;&#xFF0C;&#x6700;&#x5F8C;&#x9019;&#x5169;&#x9593;&#x90FD;&#x6B63;&#x53D6;&#x4E86;&#x3002;&#x6211;&#x6700;&#x5F8C;&#x6C7A;&#x5B9A;&#x8981;&#x5728;&#x6E05;&#x5927;&#x8B80;&#x78A9;&#x58EB;&#xFF0C;&#x56E0;&#x70BA;&#x6211;&#x5C0D;&#x6E05;&#x5927;&#x7684;&#x5BE6;&#x9A57;&#x5BA4;&#x6BD4;&#x8F03;&#x611F;&#x8208;&#x8DA3;&#x3002;</p><h3 id="&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x518D;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x6709;&#x4EC0;&#x9EBC;&#x597D;&#x8655;"><a href="#&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x518D;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x6709;&#x4EC0;&#x9EBC;&#x597D;&#x8655;" class="headerlink" title="&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x518D;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x6709;&#x4EC0;&#x9EBC;&#x597D;&#x8655;"></a>&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x518D;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x6709;&#x4EC0;&#x9EBC;&#x597D;&#x8655;</h3><p>&#x6211;&#x89BA;&#x5F97;&#x73FE;&#x5728;&#x7684;&#x6211;&#x6BD4;&#x5927;&#x56DB;&#x7684;&#x6642;&#x5019;&#x66F4;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x60F3;&#x8981;&#x4EC0;&#x9EBC;&#xFF0C;&#x6211;&#x8DDF;&#x7684;&#x5BE6;&#x9A57;&#x5BA4;&#x6709;&#x5F88;&#x5927;&#x90E8;&#x5206;&#x9700;&#x8981;&#x5BEB;&#x7A0B;&#x5F0F;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x627E;&#x4E86;&#x597D;&#x5E7E;&#x500B;&#x8CC7;&#x5DE5;&#x80CC;&#x666F;&#x7684;&#x670B;&#x53CB;&#x8AEE;&#x8A62;&#x6211;&#x8981;&#x5982;&#x4F55;&#x5728;&#x6700;&#x77ED;&#x6642;&#x9593;&#x5167;&#x628A;&#x6211;&#x7684;&#x7A0B;&#x5F0F;&#x80FD;&#x529B;&#x62C9;&#x8D77;&#x4F86;&#xFF0C;&#x800C;&#x6211;&#x4E5F;&#x5E0C;&#x671B;&#x53EF;&#x4EE5;&#x8A66;&#x8A66;&#x770B;&#x80FD;&#x4E0D;&#x80FD;&#x8D81;&#x6B64;&#x6A5F;&#x6703;&#x57F9;&#x990A;&#x7A0B;&#x5F0F;&#x80FD;&#x529B;&#x4E4B;&#x5F8C;&#x80FD;&#x671D;&#x8CC7;&#x5DE5;&#x9818;&#x57DF;&#x767C;&#x5C55;&#x3002;</p><p>&#x56E0;&#x70BA;&#x5DE5;&#x4F5C;&#x904E;&#x7684;&#x95DC;&#x4FC2;&#xFF0C;&#x5BE6;&#x9A57;&#x5BA4;&#x53EF;&#x4EE5;&#x57F9;&#x990A;&#x6211;&#x4EC0;&#x9EBC;&#x80FD;&#x529B;&#x662F;&#x6211;&#x9078;&#x5BE6;&#x9A57;&#x5BA4;&#x7684;&#x7B2C;&#x4E00;&#x6E96;&#x5247;&#xFF0C;&#x56E0;&#x70BA;&#x6211;&#x77E5;&#x9053;&#x6211;&#x7684;&#x80FD;&#x529B;&#x6703;&#x5F71;&#x97FF;&#x6211;&#x7684;&#x4E0B;&#x4E00;&#x4EFD;&#x5DE5;&#x4F5C;&#xFF0C;&#x5B78;&#x6B77;&#x6703;&#x5F71;&#x97FF;&#x4E00;&#x500B;&#x4EBA;&#x7684;&#x7B2C;&#x4E00;&#x4EFD;&#x5DE5;&#x4F5C;&#xFF0C;&#x7B2C;&#x4E00;&#x4EFD;&#x5DE5;&#x4F5C;&#x7684;&#x5167;&#x5BB9;&#x6703;&#x5F71;&#x97FF;&#x7B2C;&#x4E8C;&#x4EFD;&#x5DE5;&#x4F5C;&#xFF0C;&#x4E00;&#x500B;&#x5BE6;&#x9A57;&#x5BA4;&#x6216;&#x4E00;&#x4EFD;&#x5DE5;&#x4F5C;&#xFF0C;&#x5C0D;&#x73FE;&#x5728;&#x7684;&#x6211;&#x4F86;&#x8AAA;&#x6700;&#x91CD;&#x8981;&#x7684;&#x662F;&#x5B83;&#x80FD;&#x8B93;&#x6211;&#x8B8A;&#x6210;&#x66F4;&#x6709;&#x80FD;&#x529B;&#x7684;&#x4EBA;&#xFF0C;&#x5E36;&#x7D66;&#x6211;&#x66F4;&#x597D;&#x7684;&#x6A5F;&#x6703;&#xFF0C;&#x5E36;&#x6211;&#x53BB;&#x66F4;&#x597D;&#x7684;&#x5730;&#x65B9;&#x3002;</p><h3 id="&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x518D;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x6709;&#x4EC0;&#x9EBC;&#x58DE;&#x8655;"><a href="#&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x518D;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x6709;&#x4EC0;&#x9EBC;&#x58DE;&#x8655;" class="headerlink" title="&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x518D;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x6709;&#x4EC0;&#x9EBC;&#x58DE;&#x8655;"></a>&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x518D;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x6709;&#x4EC0;&#x9EBC;&#x58DE;&#x8655;</h3><p>&#x6211;&#x8AAA;&#x4E86;&#x9019;&#x9EBC;&#x591A;&#x5148;&#x5DE5;&#x4F5C;&#x518D;&#x5FF5;&#x66F8;&#x7684;&#x597D;&#x8655;&#xFF0C;&#x4F46;&#x4E0D;&#x5728;&#x5927;&#x56DB;&#x61C9;&#x5C46;&#x8003;&#x53D6;&#x7814;&#x7A76;&#x6240;&#x9084;&#x662F;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x98A8;&#x96AA;&#xFF0C;&#x5C31;&#x662F;&#x4E0D;&#x77E5;&#x9053;&#x5230;&#x5E95;&#x56DE;&#x4E0D;&#x56DE;&#x7684;&#x53BB;&#x5B78;&#x6821;&#xFF0C;&#x597D;&#x5E7E;&#x5E74;&#x6C92;&#x6709;&#x8A8D;&#x771F;&#x5FF5;&#x66F8;&#x4E86;&#xFF0C;&#x63A8;&#x7504;&#x4E0D;&#x78BA;&#x5B9A;&#x63A8;&#x5F97;&#x4E0A;&#xFF0C;&#x8003;&#x8A66;&#x53C8;&#x6015;&#x81EA;&#x5DF1;&#x592A;&#x4E45;&#x6C92;&#x5538;&#x66F8;&#x4E0D;&#x77E5;&#x9053;&#x9084;&#x884C;&#x4E0D;&#x884C;&#xFF0C;&#x9019;&#x534A;&#x5E74;&#x771F;&#x7684;&#x662F;&#x904E;&#x7684;&#x975E;&#x5E38;&#x7126;&#x616E;&#xFF0C;&#x8FAD;&#x6389;&#x5DE5;&#x4F5C;&#x4E4B;&#x5F8C;&#x5C31;&#x4E0D;&#x6703;&#x6BCF;&#x500B;&#x6708;&#x6709;&#x9322;&#x9032;&#x5E33;&#xFF0C;&#x5B58;&#x6B3E;&#x53EA;&#x6703;&#x4E00;&#x76F4;&#x6E1B;&#x5C11;&#xFF0C;&#x64D4;&#x5FC3;&#x534A;&#x5E74;&#x5F8C;&#x6C92;&#x6709;&#x8003;&#x4E0A;&#x56DE;&#x53BB;&#x627E;&#x5DE5;&#x4F5C;&#x6703;&#x627E;&#x4E0D;&#x5230;&#x597D;&#x516C;&#x53F8;&#xFF0C;&#x5C24;&#x5176;&#x6211;&#x5728;&#x88DC;&#x7FD2;&#x73ED;&#x6642;&#x767C;&#x73FE;&#x4F3C;&#x4E4E;&#x6709;&#x4E9B;&#x5B78;&#x751F;&#x662F;&#x6E96;&#x5099;&#x4E00;&#x5E74;&#x5230;&#x4E00;&#x5E74;&#x534A;&#x53BB;&#x8003;&#x8A66;&#xFF0C;&#x800C;&#x6211;&#x53EA;&#x6709;&#x534A;&#x5E74;&#x9084;&#x8981;&#x540C;&#x6642;&#x6E96;&#x5099;&#x63A8;&#x7504;&#xFF0C;&#x4E00;&#x76F4;&#x90FD;&#x5F88;&#x64D4;&#x5FC3;&#x6642;&#x9593;&#x4E0D;&#x5920;&#x3002;&#x5927;&#x7D04;&#x5728;&#x6210;&#x5927;&#x5099;&#x4E0A;&#x5F8C;&#x6211;&#x9677;&#x5165;&#x4E00;&#x6BB5;&#x5F88;&#x7CDF;&#x7684;&#x6642;&#x9593;&#xFF0C;&#x56E0;&#x70BA;&#x6211;&#x6C92;&#x6709;&#x5728;&#x6210;&#x5927;&#x627E;&#x5230;&#x7406;&#x60F3;&#x7684;&#x8001;&#x5E2B;&#xFF0C;&#x4EA4;&#x5927;&#x5728;&#x53EF;&#x80FD;&#x6703;&#x5099;&#x4E0A;&#x7684;&#x908A;&#x7DE3;&#xFF0C;&#x6E05;&#x5927;&#x7684;&#x8003;&#x5165;&#x5165;&#x5B78;&#x4E0D;&#x8003;&#x8A66;&#x53EA;&#x505A;&#x63A8;&#x7504;&#x53EF;&#x662F;&#x6211;&#x5728;&#x6E05;&#x5927;&#x63A8;&#x7504;&#x6642;&#x5DF2;&#x7D93;&#x843D;&#x699C;&#x904E;&#x4E00;&#x6B21;&#xFF0C;&#x518D;&#x4F86;&#x4E00;&#x6B21;&#x96E3;&#x9053;&#x5C31;&#x6703;&#x4E0A;&#x55CE; (&#x7D50;&#x679C;&#x518D;&#x4F86;&#x4E00;&#x6B21;&#x771F;&#x7684;&#x5C31;&#x4E0A;&#x4E86;)&#xFF0C;&#x5F9E;&#x5099;&#x4E0A;&#x6210;&#x5927;&#x5230;&#x5099;&#x4E0A;&#x4EA4;&#x5927;&#x4E2D;&#x9593;&#x7684;&#x9019;&#x6BB5;&#x6642;&#x9593;&#x6211;&#x771F;&#x7684;&#x4E00;&#x76F4;&#x5F88;&#x7126;&#x616E;&#xFF0C;&#x76F4;&#x5230;&#x6211;&#x5728;&#x4EA4;&#x5927;&#x627E;&#x5230;&#x4E86;&#x6211;&#x89BA;&#x5F97;&#x5F88;&#x4E0D;&#x932F;&#x7684;&#x6559;&#x6388;&#xFF0C;&#x6211;&#x624D;&#x6BD4;&#x8F03;&#x6062;&#x5FA9;&#x5E73;&#x5E38;&#x5FC3;&#x7E7C;&#x7E8C;&#x6E96;&#x5099;&#x53F0;&#x5927;&#x7684;&#x8003;&#x8A66;&#x3002;</p><h3 id="&#x7D50;&#x8A9E;"><a href="#&#x7D50;&#x8A9E;" class="headerlink" title="&#x7D50;&#x8A9E;"></a>&#x7D50;&#x8A9E;</h3><p>&#x6211;&#x53EF;&#x4EE5;&#x6536;&#x5230;&#x56DB;&#x9593;&#x5927;&#x5B78;&#x7684;&#x9304;&#x53D6;&#x55AE;&#x5F88;&#x5927;&#x4E00;&#x90E8;&#x5206;&#x9084;&#x662F;&#x8981;&#x6B78;&#x529F;&#x6211;&#x4EE5;&#x524D;&#x7684;&#x52AA;&#x529B;&#xFF0C;&#x65BC;&#x63A8;&#x7504;&#x800C;&#x8A00;&#x5927;&#x5B78;&#x6821;&#x540D;&#x7576;&#x7136;&#x662F;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x5DE5;&#x4F5C;&#x5169;&#x5E74;&#x6211;&#x89BA;&#x5F97;&#x6211;&#x7684;&#x7A4D;&#x6975;&#x5EA6;&#x548C;&#x5C0D;&#x65BC;&#x4EBA;&#x751F;&#x898F;&#x5283;&#x7684;&#x60F3;&#x6CD5;&#x90FD;&#x591A;&#x4E86;&#x5F88;&#x591A;&#xFF0C;&#x6211;&#x89BA;&#x5F97;&#x5148;&#x5DE5;&#x4F5C;&#x4E00;&#x5B9A;&#x662F;&#x6709;&#x5F88;&#x5927;&#x7684;&#x597D;&#x8655;&#xFF0C;&#x4E5F;&#x6216;&#x8A31;&#x4F60;&#x5DE5;&#x4F5C;&#x4E4B;&#x5F8C;&#x624D;&#x767C;&#x73FE;&#x9019;&#x4EFD;&#x5DE5;&#x4F5C;&#x4F60;&#x6839;&#x672C;&#x4E00;&#x9EDE;&#x4E5F;&#x4E0D;&#x559C;&#x6B61;&#xFF0C;&#x90A3;&#x4E5F;&#x5F88;&#x597D;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x9084;&#x5E74;&#x8F15;&#x6642;&#x5C31;&#x60F3;&#x65B9;&#x6CD5;&#x8F49;&#x63DB;&#x5DE5;&#x4F5C;&#x9818;&#x57DF; (&#x7576;&#x7136;&#x5FF5;&#x7814;&#x7A76;&#x6240;&#x4E5F;&#x662F;&#x4E00;&#x7A2E;&#x5F88;&#x597D;&#x7684;&#x8F49;&#x63DB;&#x5DE5;&#x4F5C;&#x9818;&#x57DF;&#x7684;&#x65B9;&#x6CD5;)&#xFF0C;(&#x548C;&#x79D1;&#x7CFB;&#x76F8;&#x95DC;&#x7684;) &#x5DE5;&#x4F5C;&#x7D93;&#x6B77;&#x5C0D;&#x63A8;&#x7504;&#x4F86;&#x8AAA;&#x662F;&#x4E00;&#x500B;&#x5927;&#x5927;&#x7684;&#x52A0;&#x5206;&#x9805;&#xFF0C;&#x4F46;&#x4E0D;&#x8AD6;&#x4EC0;&#x9EBC;&#x65B9;&#x6CD5;&#xFF0C;&#x8FAD;&#x8077;&#x662F;&#x4E00;&#x4EF6;&#x4E0D;&#x53EF;&#x9006;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x591A;&#x5C11;&#x6709;&#x4E00;&#x9EDE;&#x8CED;&#x81EA;&#x5DF1;&#x4E0A;&#x699C;&#x7684;&#x610F;&#x5473;&#x5728;&#xFF0C;&#x9664;&#x4E86;&#x8FAD;&#x8077;&#x4E4B;&#x5916;&#xFF0C;&#x534A;&#x5E74;&#x7684;&#x7A7A;&#x767D;&#x671F;&#x6211;&#x6700;&#x5BB3;&#x6015;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x5728;&#x8FAD;&#x8077;&#x4E4B;&#x524D;&#x5DF2;&#x7D93;&#x5728;&#x4E0B;&#x73ED;&#x5F8C;&#x5FF5;&#x66F8;&#xFF0C;&#x628A;&#x81EA;&#x5DF1;&#x5C0D;&#x5FF5;&#x66F8;&#x9019;&#x4EF6;&#x4E8B;&#x60C5;&#x7684;&#x719F;&#x6089;&#x611F;&#x627E;&#x56DE;&#x4F86;&#xFF0C;&#x7576;&#x6211;&#x6B63;&#x5F0F;&#x63D0;&#x51FA;&#x8FAD;&#x8077;&#x6642;&#x6211;&#x7684;&#x4E0A;&#x53F8;&#x9084;&#x554F;&#x6211;&#x8981;&#x4E0D;&#x8981;&#x518D;&#x8003;&#x616E;&#x4E00;&#x4E0B;&#x4E0D;&#x8981;&#x885D;&#x52D5;&#x8FAD;&#x8077;&#xFF0C;&#x4F46;&#x90A3;&#x6642;&#x5019;&#x5176;&#x5BE6;&#x6211;&#x5DF2;&#x7D93;&#x505A;&#x597D;&#x6C7A;&#x5B9A;&#x5F88;&#x4E45;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x975E;&#x5E38;&#x5805;&#x5B9A;&#x7684;&#x8FAD;&#x8077;&#x4E86;&#x3002;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;&amp;#x8FAD;&amp;#x8077;&amp;#x6E96;&amp;#x5099;&amp;#x7814;&amp;#x7A76;&amp;#x6240;&quot;&gt;&lt;a href=&quot;#&amp;#x8FAD;&amp;#x8077;&amp;#x6E96;&amp;#x5099;&amp;#x7814;&amp;#x7A76;&amp;#x6240;&quot; class=</summary>
      
    
    
    
    
  </entry>
  
</feed>
